
3_f44_can_normal-mode_rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001eb0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  08002080  08002080  00012080  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002154  08002154  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08002154  08002154  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002154  08002154  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002154  08002154  00012154  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002158  08002158  00012158  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  0800215c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000098  20000064  080021c0  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000fc  080021c0  000200fc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000026ea  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000a54  00000000  00000000  0002277e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000250  00000000  00000000  000231d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00023428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000022f4  00000000  00000000  000235f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00003234  00000000  00000000  000258e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090bd2  00000000  00000000  00028b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b96ea  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001084  00000000  00000000  000b973c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08002068 	.word	0x08002068

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08002068 	.word	0x08002068

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <led_init>:
#define LED_PIN		PIN5
#define PIN13		(1U<<13)
#define BTN_PIN		PIN13

void led_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b0b      	ldr	r3, [pc, #44]	; (80002e4 <led_init+0x34>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a0a      	ldr	r2, [pc, #40]	; (80002e4 <led_init+0x34>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA5 mode to output mode*/
	GPIOA->MODER |=(1U<<10);
 80002c0:	4b09      	ldr	r3, [pc, #36]	; (80002e8 <led_init+0x38>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a08      	ldr	r2, [pc, #32]	; (80002e8 <led_init+0x38>)
 80002c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER &=~(1U<<11);
 80002cc:	4b06      	ldr	r3, [pc, #24]	; (80002e8 <led_init+0x38>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <led_init+0x38>)
 80002d2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40023800 	.word	0x40023800
 80002e8:	40020000 	.word	0x40020000

080002ec <led_toggle>:
	GPIOA->ODR &=~LED_PIN;

}

void led_toggle(void)
{
 80002ec:	b480      	push	{r7}
 80002ee:	af00      	add	r7, sp, #0
	GPIOA->ODR ^=LED_PIN;
 80002f0:	4b05      	ldr	r3, [pc, #20]	; (8000308 <led_toggle+0x1c>)
 80002f2:	695b      	ldr	r3, [r3, #20]
 80002f4:	4a04      	ldr	r2, [pc, #16]	; (8000308 <led_toggle+0x1c>)
 80002f6:	f083 0320 	eor.w	r3, r3, #32
 80002fa:	6153      	str	r3, [r2, #20]

}
 80002fc:	bf00      	nop
 80002fe:	46bd      	mov	sp, r7
 8000300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000304:	4770      	bx	lr
 8000306:	bf00      	nop
 8000308:	40020000 	.word	0x40020000

0800030c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800030c:	b480      	push	{r7}
 800030e:	b083      	sub	sp, #12
 8000310:	af00      	add	r7, sp, #0
 8000312:	4603      	mov	r3, r0
 8000314:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800031a:	2b00      	cmp	r3, #0
 800031c:	db0b      	blt.n	8000336 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800031e:	79fb      	ldrb	r3, [r7, #7]
 8000320:	f003 021f 	and.w	r2, r3, #31
 8000324:	4907      	ldr	r1, [pc, #28]	; (8000344 <__NVIC_EnableIRQ+0x38>)
 8000326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032a:	095b      	lsrs	r3, r3, #5
 800032c:	2001      	movs	r0, #1
 800032e:	fa00 f202 	lsl.w	r2, r0, r2
 8000332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000336:	bf00      	nop
 8000338:	370c      	adds	r7, #12
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	e000e100 	.word	0xe000e100

08000348 <can_gpio_init>:

#define GPIOBEN		(1U<<1)
#define CAN_AF       0x09

void can_gpio_init(void)
{
 8000348:	b580      	push	{r7, lr}
 800034a:	af00      	add	r7, sp, #0
	/*Enable clock access to gpiob*/
	RCC->AHB1ENR |= GPIOBEN;
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <can_gpio_init+0x64>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000350:	4a16      	ldr	r2, [pc, #88]	; (80003ac <can_gpio_init+0x64>)
 8000352:	f043 0302 	orr.w	r3, r3, #2
 8000356:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB8 and PB9 to alternate function mode*/
	GPIOB->MODER &=~(1U<<16);
 8000358:	4b15      	ldr	r3, [pc, #84]	; (80003b0 <can_gpio_init+0x68>)
 800035a:	681b      	ldr	r3, [r3, #0]
 800035c:	4a14      	ldr	r2, [pc, #80]	; (80003b0 <can_gpio_init+0x68>)
 800035e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000362:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<17);
 8000364:	4b12      	ldr	r3, [pc, #72]	; (80003b0 <can_gpio_init+0x68>)
 8000366:	681b      	ldr	r3, [r3, #0]
 8000368:	4a11      	ldr	r2, [pc, #68]	; (80003b0 <can_gpio_init+0x68>)
 800036a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800036e:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &=~(1U<<18);
 8000370:	4b0f      	ldr	r3, [pc, #60]	; (80003b0 <can_gpio_init+0x68>)
 8000372:	681b      	ldr	r3, [r3, #0]
 8000374:	4a0e      	ldr	r2, [pc, #56]	; (80003b0 <can_gpio_init+0x68>)
 8000376:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800037a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<19);
 800037c:	4b0c      	ldr	r3, [pc, #48]	; (80003b0 <can_gpio_init+0x68>)
 800037e:	681b      	ldr	r3, [r3, #0]
 8000380:	4a0b      	ldr	r2, [pc, #44]	; (80003b0 <can_gpio_init+0x68>)
 8000382:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000386:	6013      	str	r3, [r2, #0]

	/*Set PB8 and PB9 alternate function to CAN1 RX and TX*/
	GPIOB->AFR[1] |=(CAN_AF << 0);
 8000388:	4b09      	ldr	r3, [pc, #36]	; (80003b0 <can_gpio_init+0x68>)
 800038a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800038c:	4a08      	ldr	r2, [pc, #32]	; (80003b0 <can_gpio_init+0x68>)
 800038e:	f043 0309 	orr.w	r3, r3, #9
 8000392:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=(CAN_AF << 4);
 8000394:	4b06      	ldr	r3, [pc, #24]	; (80003b0 <can_gpio_init+0x68>)
 8000396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000398:	4a05      	ldr	r2, [pc, #20]	; (80003b0 <can_gpio_init+0x68>)
 800039a:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800039e:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable CAN RX0 interrupt for message reception*/
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80003a0:	2014      	movs	r0, #20
 80003a2:	f7ff ffb3 	bl	800030c <__NVIC_EnableIRQ>
}
 80003a6:	bf00      	nop
 80003a8:	bd80      	pop	{r7, pc}
 80003aa:	bf00      	nop
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020400 	.word	0x40020400

080003b4 <can_params_init>:

void can_params_init(uint8_t mode){
 80003b4:	b480      	push	{r7}
 80003b6:	b083      	sub	sp, #12
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	4603      	mov	r3, r0
 80003bc:	71fb      	strb	r3, [r7, #7]

	/*Enable clock access to CAN1*/
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 80003be:	4b1c      	ldr	r3, [pc, #112]	; (8000430 <can_params_init+0x7c>)
 80003c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80003c2:	4a1b      	ldr	r2, [pc, #108]	; (8000430 <can_params_init+0x7c>)
 80003c4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80003c8:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter initialization mode*/
	CAN1->MCR |= CAN_MCR_INRQ;
 80003ca:	4b1a      	ldr	r3, [pc, #104]	; (8000434 <can_params_init+0x80>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a19      	ldr	r2, [pc, #100]	; (8000434 <can_params_init+0x80>)
 80003d0:	f043 0301 	orr.w	r3, r3, #1
 80003d4:	6013      	str	r3, [r2, #0]

	/*Wait until CAN1 is in initialization mode*/
	while((CAN1->MSR & CAN_MSR_INAK) == 0){}
 80003d6:	bf00      	nop
 80003d8:	4b16      	ldr	r3, [pc, #88]	; (8000434 <can_params_init+0x80>)
 80003da:	685b      	ldr	r3, [r3, #4]
 80003dc:	f003 0301 	and.w	r3, r3, #1
 80003e0:	2b00      	cmp	r3, #0
 80003e2:	d0f9      	beq.n	80003d8 <can_params_init+0x24>

	/*Exit sleep mode*/
	CAN1->MCR &=~CAN_MCR_SLEEP;
 80003e4:	4b13      	ldr	r3, [pc, #76]	; (8000434 <can_params_init+0x80>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a12      	ldr	r2, [pc, #72]	; (8000434 <can_params_init+0x80>)
 80003ea:	f023 0302 	bic.w	r3, r3, #2
 80003ee:	6013      	str	r3, [r2, #0]

	/*Wait until CAN1 is out of sleep mode*/
	while((CAN1->MSR & CAN_MSR_SLAK) != 0){}
 80003f0:	bf00      	nop
 80003f2:	4b10      	ldr	r3, [pc, #64]	; (8000434 <can_params_init+0x80>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f003 0302 	and.w	r3, r3, #2
 80003fa:	2b00      	cmp	r3, #0
 80003fc:	d1f9      	bne.n	80003f2 <can_params_init+0x3e>

	/*Configure timing parameters including baudrate by configuring time segment 1 and 2
	 * and prescaler*/
	CAN1->BTR = (1<< CAN_BTR_TS1_Pos) | (0 << CAN_BTR_TS1_Pos) | (9 << CAN_BTR_BRP_Pos);
 80003fe:	4b0d      	ldr	r3, [pc, #52]	; (8000434 <can_params_init+0x80>)
 8000400:	4a0d      	ldr	r2, [pc, #52]	; (8000438 <can_params_init+0x84>)
 8000402:	61da      	str	r2, [r3, #28]
	/*Select mode*/
	if(mode)
 8000404:	79fb      	ldrb	r3, [r7, #7]
 8000406:	2b00      	cmp	r3, #0
 8000408:	d006      	beq.n	8000418 <can_params_init+0x64>
	{
		/*Normal mode*/
		CAN1->BTR &=~(1U<<30);
 800040a:	4b0a      	ldr	r3, [pc, #40]	; (8000434 <can_params_init+0x80>)
 800040c:	69db      	ldr	r3, [r3, #28]
 800040e:	4a09      	ldr	r2, [pc, #36]	; (8000434 <can_params_init+0x80>)
 8000410:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8000414:	61d3      	str	r3, [r2, #28]
	else
	{
		/*Loopback mode*/
		CAN1->BTR |= (1U<<30);
	}
}
 8000416:	e005      	b.n	8000424 <can_params_init+0x70>
		CAN1->BTR |= (1U<<30);
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <can_params_init+0x80>)
 800041a:	69db      	ldr	r3, [r3, #28]
 800041c:	4a05      	ldr	r2, [pc, #20]	; (8000434 <can_params_init+0x80>)
 800041e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000422:	61d3      	str	r3, [r2, #28]
}
 8000424:	bf00      	nop
 8000426:	370c      	adds	r7, #12
 8000428:	46bd      	mov	sp, r7
 800042a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042e:	4770      	bx	lr
 8000430:	40023800 	.word	0x40023800
 8000434:	40006400 	.word	0x40006400
 8000438:	00010009 	.word	0x00010009

0800043c <can_start>:


void can_start(void)
{
 800043c:	b480      	push	{r7}
 800043e:	af00      	add	r7, sp, #0
	/*Exit initialization mode*/
	CAN1->MCR &=~ CAN_MCR_INRQ;
 8000440:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <can_start+0x34>)
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	4a0a      	ldr	r2, [pc, #40]	; (8000470 <can_start+0x34>)
 8000446:	f023 0301 	bic.w	r3, r3, #1
 800044a:	6013      	str	r3, [r2, #0]

	/*Wait until CAN1 is out of initialization mode*/
	while((CAN1->MSR & CAN_MSR_INAK) == 1){}
 800044c:	bf00      	nop
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <can_start+0x34>)
 8000450:	685b      	ldr	r3, [r3, #4]
 8000452:	f003 0301 	and.w	r3, r3, #1
 8000456:	2b01      	cmp	r3, #1
 8000458:	d0f9      	beq.n	800044e <can_start+0x12>

	/*Enable interrupt for FIFO0 message pending*/
	CAN1->IER |= (1U<<1);
 800045a:	4b05      	ldr	r3, [pc, #20]	; (8000470 <can_start+0x34>)
 800045c:	695b      	ldr	r3, [r3, #20]
 800045e:	4a04      	ldr	r2, [pc, #16]	; (8000470 <can_start+0x34>)
 8000460:	f043 0302 	orr.w	r3, r3, #2
 8000464:	6153      	str	r3, [r2, #20]
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr
 8000470:	40006400 	.word	0x40006400

08000474 <can_add_tx_message>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval  status
  */
uint8_t can_add_tx_message(can_tx_header_typedef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000474:	b480      	push	{r7}
 8000476:	b087      	sub	sp, #28
 8000478:	af00      	add	r7, sp, #0
 800047a:	60f8      	str	r0, [r7, #12]
 800047c:	60b9      	str	r1, [r7, #8]
 800047e:	607a      	str	r2, [r7, #4]

  uint32_t transmitmailbox;

  // Read the Transmit Status Register

  uint32_t tsr = READ_REG(CAN1->TSR);
 8000480:	4b53      	ldr	r3, [pc, #332]	; (80005d0 <can_add_tx_message+0x15c>)
 8000482:	689b      	ldr	r3, [r3, #8]
 8000484:	617b      	str	r3, [r7, #20]

  // Check that at least one Tx mailbox is empty
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000486:	697b      	ldr	r3, [r7, #20]
 8000488:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800048c:	2b00      	cmp	r3, #0
 800048e:	d10a      	bne.n	80004a6 <can_add_tx_message+0x32>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000490:	697b      	ldr	r3, [r7, #20]
 8000492:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8000496:	2b00      	cmp	r3, #0
 8000498:	d105      	bne.n	80004a6 <can_add_tx_message+0x32>
        ((tsr & CAN_TSR_TME2) != 0U))
 800049a:	697b      	ldr	r3, [r7, #20]
 800049c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	f000 808d 	beq.w	80005c0 <can_add_tx_message+0x14c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80004a6:	697b      	ldr	r3, [r7, #20]
 80004a8:	0e1b      	lsrs	r3, r3, #24
 80004aa:	f003 0303 	and.w	r3, r3, #3
 80004ae:	613b      	str	r3, [r7, #16]

      /* Check transmitmailbox validity */
      if (transmitmailbox > 2U)
 80004b0:	693b      	ldr	r3, [r7, #16]
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	d901      	bls.n	80004ba <can_add_tx_message+0x46>
      {
        return 1; // Invalid mailbox selected
 80004b6:	2301      	movs	r3, #1
 80004b8:	e083      	b.n	80005c2 <can_add_tx_message+0x14e>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80004ba:	2201      	movs	r2, #1
 80004bc:	693b      	ldr	r3, [r7, #16]
 80004be:	409a      	lsls	r2, r3
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->ide == CAN_ID_STD)
 80004c4:	68fb      	ldr	r3, [r7, #12]
 80004c6:	689b      	ldr	r3, [r3, #8]
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d10c      	bne.n	80004e6 <can_add_tx_message+0x72>
      {
       CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->std_id << CAN_TI0R_STID_Pos) |
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	055a      	lsls	r2, r3, #21
                                                           pHeader->rtr);
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	68db      	ldr	r3, [r3, #12]
       CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->std_id << CAN_TI0R_STID_Pos) |
 80004d6:	493e      	ldr	r1, [pc, #248]	; (80005d0 <can_add_tx_message+0x15c>)
 80004d8:	431a      	orrs	r2, r3
 80004da:	693b      	ldr	r3, [r7, #16]
 80004dc:	3318      	adds	r3, #24
 80004de:	011b      	lsls	r3, r3, #4
 80004e0:	440b      	add	r3, r1
 80004e2:	601a      	str	r2, [r3, #0]
 80004e4:	e00e      	b.n	8000504 <can_add_tx_message+0x90>
      }
      else
      {
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80004e6:	68fb      	ldr	r3, [r7, #12]
 80004e8:	685b      	ldr	r3, [r3, #4]
 80004ea:	00da      	lsls	r2, r3, #3
                                                           pHeader->ide |
 80004ec:	68fb      	ldr	r3, [r7, #12]
 80004ee:	689b      	ldr	r3, [r3, #8]
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80004f0:	431a      	orrs	r2, r3
                                                           pHeader->rtr);
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	68db      	ldr	r3, [r3, #12]
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80004f6:	4936      	ldr	r1, [pc, #216]	; (80005d0 <can_add_tx_message+0x15c>)
                                                           pHeader->ide |
 80004f8:	431a      	orrs	r2, r3
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 80004fa:	693b      	ldr	r3, [r7, #16]
 80004fc:	3318      	adds	r3, #24
 80004fe:	011b      	lsls	r3, r3, #4
 8000500:	440b      	add	r3, r1
 8000502:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
     CAN1->sTxMailBox[transmitmailbox].TDTR = (pHeader->dlc);
 8000504:	4932      	ldr	r1, [pc, #200]	; (80005d0 <can_add_tx_message+0x15c>)
 8000506:	68fb      	ldr	r3, [r7, #12]
 8000508:	691a      	ldr	r2, [r3, #16]
 800050a:	693b      	ldr	r3, [r7, #16]
 800050c:	3318      	adds	r3, #24
 800050e:	011b      	lsls	r3, r3, #4
 8000510:	440b      	add	r3, r1
 8000512:	3304      	adds	r3, #4
 8000514:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->transmit_global_time == 1)
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	7d1b      	ldrb	r3, [r3, #20]
 800051a:	2b01      	cmp	r3, #1
 800051c:	d10f      	bne.n	800053e <can_add_tx_message+0xca>
      {
        SET_BIT(CAN1->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800051e:	4a2c      	ldr	r2, [pc, #176]	; (80005d0 <can_add_tx_message+0x15c>)
 8000520:	693b      	ldr	r3, [r7, #16]
 8000522:	3318      	adds	r3, #24
 8000524:	011b      	lsls	r3, r3, #4
 8000526:	4413      	add	r3, r2
 8000528:	3304      	adds	r3, #4
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	4928      	ldr	r1, [pc, #160]	; (80005d0 <can_add_tx_message+0x15c>)
 800052e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000532:	693b      	ldr	r3, [r7, #16]
 8000534:	3318      	adds	r3, #24
 8000536:	011b      	lsls	r3, r3, #4
 8000538:	440b      	add	r3, r1
 800053a:	3304      	adds	r3, #4
 800053c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDHR,
 800053e:	68bb      	ldr	r3, [r7, #8]
 8000540:	3307      	adds	r3, #7
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	061a      	lsls	r2, r3, #24
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	3306      	adds	r3, #6
 800054a:	781b      	ldrb	r3, [r3, #0]
 800054c:	041b      	lsls	r3, r3, #16
 800054e:	431a      	orrs	r2, r3
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	3305      	adds	r3, #5
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	021b      	lsls	r3, r3, #8
 8000558:	4313      	orrs	r3, r2
 800055a:	68ba      	ldr	r2, [r7, #8]
 800055c:	3204      	adds	r2, #4
 800055e:	7812      	ldrb	r2, [r2, #0]
 8000560:	491b      	ldr	r1, [pc, #108]	; (80005d0 <can_add_tx_message+0x15c>)
 8000562:	431a      	orrs	r2, r3
 8000564:	693b      	ldr	r3, [r7, #16]
 8000566:	011b      	lsls	r3, r3, #4
 8000568:	440b      	add	r3, r1
 800056a:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800056e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));

      WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDLR,
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	3303      	adds	r3, #3
 8000574:	781b      	ldrb	r3, [r3, #0]
 8000576:	061a      	lsls	r2, r3, #24
 8000578:	68bb      	ldr	r3, [r7, #8]
 800057a:	3302      	adds	r3, #2
 800057c:	781b      	ldrb	r3, [r3, #0]
 800057e:	041b      	lsls	r3, r3, #16
 8000580:	431a      	orrs	r2, r3
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	3301      	adds	r3, #1
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	4313      	orrs	r3, r2
 800058c:	68ba      	ldr	r2, [r7, #8]
 800058e:	7812      	ldrb	r2, [r2, #0]
 8000590:	490f      	ldr	r1, [pc, #60]	; (80005d0 <can_add_tx_message+0x15c>)
 8000592:	431a      	orrs	r2, r3
 8000594:	693b      	ldr	r3, [r7, #16]
 8000596:	011b      	lsls	r3, r3, #4
 8000598:	440b      	add	r3, r1
 800059a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800059e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(CAN1->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80005a0:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <can_add_tx_message+0x15c>)
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	3318      	adds	r3, #24
 80005a6:	011b      	lsls	r3, r3, #4
 80005a8:	4413      	add	r3, r2
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	4908      	ldr	r1, [pc, #32]	; (80005d0 <can_add_tx_message+0x15c>)
 80005ae:	f043 0201 	orr.w	r2, r3, #1
 80005b2:	693b      	ldr	r3, [r7, #16]
 80005b4:	3318      	adds	r3, #24
 80005b6:	011b      	lsls	r3, r3, #4
 80005b8:	440b      	add	r3, r1
 80005ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	e000      	b.n	80005c2 <can_add_tx_message+0x14e>
    }
    return 0;
 80005c0:	2300      	movs	r3, #0
}
 80005c2:	4618      	mov	r0, r3
 80005c4:	371c      	adds	r7, #28
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40006400 	.word	0x40006400

080005d4 <can_get_rx_message>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval  status
  */
uint8_t can_get_rx_message(uint32_t RxFifo, can_rx_header_typedef *pHeader, uint8_t aData[])
{
 80005d4:	b480      	push	{r7}
 80005d6:	b085      	sub	sp, #20
 80005d8:	af00      	add	r7, sp, #0
 80005da:	60f8      	str	r0, [r7, #12]
 80005dc:	60b9      	str	r1, [r7, #8]
 80005de:	607a      	str	r2, [r7, #4]

    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d107      	bne.n	80005f6 <can_get_rx_message+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((CAN1->RF0R & CAN_RF0R_FMP0) == 0U)
 80005e6:	4b6a      	ldr	r3, [pc, #424]	; (8000790 <can_get_rx_message+0x1bc>)
 80005e8:	68db      	ldr	r3, [r3, #12]
 80005ea:	f003 0303 	and.w	r3, r3, #3
 80005ee:	2b00      	cmp	r3, #0
 80005f0:	d109      	bne.n	8000606 <can_get_rx_message+0x32>
      {
        return 1;
 80005f2:	2301      	movs	r3, #1
 80005f4:	e0c5      	b.n	8000782 <can_get_rx_message+0x1ae>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((CAN1->RF1R & CAN_RF1R_FMP1) == 0U)
 80005f6:	4b66      	ldr	r3, [pc, #408]	; (8000790 <can_get_rx_message+0x1bc>)
 80005f8:	691b      	ldr	r3, [r3, #16]
 80005fa:	f003 0303 	and.w	r3, r3, #3
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <can_get_rx_message+0x32>
      {
        return 1;
 8000602:	2301      	movs	r3, #1
 8000604:	e0bd      	b.n	8000782 <can_get_rx_message+0x1ae>
    }

    // Read the header information from the FIFO mailbox
     // Extract identifier, DLC, timestamp, etc.

    pHeader->ide = CAN_RI0R_IDE & CAN1->sFIFOMailBox[RxFifo].RIR;
 8000606:	4a62      	ldr	r2, [pc, #392]	; (8000790 <can_get_rx_message+0x1bc>)
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	331b      	adds	r3, #27
 800060c:	011b      	lsls	r3, r3, #4
 800060e:	4413      	add	r3, r2
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	f003 0204 	and.w	r2, r3, #4
 8000616:	68bb      	ldr	r3, [r7, #8]
 8000618:	609a      	str	r2, [r3, #8]
    if (pHeader->ide == CAN_ID_STD)
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d10b      	bne.n	800063a <can_get_rx_message+0x66>
    {
      pHeader->std_id = (CAN_RI0R_STID & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8000622:	4a5b      	ldr	r2, [pc, #364]	; (8000790 <can_get_rx_message+0x1bc>)
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	331b      	adds	r3, #27
 8000628:	011b      	lsls	r3, r3, #4
 800062a:	4413      	add	r3, r2
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	0d5b      	lsrs	r3, r3, #21
 8000630:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8000634:	68bb      	ldr	r3, [r7, #8]
 8000636:	601a      	str	r2, [r3, #0]
 8000638:	e00a      	b.n	8000650 <can_get_rx_message+0x7c>
    }
    else
    {
      pHeader->ext_id = ((CAN_RI0R_EXID | CAN_RI0R_STID) & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800063a:	4a55      	ldr	r2, [pc, #340]	; (8000790 <can_get_rx_message+0x1bc>)
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	331b      	adds	r3, #27
 8000640:	011b      	lsls	r3, r3, #4
 8000642:	4413      	add	r3, r2
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	08db      	lsrs	r3, r3, #3
 8000648:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	605a      	str	r2, [r3, #4]
    }
    pHeader->rtr = (CAN_RI0R_RTR & CAN1->sFIFOMailBox[RxFifo].RIR);
 8000650:	4a4f      	ldr	r2, [pc, #316]	; (8000790 <can_get_rx_message+0x1bc>)
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	331b      	adds	r3, #27
 8000656:	011b      	lsls	r3, r3, #4
 8000658:	4413      	add	r3, r2
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	f003 0202 	and.w	r2, r3, #2
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	60da      	str	r2, [r3, #12]
    pHeader->dlc = (CAN_RDT0R_DLC & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000664:	4a4a      	ldr	r2, [pc, #296]	; (8000790 <can_get_rx_message+0x1bc>)
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	331b      	adds	r3, #27
 800066a:	011b      	lsls	r3, r3, #4
 800066c:	4413      	add	r3, r2
 800066e:	3304      	adds	r3, #4
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f003 020f 	and.w	r2, r3, #15
 8000676:	68bb      	ldr	r3, [r7, #8]
 8000678:	611a      	str	r2, [r3, #16]
    pHeader->filter_match_index = (CAN_RDT0R_FMI & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800067a:	4a45      	ldr	r2, [pc, #276]	; (8000790 <can_get_rx_message+0x1bc>)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	331b      	adds	r3, #27
 8000680:	011b      	lsls	r3, r3, #4
 8000682:	4413      	add	r3, r2
 8000684:	3304      	adds	r3, #4
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	0a1b      	lsrs	r3, r3, #8
 800068a:	b2da      	uxtb	r2, r3
 800068c:	68bb      	ldr	r3, [r7, #8]
 800068e:	619a      	str	r2, [r3, #24]
    pHeader->timestamp = (CAN_RDT0R_TIME & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000690:	4a3f      	ldr	r2, [pc, #252]	; (8000790 <can_get_rx_message+0x1bc>)
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	331b      	adds	r3, #27
 8000696:	011b      	lsls	r3, r3, #4
 8000698:	4413      	add	r3, r2
 800069a:	3304      	adds	r3, #4
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	0c1b      	lsrs	r3, r3, #16
 80006a0:	b29a      	uxth	r2, r3
 80006a2:	68bb      	ldr	r3, [r7, #8]
 80006a4:	615a      	str	r2, [r3, #20]

    // Extract the data from the FIFO mailbox
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80006a6:	4a3a      	ldr	r2, [pc, #232]	; (8000790 <can_get_rx_message+0x1bc>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	4413      	add	r3, r2
 80006ae:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	b2da      	uxtb	r2, r3
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80006ba:	4a35      	ldr	r2, [pc, #212]	; (8000790 <can_get_rx_message+0x1bc>)
 80006bc:	68fb      	ldr	r3, [r7, #12]
 80006be:	011b      	lsls	r3, r3, #4
 80006c0:	4413      	add	r3, r2
 80006c2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	0a1a      	lsrs	r2, r3, #8
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	3301      	adds	r3, #1
 80006ce:	b2d2      	uxtb	r2, r2
 80006d0:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80006d2:	4a2f      	ldr	r2, [pc, #188]	; (8000790 <can_get_rx_message+0x1bc>)
 80006d4:	68fb      	ldr	r3, [r7, #12]
 80006d6:	011b      	lsls	r3, r3, #4
 80006d8:	4413      	add	r3, r2
 80006da:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	0c1a      	lsrs	r2, r3, #16
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	3302      	adds	r3, #2
 80006e6:	b2d2      	uxtb	r2, r2
 80006e8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80006ea:	4a29      	ldr	r2, [pc, #164]	; (8000790 <can_get_rx_message+0x1bc>)
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	011b      	lsls	r3, r3, #4
 80006f0:	4413      	add	r3, r2
 80006f2:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	0e1a      	lsrs	r2, r3, #24
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	3303      	adds	r3, #3
 80006fe:	b2d2      	uxtb	r2, r2
 8000700:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8000702:	4a23      	ldr	r2, [pc, #140]	; (8000790 <can_get_rx_message+0x1bc>)
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	011b      	lsls	r3, r3, #4
 8000708:	4413      	add	r3, r2
 800070a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800070e:	681a      	ldr	r2, [r3, #0]
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	3304      	adds	r3, #4
 8000714:	b2d2      	uxtb	r2, r2
 8000716:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8000718:	4a1d      	ldr	r2, [pc, #116]	; (8000790 <can_get_rx_message+0x1bc>)
 800071a:	68fb      	ldr	r3, [r7, #12]
 800071c:	011b      	lsls	r3, r3, #4
 800071e:	4413      	add	r3, r2
 8000720:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	0a1a      	lsrs	r2, r3, #8
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	3305      	adds	r3, #5
 800072c:	b2d2      	uxtb	r2, r2
 800072e:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8000730:	4a17      	ldr	r2, [pc, #92]	; (8000790 <can_get_rx_message+0x1bc>)
 8000732:	68fb      	ldr	r3, [r7, #12]
 8000734:	011b      	lsls	r3, r3, #4
 8000736:	4413      	add	r3, r2
 8000738:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	0c1a      	lsrs	r2, r3, #16
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	3306      	adds	r3, #6
 8000744:	b2d2      	uxtb	r2, r2
 8000746:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <can_get_rx_message+0x1bc>)
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	011b      	lsls	r3, r3, #4
 800074e:	4413      	add	r3, r2
 8000750:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	0e1a      	lsrs	r2, r3, #24
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	3307      	adds	r3, #7
 800075c:	b2d2      	uxtb	r2, r2
 800075e:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d106      	bne.n	8000774 <can_get_rx_message+0x1a0>
    {
      /* Release RX FIFO 0 */
      SET_BIT(CAN1->RF0R, CAN_RF0R_RFOM0);
 8000766:	4b0a      	ldr	r3, [pc, #40]	; (8000790 <can_get_rx_message+0x1bc>)
 8000768:	68db      	ldr	r3, [r3, #12]
 800076a:	4a09      	ldr	r2, [pc, #36]	; (8000790 <can_get_rx_message+0x1bc>)
 800076c:	f043 0320 	orr.w	r3, r3, #32
 8000770:	60d3      	str	r3, [r2, #12]
 8000772:	e005      	b.n	8000780 <can_get_rx_message+0x1ac>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(CAN1->RF1R, CAN_RF1R_RFOM1);
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <can_get_rx_message+0x1bc>)
 8000776:	691b      	ldr	r3, [r3, #16]
 8000778:	4a05      	ldr	r2, [pc, #20]	; (8000790 <can_get_rx_message+0x1bc>)
 800077a:	f043 0320 	orr.w	r3, r3, #32
 800077e:	6113      	str	r3, [r2, #16]
    }



  return 0;// Message read successfully
 8000780:	2300      	movs	r3, #0

}
 8000782:	4618      	mov	r0, r3
 8000784:	3714      	adds	r7, #20
 8000786:	46bd      	mov	sp, r7
 8000788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078c:	4770      	bx	lr
 800078e:	bf00      	nop
 8000790:	40006400 	.word	0x40006400

08000794 <can_filter_config>:


void can_filter_config(uint16_t std_id)
{
 8000794:	b480      	push	{r7}
 8000796:	b083      	sub	sp, #12
 8000798:	af00      	add	r7, sp, #0
 800079a:	4603      	mov	r3, r0
 800079c:	80fb      	strh	r3, [r7, #6]
	/*Set filter intiailization mode*/
	CAN1->FMR |= CAN_FMR_FINIT;
 800079e:	4b2c      	ldr	r3, [pc, #176]	; (8000850 <can_filter_config+0xbc>)
 80007a0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007a4:	4a2a      	ldr	r2, [pc, #168]	; (8000850 <can_filter_config+0xbc>)
 80007a6:	f043 0301 	orr.w	r3, r3, #1
 80007aa:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Set the slave filter to start from 20*/
	CAN1->FMR &=~(CAN_FMR_CAN2SB_Msk);
 80007ae:	4b28      	ldr	r3, [pc, #160]	; (8000850 <can_filter_config+0xbc>)
 80007b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007b4:	4a26      	ldr	r2, [pc, #152]	; (8000850 <can_filter_config+0xbc>)
 80007b6:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80007ba:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1->FMR |=(20 << CAN_FMR_CAN2SB_Pos);
 80007be:	4b24      	ldr	r3, [pc, #144]	; (8000850 <can_filter_config+0xbc>)
 80007c0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007c4:	4a22      	ldr	r2, [pc, #136]	; (8000850 <can_filter_config+0xbc>)
 80007c6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80007ca:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*****Filter activation sequence****/
	/*Deactive filter 18*/
	CAN1->FA1R &=~(CAN_FA1R_FACT18);
 80007ce:	4b20      	ldr	r3, [pc, #128]	; (8000850 <can_filter_config+0xbc>)
 80007d0:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80007d4:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <can_filter_config+0xbc>)
 80007d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007da:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/*Set 32-bit scale configuration*/
	CAN1->FS1R  |= CAN_FS1R_FSC18;
 80007de:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <can_filter_config+0xbc>)
 80007e0:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 80007e4:	4a1a      	ldr	r2, [pc, #104]	; (8000850 <can_filter_config+0xbc>)
 80007e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007ea:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

	/*Configure filter mode to identifier mask mode*/
	CAN1->FM1R &=~CAN_FM1R_FBM18;
 80007ee:	4b18      	ldr	r3, [pc, #96]	; (8000850 <can_filter_config+0xbc>)
 80007f0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80007f4:	4a16      	ldr	r2, [pc, #88]	; (8000850 <can_filter_config+0xbc>)
 80007f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007fa:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	/*Set identifier*/
	CAN1->sFilterRegister[18].FR1 = (std_id << 21);
 80007fe:	88fb      	ldrh	r3, [r7, #6]
 8000800:	055a      	lsls	r2, r3, #21
 8000802:	4b13      	ldr	r3, [pc, #76]	; (8000850 <can_filter_config+0xbc>)
 8000804:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

	/*Set identifier mask*/
	CAN1->sFilterRegister[18].FR2 = (std_id << 21);
 8000808:	88fb      	ldrh	r3, [r7, #6]
 800080a:	055a      	lsls	r2, r3, #21
 800080c:	4b10      	ldr	r3, [pc, #64]	; (8000850 <can_filter_config+0xbc>)
 800080e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

	/*Assign filter 18 to FIFO0*/
	CAN1->FFA1R &=~(CAN_FFA1R_FFA18);
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <can_filter_config+0xbc>)
 8000814:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8000818:	4a0d      	ldr	r2, [pc, #52]	; (8000850 <can_filter_config+0xbc>)
 800081a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800081e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	/*Activate filter 18*/
	CAN1->FA1R |= (CAN_FA1R_FACT18);
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <can_filter_config+0xbc>)
 8000824:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000828:	4a09      	ldr	r2, [pc, #36]	; (8000850 <can_filter_config+0xbc>)
 800082a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800082e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/*Clear filter intialization mode*/
	CAN1->FMR &= ~CAN_FMR_FINIT;
 8000832:	4b07      	ldr	r3, [pc, #28]	; (8000850 <can_filter_config+0xbc>)
 8000834:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000838:	4a05      	ldr	r2, [pc, #20]	; (8000850 <can_filter_config+0xbc>)
 800083a:	f023 0301 	bic.w	r3, r3, #1
 800083e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 8000842:	bf00      	nop
 8000844:	370c      	adds	r7, #12
 8000846:	46bd      	mov	sp, r7
 8000848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084c:	4770      	bx	lr
 800084e:	bf00      	nop
 8000850:	40006400 	.word	0x40006400

08000854 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 8000858:	4b12      	ldr	r3, [pc, #72]	; (80008a4 <fpu_enable+0x50>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a11      	ldr	r2, [pc, #68]	; (80008a4 <fpu_enable+0x50>)
 8000860:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 8000868:	4b0e      	ldr	r3, [pc, #56]	; (80008a4 <fpu_enable+0x50>)
 800086a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800086e:	4a0d      	ldr	r2, [pc, #52]	; (80008a4 <fpu_enable+0x50>)
 8000870:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000874:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 8000878:	4b0a      	ldr	r3, [pc, #40]	; (80008a4 <fpu_enable+0x50>)
 800087a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800087e:	4a09      	ldr	r2, [pc, #36]	; (80008a4 <fpu_enable+0x50>)
 8000880:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000884:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 8000888:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <fpu_enable+0x50>)
 800088a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800088e:	4a05      	ldr	r2, [pc, #20]	; (80008a4 <fpu_enable+0x50>)
 8000890:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000894:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	e000ed00 	.word	0xe000ed00

080008a8 <CAN1_RX0_IRQHandler>:

uint8_t count = 0;
uint8_t message_buff[20];

void CAN1_RX0_IRQHandler(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	af00      	add	r7, sp, #0
	if((CAN1->RF0R & CAN_RF0R_FMP0) != 0U)
 80008ac:	4b0e      	ldr	r3, [pc, #56]	; (80008e8 <CAN1_RX0_IRQHandler+0x40>)
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	f003 0303 	and.w	r3, r3, #3
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d015      	beq.n	80008e4 <CAN1_RX0_IRQHandler+0x3c>
	{
		can_get_rx_message(CAN_RX_FIFO0, &rx_header, rx_data);
 80008b8:	4a0c      	ldr	r2, [pc, #48]	; (80008ec <CAN1_RX0_IRQHandler+0x44>)
 80008ba:	490d      	ldr	r1, [pc, #52]	; (80008f0 <CAN1_RX0_IRQHandler+0x48>)
 80008bc:	2000      	movs	r0, #0
 80008be:	f7ff fe89 	bl	80005d4 <can_get_rx_message>

		sprintf((char *)message_buff, "New Data : %s",rx_data);
 80008c2:	4a0a      	ldr	r2, [pc, #40]	; (80008ec <CAN1_RX0_IRQHandler+0x44>)
 80008c4:	490b      	ldr	r1, [pc, #44]	; (80008f4 <CAN1_RX0_IRQHandler+0x4c>)
 80008c6:	480c      	ldr	r0, [pc, #48]	; (80008f8 <CAN1_RX0_IRQHandler+0x50>)
 80008c8:	f000 fa7c 	bl	8000dc4 <siprintf>
		printf("%s\n\r",message_buff);
 80008cc:	490a      	ldr	r1, [pc, #40]	; (80008f8 <CAN1_RX0_IRQHandler+0x50>)
 80008ce:	480b      	ldr	r0, [pc, #44]	; (80008fc <CAN1_RX0_IRQHandler+0x54>)
 80008d0:	f000 fa60 	bl	8000d94 <iprintf>
		led_toggle();
 80008d4:	f7ff fd0a 	bl	80002ec <led_toggle>
		count++;
 80008d8:	4b09      	ldr	r3, [pc, #36]	; (8000900 <CAN1_RX0_IRQHandler+0x58>)
 80008da:	781b      	ldrb	r3, [r3, #0]
 80008dc:	3301      	adds	r3, #1
 80008de:	b2da      	uxtb	r2, r3
 80008e0:	4b07      	ldr	r3, [pc, #28]	; (8000900 <CAN1_RX0_IRQHandler+0x58>)
 80008e2:	701a      	strb	r2, [r3, #0]
	}
}
 80008e4:	bf00      	nop
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	40006400 	.word	0x40006400
 80008ec:	20000080 	.word	0x20000080
 80008f0:	20000094 	.word	0x20000094
 80008f4:	08002080 	.word	0x08002080
 80008f8:	200000cc 	.word	0x200000cc
 80008fc:	08002090 	.word	0x08002090
 8000900:	200000c8 	.word	0x200000c8

08000904 <main>:
int main()
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b084      	sub	sp, #16
 8000908:	af00      	add	r7, sp, #0
	fpu_enable();
 800090a:	f7ff ffa3 	bl	8000854 <fpu_enable>
	timebase_init();
 800090e:	f000 f925 	bl	8000b5c <timebase_init>
	debug_uart_init();
 8000912:	f000 f959 	bl	8000bc8 <debug_uart_init>
	led_init();
 8000916:	f7ff fccb 	bl	80002b0 <led_init>
	can_gpio_init();
 800091a:	f7ff fd15 	bl	8000348 <can_gpio_init>
	can_params_init(CAN_MODE_NORMAL);
 800091e:	2001      	movs	r0, #1
 8000920:	f7ff fd48 	bl	80003b4 <can_params_init>
	can_filter_config(RX_DATA_STD_ID);
 8000924:	f44f 7011 	mov.w	r0, #580	; 0x244
 8000928:	f7ff ff34 	bl	8000794 <can_filter_config>
	can_start();
 800092c:	f7ff fd86 	bl	800043c <can_start>


   printf("Receiver ready....\n\r");
 8000930:	4813      	ldr	r0, [pc, #76]	; (8000980 <main+0x7c>)
 8000932:	f000 fa2f 	bl	8000d94 <iprintf>


	while(1)
	{

		tx_header.dlc = 10;
 8000936:	4b13      	ldr	r3, [pc, #76]	; (8000984 <main+0x80>)
 8000938:	220a      	movs	r2, #10
 800093a:	611a      	str	r2, [r3, #16]
		tx_header.ext_id = 0;
 800093c:	4b11      	ldr	r3, [pc, #68]	; (8000984 <main+0x80>)
 800093e:	2200      	movs	r2, #0
 8000940:	605a      	str	r2, [r3, #4]
		tx_header.ide = CAN_ID_STD;
 8000942:	4b10      	ldr	r3, [pc, #64]	; (8000984 <main+0x80>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
		tx_header.rtr =  0;
 8000948:	4b0e      	ldr	r3, [pc, #56]	; (8000984 <main+0x80>)
 800094a:	2200      	movs	r2, #0
 800094c:	60da      	str	r2, [r3, #12]
		tx_header.std_id =  0x544;
 800094e:	4b0d      	ldr	r3, [pc, #52]	; (8000984 <main+0x80>)
 8000950:	f240 5244 	movw	r2, #1348	; 0x544
 8000954:	601a      	str	r2, [r3, #0]
		tx_header.transmit_global_time = 0;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <main+0x80>)
 8000958:	2200      	movs	r2, #0
 800095a:	751a      	strb	r2, [r3, #20]

		uint8_t tx_msg_pack[10] = "NODE2:Hi";
 800095c:	4a0a      	ldr	r2, [pc, #40]	; (8000988 <main+0x84>)
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	ca07      	ldmia	r2, {r0, r1, r2}
 8000962:	c303      	stmia	r3!, {r0, r1}
 8000964:	701a      	strb	r2, [r3, #0]
 8000966:	2300      	movs	r3, #0
 8000968:	737b      	strb	r3, [r7, #13]

		can_add_tx_message(&tx_header, &tx_msg_pack[0],tx_mailbox);
 800096a:	1d3b      	adds	r3, r7, #4
 800096c:	4a07      	ldr	r2, [pc, #28]	; (800098c <main+0x88>)
 800096e:	4619      	mov	r1, r3
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <main+0x80>)
 8000972:	f7ff fd7f 	bl	8000474 <can_add_tx_message>

		delay(1);
 8000976:	2001      	movs	r0, #1
 8000978:	f000 f8ae 	bl	8000ad8 <delay>
	{
 800097c:	e7db      	b.n	8000936 <main+0x32>
 800097e:	bf00      	nop
 8000980:	08002098 	.word	0x08002098
 8000984:	200000b0 	.word	0x200000b0
 8000988:	080020b0 	.word	0x080020b0
 800098c:	20000088 	.word	0x20000088

08000990 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b086      	sub	sp, #24
 8000994:	af00      	add	r7, sp, #0
 8000996:	60f8      	str	r0, [r7, #12]
 8000998:	60b9      	str	r1, [r7, #8]
 800099a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800099c:	2300      	movs	r3, #0
 800099e:	617b      	str	r3, [r7, #20]
 80009a0:	e00a      	b.n	80009b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009a2:	f3af 8000 	nop.w
 80009a6:	4601      	mov	r1, r0
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	60ba      	str	r2, [r7, #8]
 80009ae:	b2ca      	uxtb	r2, r1
 80009b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009b2:	697b      	ldr	r3, [r7, #20]
 80009b4:	3301      	adds	r3, #1
 80009b6:	617b      	str	r3, [r7, #20]
 80009b8:	697a      	ldr	r2, [r7, #20]
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	429a      	cmp	r2, r3
 80009be:	dbf0      	blt.n	80009a2 <_read+0x12>
  }

  return len;
 80009c0:	687b      	ldr	r3, [r7, #4]
}
 80009c2:	4618      	mov	r0, r3
 80009c4:	3718      	adds	r7, #24
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}

080009ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80009ca:	b580      	push	{r7, lr}
 80009cc:	b086      	sub	sp, #24
 80009ce:	af00      	add	r7, sp, #0
 80009d0:	60f8      	str	r0, [r7, #12]
 80009d2:	60b9      	str	r1, [r7, #8]
 80009d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009d6:	2300      	movs	r3, #0
 80009d8:	617b      	str	r3, [r7, #20]
 80009da:	e009      	b.n	80009f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80009dc:	68bb      	ldr	r3, [r7, #8]
 80009de:	1c5a      	adds	r2, r3, #1
 80009e0:	60ba      	str	r2, [r7, #8]
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	4618      	mov	r0, r3
 80009e6:	f000 f8e3 	bl	8000bb0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009ea:	697b      	ldr	r3, [r7, #20]
 80009ec:	3301      	adds	r3, #1
 80009ee:	617b      	str	r3, [r7, #20]
 80009f0:	697a      	ldr	r2, [r7, #20]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	429a      	cmp	r2, r3
 80009f6:	dbf1      	blt.n	80009dc <_write+0x12>
  }
  return len;
 80009f8:	687b      	ldr	r3, [r7, #4]
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3718      	adds	r7, #24
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}

08000a02 <_close>:

int _close(int file)
{
 8000a02:	b480      	push	{r7}
 8000a04:	b083      	sub	sp, #12
 8000a06:	af00      	add	r7, sp, #0
 8000a08:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a0e:	4618      	mov	r0, r3
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr

08000a1a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a1a:	b480      	push	{r7}
 8000a1c:	b083      	sub	sp, #12
 8000a1e:	af00      	add	r7, sp, #0
 8000a20:	6078      	str	r0, [r7, #4]
 8000a22:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000a2a:	605a      	str	r2, [r3, #4]
  return 0;
 8000a2c:	2300      	movs	r3, #0
}
 8000a2e:	4618      	mov	r0, r3
 8000a30:	370c      	adds	r7, #12
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr

08000a3a <_isatty>:

int _isatty(int file)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	b083      	sub	sp, #12
 8000a3e:	af00      	add	r7, sp, #0
 8000a40:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	370c      	adds	r7, #12
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4e:	4770      	bx	lr

08000a50 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	60f8      	str	r0, [r7, #12]
 8000a58:	60b9      	str	r1, [r7, #8]
 8000a5a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3714      	adds	r7, #20
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
	...

08000a6c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000a74:	4a14      	ldr	r2, [pc, #80]	; (8000ac8 <_sbrk+0x5c>)
 8000a76:	4b15      	ldr	r3, [pc, #84]	; (8000acc <_sbrk+0x60>)
 8000a78:	1ad3      	subs	r3, r2, r3
 8000a7a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000a7c:	697b      	ldr	r3, [r7, #20]
 8000a7e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a80:	4b13      	ldr	r3, [pc, #76]	; (8000ad0 <_sbrk+0x64>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d102      	bne.n	8000a8e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a88:	4b11      	ldr	r3, [pc, #68]	; (8000ad0 <_sbrk+0x64>)
 8000a8a:	4a12      	ldr	r2, [pc, #72]	; (8000ad4 <_sbrk+0x68>)
 8000a8c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a8e:	4b10      	ldr	r3, [pc, #64]	; (8000ad0 <_sbrk+0x64>)
 8000a90:	681a      	ldr	r2, [r3, #0]
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	693a      	ldr	r2, [r7, #16]
 8000a98:	429a      	cmp	r2, r3
 8000a9a:	d207      	bcs.n	8000aac <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a9c:	f000 f948 	bl	8000d30 <__errno>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8000aaa:	e009      	b.n	8000ac0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000aac:	4b08      	ldr	r3, [pc, #32]	; (8000ad0 <_sbrk+0x64>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ab2:	4b07      	ldr	r3, [pc, #28]	; (8000ad0 <_sbrk+0x64>)
 8000ab4:	681a      	ldr	r2, [r3, #0]
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	4413      	add	r3, r2
 8000aba:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <_sbrk+0x64>)
 8000abc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000abe:	68fb      	ldr	r3, [r7, #12]
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	3718      	adds	r7, #24
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	bd80      	pop	{r7, pc}
 8000ac8:	20020000 	.word	0x20020000
 8000acc:	00000400 	.word	0x00000400
 8000ad0:	200000e0 	.word	0x200000e0
 8000ad4:	20000100 	.word	0x20000100

08000ad8 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8000ae0:	f000 f818 	bl	8000b14 <get_tick>
 8000ae4:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000aea:	68fb      	ldr	r3, [r7, #12]
 8000aec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af0:	d002      	beq.n	8000af8 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000af2:	68fb      	ldr	r3, [r7, #12]
 8000af4:	3301      	adds	r3, #1
 8000af6:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000af8:	bf00      	nop
 8000afa:	f000 f80b 	bl	8000b14 <get_tick>
 8000afe:	4602      	mov	r2, r0
 8000b00:	68bb      	ldr	r3, [r7, #8]
 8000b02:	1ad3      	subs	r3, r2, r3
 8000b04:	68fa      	ldr	r2, [r7, #12]
 8000b06:	429a      	cmp	r2, r3
 8000b08:	d8f7      	bhi.n	8000afa <delay+0x22>

}
 8000b0a:	bf00      	nop
 8000b0c:	bf00      	nop
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <get_tick>:

uint32_t get_tick(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b18:	b672      	cpsid	i
}
 8000b1a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <get_tick+0x24>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	4a06      	ldr	r2, [pc, #24]	; (8000b3c <get_tick+0x28>)
 8000b22:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b24:	b662      	cpsie	i
}
 8000b26:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000b28:	4b04      	ldr	r3, [pc, #16]	; (8000b3c <get_tick+0x28>)
 8000b2a:	681b      	ldr	r3, [r3, #0]

}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr
 8000b36:	bf00      	nop
 8000b38:	200000e4 	.word	0x200000e4
 8000b3c:	200000e8 	.word	0x200000e8

08000b40 <tick_increment>:
static void tick_increment(void)
{
 8000b40:	b480      	push	{r7}
 8000b42:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000b44:	4b04      	ldr	r3, [pc, #16]	; (8000b58 <tick_increment+0x18>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	3301      	adds	r3, #1
 8000b4a:	4a03      	ldr	r2, [pc, #12]	; (8000b58 <tick_increment+0x18>)
 8000b4c:	6013      	str	r3, [r2, #0]
}
 8000b4e:	bf00      	nop
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr
 8000b58:	200000e4 	.word	0x200000e4

08000b5c <timebase_init>:
void timebase_init(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000b60:	b672      	cpsid	i
}
 8000b62:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 8000b64:	4b0d      	ldr	r3, [pc, #52]	; (8000b9c <timebase_init+0x40>)
 8000b66:	4a0e      	ldr	r2, [pc, #56]	; (8000ba0 <timebase_init+0x44>)
 8000b68:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <timebase_init+0x40>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8000b70:	4b0a      	ldr	r3, [pc, #40]	; (8000b9c <timebase_init+0x40>)
 8000b72:	2204      	movs	r2, #4
 8000b74:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000b76:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <timebase_init+0x40>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	4a08      	ldr	r2, [pc, #32]	; (8000b9c <timebase_init+0x40>)
 8000b7c:	f043 0302 	orr.w	r3, r3, #2
 8000b80:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <timebase_init+0x40>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <timebase_init+0x40>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b8e:	b662      	cpsie	i
}
 8000b90:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000b92:	bf00      	nop
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000e010 	.word	0xe000e010
 8000ba0:	00f423ff 	.word	0x00f423ff

08000ba4 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
	tick_increment();
 8000ba8:	f7ff ffca 	bl	8000b40 <tick_increment>
}
 8000bac:	bf00      	nop
 8000bae:	bd80      	pop	{r7, pc}

08000bb0 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
 8000bb6:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000bb8:	6878      	ldr	r0, [r7, #4]
 8000bba:	f000 f84f 	bl	8000c5c <uart_write>
	return ch;
 8000bbe:	687b      	ldr	r3, [r7, #4]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3708      	adds	r7, #8
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <debug_uart_init>:

void debug_uart_init(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000bcc:	4b1f      	ldr	r3, [pc, #124]	; (8000c4c <debug_uart_init+0x84>)
 8000bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd0:	4a1e      	ldr	r2, [pc, #120]	; (8000c4c <debug_uart_init+0x84>)
 8000bd2:	f043 0301 	orr.w	r3, r3, #1
 8000bd6:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000bd8:	4b1d      	ldr	r3, [pc, #116]	; (8000c50 <debug_uart_init+0x88>)
 8000bda:	681b      	ldr	r3, [r3, #0]
 8000bdc:	4a1c      	ldr	r2, [pc, #112]	; (8000c50 <debug_uart_init+0x88>)
 8000bde:	f023 0310 	bic.w	r3, r3, #16
 8000be2:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000be4:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <debug_uart_init+0x88>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <debug_uart_init+0x88>)
 8000bea:	f043 0320 	orr.w	r3, r3, #32
 8000bee:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000bf0:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <debug_uart_init+0x88>)
 8000bf2:	6a1b      	ldr	r3, [r3, #32]
 8000bf4:	4a16      	ldr	r2, [pc, #88]	; (8000c50 <debug_uart_init+0x88>)
 8000bf6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000bfa:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000bfc:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <debug_uart_init+0x88>)
 8000bfe:	6a1b      	ldr	r3, [r3, #32]
 8000c00:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <debug_uart_init+0x88>)
 8000c02:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c06:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000c08:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <debug_uart_init+0x88>)
 8000c0a:	6a1b      	ldr	r3, [r3, #32]
 8000c0c:	4a10      	ldr	r2, [pc, #64]	; (8000c50 <debug_uart_init+0x88>)
 8000c0e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c12:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <debug_uart_init+0x88>)
 8000c16:	6a1b      	ldr	r3, [r3, #32]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <debug_uart_init+0x88>)
 8000c1a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000c1e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000c20:	4b0a      	ldr	r3, [pc, #40]	; (8000c4c <debug_uart_init+0x84>)
 8000c22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c24:	4a09      	ldr	r2, [pc, #36]	; (8000c4c <debug_uart_init+0x84>)
 8000c26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c2a:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000c2c:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000c30:	4808      	ldr	r0, [pc, #32]	; (8000c54 <debug_uart_init+0x8c>)
 8000c32:	f000 f83f 	bl	8000cb4 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8000c36:	4b08      	ldr	r3, [pc, #32]	; (8000c58 <debug_uart_init+0x90>)
 8000c38:	2208      	movs	r2, #8
 8000c3a:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000c3c:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <debug_uart_init+0x90>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	4a05      	ldr	r2, [pc, #20]	; (8000c58 <debug_uart_init+0x90>)
 8000c42:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000c46:	60d3      	str	r3, [r2, #12]
}
 8000c48:	bf00      	nop
 8000c4a:	bd80      	pop	{r7, pc}
 8000c4c:	40023800 	.word	0x40023800
 8000c50:	40020000 	.word	0x40020000
 8000c54:	00f42400 	.word	0x00f42400
 8000c58:	40004400 	.word	0x40004400

08000c5c <uart_write>:



static void uart_write(int ch)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000c64:	bf00      	nop
 8000c66:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <uart_write+0x2c>)
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d0f9      	beq.n	8000c66 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4a04      	ldr	r2, [pc, #16]	; (8000c88 <uart_write+0x2c>)
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	6053      	str	r3, [r2, #4]
}
 8000c7a:	bf00      	nop
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	40004400 	.word	0x40004400

08000c8c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000c96:	683b      	ldr	r3, [r7, #0]
 8000c98:	085a      	lsrs	r2, r3, #1
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	441a      	add	r2, r3
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca4:	b29b      	uxth	r3, r3
}
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	370c      	adds	r7, #12
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
	...

08000cb4 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
 8000cbc:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000cbe:	6839      	ldr	r1, [r7, #0]
 8000cc0:	6878      	ldr	r0, [r7, #4]
 8000cc2:	f7ff ffe3 	bl	8000c8c <compute_uart_bd>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	461a      	mov	r2, r3
 8000cca:	4b03      	ldr	r3, [pc, #12]	; (8000cd8 <uart_set_baudrate+0x24>)
 8000ccc:	609a      	str	r2, [r3, #8]
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40004400 	.word	0x40004400

08000cdc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000cdc:	480d      	ldr	r0, [pc, #52]	; (8000d14 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000cde:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000ce0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ce4:	480c      	ldr	r0, [pc, #48]	; (8000d18 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ce6:	490d      	ldr	r1, [pc, #52]	; (8000d1c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ce8:	4a0d      	ldr	r2, [pc, #52]	; (8000d20 <LoopForever+0xe>)
  movs r3, #0
 8000cea:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cec:	e002      	b.n	8000cf4 <LoopCopyDataInit>

08000cee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cf0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cf2:	3304      	adds	r3, #4

08000cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf8:	d3f9      	bcc.n	8000cee <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cfa:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cfc:	4c0a      	ldr	r4, [pc, #40]	; (8000d28 <LoopForever+0x16>)
  movs r3, #0
 8000cfe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d00:	e001      	b.n	8000d06 <LoopFillZerobss>

08000d02 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d02:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d04:	3204      	adds	r2, #4

08000d06 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d06:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d08:	d3fb      	bcc.n	8000d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000d0a:	f000 f817 	bl	8000d3c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d0e:	f7ff fdf9 	bl	8000904 <main>

08000d12 <LoopForever>:

LoopForever:
  b LoopForever
 8000d12:	e7fe      	b.n	8000d12 <LoopForever>
  ldr   r0, =_estack
 8000d14:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000d20:	0800215c 	.word	0x0800215c
  ldr r2, =_sbss
 8000d24:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000d28:	200000fc 	.word	0x200000fc

08000d2c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>
	...

08000d30 <__errno>:
 8000d30:	4b01      	ldr	r3, [pc, #4]	; (8000d38 <__errno+0x8>)
 8000d32:	6818      	ldr	r0, [r3, #0]
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop
 8000d38:	20000000 	.word	0x20000000

08000d3c <__libc_init_array>:
 8000d3c:	b570      	push	{r4, r5, r6, lr}
 8000d3e:	4d0d      	ldr	r5, [pc, #52]	; (8000d74 <__libc_init_array+0x38>)
 8000d40:	4c0d      	ldr	r4, [pc, #52]	; (8000d78 <__libc_init_array+0x3c>)
 8000d42:	1b64      	subs	r4, r4, r5
 8000d44:	10a4      	asrs	r4, r4, #2
 8000d46:	2600      	movs	r6, #0
 8000d48:	42a6      	cmp	r6, r4
 8000d4a:	d109      	bne.n	8000d60 <__libc_init_array+0x24>
 8000d4c:	4d0b      	ldr	r5, [pc, #44]	; (8000d7c <__libc_init_array+0x40>)
 8000d4e:	4c0c      	ldr	r4, [pc, #48]	; (8000d80 <__libc_init_array+0x44>)
 8000d50:	f001 f98a 	bl	8002068 <_init>
 8000d54:	1b64      	subs	r4, r4, r5
 8000d56:	10a4      	asrs	r4, r4, #2
 8000d58:	2600      	movs	r6, #0
 8000d5a:	42a6      	cmp	r6, r4
 8000d5c:	d105      	bne.n	8000d6a <__libc_init_array+0x2e>
 8000d5e:	bd70      	pop	{r4, r5, r6, pc}
 8000d60:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d64:	4798      	blx	r3
 8000d66:	3601      	adds	r6, #1
 8000d68:	e7ee      	b.n	8000d48 <__libc_init_array+0xc>
 8000d6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000d6e:	4798      	blx	r3
 8000d70:	3601      	adds	r6, #1
 8000d72:	e7f2      	b.n	8000d5a <__libc_init_array+0x1e>
 8000d74:	08002154 	.word	0x08002154
 8000d78:	08002154 	.word	0x08002154
 8000d7c:	08002154 	.word	0x08002154
 8000d80:	08002158 	.word	0x08002158

08000d84 <memset>:
 8000d84:	4402      	add	r2, r0
 8000d86:	4603      	mov	r3, r0
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d100      	bne.n	8000d8e <memset+0xa>
 8000d8c:	4770      	bx	lr
 8000d8e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d92:	e7f9      	b.n	8000d88 <memset+0x4>

08000d94 <iprintf>:
 8000d94:	b40f      	push	{r0, r1, r2, r3}
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <iprintf+0x2c>)
 8000d98:	b513      	push	{r0, r1, r4, lr}
 8000d9a:	681c      	ldr	r4, [r3, #0]
 8000d9c:	b124      	cbz	r4, 8000da8 <iprintf+0x14>
 8000d9e:	69a3      	ldr	r3, [r4, #24]
 8000da0:	b913      	cbnz	r3, 8000da8 <iprintf+0x14>
 8000da2:	4620      	mov	r0, r4
 8000da4:	f000 f886 	bl	8000eb4 <__sinit>
 8000da8:	ab05      	add	r3, sp, #20
 8000daa:	9a04      	ldr	r2, [sp, #16]
 8000dac:	68a1      	ldr	r1, [r4, #8]
 8000dae:	9301      	str	r3, [sp, #4]
 8000db0:	4620      	mov	r0, r4
 8000db2:	f000 fb39 	bl	8001428 <_vfiprintf_r>
 8000db6:	b002      	add	sp, #8
 8000db8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000dbc:	b004      	add	sp, #16
 8000dbe:	4770      	bx	lr
 8000dc0:	20000000 	.word	0x20000000

08000dc4 <siprintf>:
 8000dc4:	b40e      	push	{r1, r2, r3}
 8000dc6:	b500      	push	{lr}
 8000dc8:	b09c      	sub	sp, #112	; 0x70
 8000dca:	ab1d      	add	r3, sp, #116	; 0x74
 8000dcc:	9002      	str	r0, [sp, #8]
 8000dce:	9006      	str	r0, [sp, #24]
 8000dd0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000dd4:	4809      	ldr	r0, [pc, #36]	; (8000dfc <siprintf+0x38>)
 8000dd6:	9107      	str	r1, [sp, #28]
 8000dd8:	9104      	str	r1, [sp, #16]
 8000dda:	4909      	ldr	r1, [pc, #36]	; (8000e00 <siprintf+0x3c>)
 8000ddc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000de0:	9105      	str	r1, [sp, #20]
 8000de2:	6800      	ldr	r0, [r0, #0]
 8000de4:	9301      	str	r3, [sp, #4]
 8000de6:	a902      	add	r1, sp, #8
 8000de8:	f000 f9f4 	bl	80011d4 <_svfiprintf_r>
 8000dec:	9b02      	ldr	r3, [sp, #8]
 8000dee:	2200      	movs	r2, #0
 8000df0:	701a      	strb	r2, [r3, #0]
 8000df2:	b01c      	add	sp, #112	; 0x70
 8000df4:	f85d eb04 	ldr.w	lr, [sp], #4
 8000df8:	b003      	add	sp, #12
 8000dfa:	4770      	bx	lr
 8000dfc:	20000000 	.word	0x20000000
 8000e00:	ffff0208 	.word	0xffff0208

08000e04 <std>:
 8000e04:	2300      	movs	r3, #0
 8000e06:	b510      	push	{r4, lr}
 8000e08:	4604      	mov	r4, r0
 8000e0a:	e9c0 3300 	strd	r3, r3, [r0]
 8000e0e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000e12:	6083      	str	r3, [r0, #8]
 8000e14:	8181      	strh	r1, [r0, #12]
 8000e16:	6643      	str	r3, [r0, #100]	; 0x64
 8000e18:	81c2      	strh	r2, [r0, #14]
 8000e1a:	6183      	str	r3, [r0, #24]
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	2208      	movs	r2, #8
 8000e20:	305c      	adds	r0, #92	; 0x5c
 8000e22:	f7ff ffaf 	bl	8000d84 <memset>
 8000e26:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <std+0x38>)
 8000e28:	6263      	str	r3, [r4, #36]	; 0x24
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <std+0x3c>)
 8000e2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <std+0x40>)
 8000e30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000e32:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <std+0x44>)
 8000e34:	6224      	str	r4, [r4, #32]
 8000e36:	6323      	str	r3, [r4, #48]	; 0x30
 8000e38:	bd10      	pop	{r4, pc}
 8000e3a:	bf00      	nop
 8000e3c:	080019d1 	.word	0x080019d1
 8000e40:	080019f3 	.word	0x080019f3
 8000e44:	08001a2b 	.word	0x08001a2b
 8000e48:	08001a4f 	.word	0x08001a4f

08000e4c <_cleanup_r>:
 8000e4c:	4901      	ldr	r1, [pc, #4]	; (8000e54 <_cleanup_r+0x8>)
 8000e4e:	f000 b8af 	b.w	8000fb0 <_fwalk_reent>
 8000e52:	bf00      	nop
 8000e54:	08001d29 	.word	0x08001d29

08000e58 <__sfmoreglue>:
 8000e58:	b570      	push	{r4, r5, r6, lr}
 8000e5a:	2268      	movs	r2, #104	; 0x68
 8000e5c:	1e4d      	subs	r5, r1, #1
 8000e5e:	4355      	muls	r5, r2
 8000e60:	460e      	mov	r6, r1
 8000e62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000e66:	f000 f8e5 	bl	8001034 <_malloc_r>
 8000e6a:	4604      	mov	r4, r0
 8000e6c:	b140      	cbz	r0, 8000e80 <__sfmoreglue+0x28>
 8000e6e:	2100      	movs	r1, #0
 8000e70:	e9c0 1600 	strd	r1, r6, [r0]
 8000e74:	300c      	adds	r0, #12
 8000e76:	60a0      	str	r0, [r4, #8]
 8000e78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000e7c:	f7ff ff82 	bl	8000d84 <memset>
 8000e80:	4620      	mov	r0, r4
 8000e82:	bd70      	pop	{r4, r5, r6, pc}

08000e84 <__sfp_lock_acquire>:
 8000e84:	4801      	ldr	r0, [pc, #4]	; (8000e8c <__sfp_lock_acquire+0x8>)
 8000e86:	f000 b8b3 	b.w	8000ff0 <__retarget_lock_acquire_recursive>
 8000e8a:	bf00      	nop
 8000e8c:	200000ed 	.word	0x200000ed

08000e90 <__sfp_lock_release>:
 8000e90:	4801      	ldr	r0, [pc, #4]	; (8000e98 <__sfp_lock_release+0x8>)
 8000e92:	f000 b8ae 	b.w	8000ff2 <__retarget_lock_release_recursive>
 8000e96:	bf00      	nop
 8000e98:	200000ed 	.word	0x200000ed

08000e9c <__sinit_lock_acquire>:
 8000e9c:	4801      	ldr	r0, [pc, #4]	; (8000ea4 <__sinit_lock_acquire+0x8>)
 8000e9e:	f000 b8a7 	b.w	8000ff0 <__retarget_lock_acquire_recursive>
 8000ea2:	bf00      	nop
 8000ea4:	200000ee 	.word	0x200000ee

08000ea8 <__sinit_lock_release>:
 8000ea8:	4801      	ldr	r0, [pc, #4]	; (8000eb0 <__sinit_lock_release+0x8>)
 8000eaa:	f000 b8a2 	b.w	8000ff2 <__retarget_lock_release_recursive>
 8000eae:	bf00      	nop
 8000eb0:	200000ee 	.word	0x200000ee

08000eb4 <__sinit>:
 8000eb4:	b510      	push	{r4, lr}
 8000eb6:	4604      	mov	r4, r0
 8000eb8:	f7ff fff0 	bl	8000e9c <__sinit_lock_acquire>
 8000ebc:	69a3      	ldr	r3, [r4, #24]
 8000ebe:	b11b      	cbz	r3, 8000ec8 <__sinit+0x14>
 8000ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000ec4:	f7ff bff0 	b.w	8000ea8 <__sinit_lock_release>
 8000ec8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000ecc:	6523      	str	r3, [r4, #80]	; 0x50
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <__sinit+0x68>)
 8000ed0:	4a13      	ldr	r2, [pc, #76]	; (8000f20 <__sinit+0x6c>)
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	62a2      	str	r2, [r4, #40]	; 0x28
 8000ed6:	42a3      	cmp	r3, r4
 8000ed8:	bf04      	itt	eq
 8000eda:	2301      	moveq	r3, #1
 8000edc:	61a3      	streq	r3, [r4, #24]
 8000ede:	4620      	mov	r0, r4
 8000ee0:	f000 f820 	bl	8000f24 <__sfp>
 8000ee4:	6060      	str	r0, [r4, #4]
 8000ee6:	4620      	mov	r0, r4
 8000ee8:	f000 f81c 	bl	8000f24 <__sfp>
 8000eec:	60a0      	str	r0, [r4, #8]
 8000eee:	4620      	mov	r0, r4
 8000ef0:	f000 f818 	bl	8000f24 <__sfp>
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60e0      	str	r0, [r4, #12]
 8000ef8:	2104      	movs	r1, #4
 8000efa:	6860      	ldr	r0, [r4, #4]
 8000efc:	f7ff ff82 	bl	8000e04 <std>
 8000f00:	68a0      	ldr	r0, [r4, #8]
 8000f02:	2201      	movs	r2, #1
 8000f04:	2109      	movs	r1, #9
 8000f06:	f7ff ff7d 	bl	8000e04 <std>
 8000f0a:	68e0      	ldr	r0, [r4, #12]
 8000f0c:	2202      	movs	r2, #2
 8000f0e:	2112      	movs	r1, #18
 8000f10:	f7ff ff78 	bl	8000e04 <std>
 8000f14:	2301      	movs	r3, #1
 8000f16:	61a3      	str	r3, [r4, #24]
 8000f18:	e7d2      	b.n	8000ec0 <__sinit+0xc>
 8000f1a:	bf00      	nop
 8000f1c:	080020bc 	.word	0x080020bc
 8000f20:	08000e4d 	.word	0x08000e4d

08000f24 <__sfp>:
 8000f24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000f26:	4607      	mov	r7, r0
 8000f28:	f7ff ffac 	bl	8000e84 <__sfp_lock_acquire>
 8000f2c:	4b1e      	ldr	r3, [pc, #120]	; (8000fa8 <__sfp+0x84>)
 8000f2e:	681e      	ldr	r6, [r3, #0]
 8000f30:	69b3      	ldr	r3, [r6, #24]
 8000f32:	b913      	cbnz	r3, 8000f3a <__sfp+0x16>
 8000f34:	4630      	mov	r0, r6
 8000f36:	f7ff ffbd 	bl	8000eb4 <__sinit>
 8000f3a:	3648      	adds	r6, #72	; 0x48
 8000f3c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000f40:	3b01      	subs	r3, #1
 8000f42:	d503      	bpl.n	8000f4c <__sfp+0x28>
 8000f44:	6833      	ldr	r3, [r6, #0]
 8000f46:	b30b      	cbz	r3, 8000f8c <__sfp+0x68>
 8000f48:	6836      	ldr	r6, [r6, #0]
 8000f4a:	e7f7      	b.n	8000f3c <__sfp+0x18>
 8000f4c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000f50:	b9d5      	cbnz	r5, 8000f88 <__sfp+0x64>
 8000f52:	4b16      	ldr	r3, [pc, #88]	; (8000fac <__sfp+0x88>)
 8000f54:	60e3      	str	r3, [r4, #12]
 8000f56:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000f5a:	6665      	str	r5, [r4, #100]	; 0x64
 8000f5c:	f000 f847 	bl	8000fee <__retarget_lock_init_recursive>
 8000f60:	f7ff ff96 	bl	8000e90 <__sfp_lock_release>
 8000f64:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000f68:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000f6c:	6025      	str	r5, [r4, #0]
 8000f6e:	61a5      	str	r5, [r4, #24]
 8000f70:	2208      	movs	r2, #8
 8000f72:	4629      	mov	r1, r5
 8000f74:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000f78:	f7ff ff04 	bl	8000d84 <memset>
 8000f7c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000f80:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000f84:	4620      	mov	r0, r4
 8000f86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000f88:	3468      	adds	r4, #104	; 0x68
 8000f8a:	e7d9      	b.n	8000f40 <__sfp+0x1c>
 8000f8c:	2104      	movs	r1, #4
 8000f8e:	4638      	mov	r0, r7
 8000f90:	f7ff ff62 	bl	8000e58 <__sfmoreglue>
 8000f94:	4604      	mov	r4, r0
 8000f96:	6030      	str	r0, [r6, #0]
 8000f98:	2800      	cmp	r0, #0
 8000f9a:	d1d5      	bne.n	8000f48 <__sfp+0x24>
 8000f9c:	f7ff ff78 	bl	8000e90 <__sfp_lock_release>
 8000fa0:	230c      	movs	r3, #12
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	e7ee      	b.n	8000f84 <__sfp+0x60>
 8000fa6:	bf00      	nop
 8000fa8:	080020bc 	.word	0x080020bc
 8000fac:	ffff0001 	.word	0xffff0001

08000fb0 <_fwalk_reent>:
 8000fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000fb4:	4606      	mov	r6, r0
 8000fb6:	4688      	mov	r8, r1
 8000fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000fbc:	2700      	movs	r7, #0
 8000fbe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000fc2:	f1b9 0901 	subs.w	r9, r9, #1
 8000fc6:	d505      	bpl.n	8000fd4 <_fwalk_reent+0x24>
 8000fc8:	6824      	ldr	r4, [r4, #0]
 8000fca:	2c00      	cmp	r4, #0
 8000fcc:	d1f7      	bne.n	8000fbe <_fwalk_reent+0xe>
 8000fce:	4638      	mov	r0, r7
 8000fd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000fd4:	89ab      	ldrh	r3, [r5, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d907      	bls.n	8000fea <_fwalk_reent+0x3a>
 8000fda:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000fde:	3301      	adds	r3, #1
 8000fe0:	d003      	beq.n	8000fea <_fwalk_reent+0x3a>
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	4630      	mov	r0, r6
 8000fe6:	47c0      	blx	r8
 8000fe8:	4307      	orrs	r7, r0
 8000fea:	3568      	adds	r5, #104	; 0x68
 8000fec:	e7e9      	b.n	8000fc2 <_fwalk_reent+0x12>

08000fee <__retarget_lock_init_recursive>:
 8000fee:	4770      	bx	lr

08000ff0 <__retarget_lock_acquire_recursive>:
 8000ff0:	4770      	bx	lr

08000ff2 <__retarget_lock_release_recursive>:
 8000ff2:	4770      	bx	lr

08000ff4 <sbrk_aligned>:
 8000ff4:	b570      	push	{r4, r5, r6, lr}
 8000ff6:	4e0e      	ldr	r6, [pc, #56]	; (8001030 <sbrk_aligned+0x3c>)
 8000ff8:	460c      	mov	r4, r1
 8000ffa:	6831      	ldr	r1, [r6, #0]
 8000ffc:	4605      	mov	r5, r0
 8000ffe:	b911      	cbnz	r1, 8001006 <sbrk_aligned+0x12>
 8001000:	f000 fcd6 	bl	80019b0 <_sbrk_r>
 8001004:	6030      	str	r0, [r6, #0]
 8001006:	4621      	mov	r1, r4
 8001008:	4628      	mov	r0, r5
 800100a:	f000 fcd1 	bl	80019b0 <_sbrk_r>
 800100e:	1c43      	adds	r3, r0, #1
 8001010:	d00a      	beq.n	8001028 <sbrk_aligned+0x34>
 8001012:	1cc4      	adds	r4, r0, #3
 8001014:	f024 0403 	bic.w	r4, r4, #3
 8001018:	42a0      	cmp	r0, r4
 800101a:	d007      	beq.n	800102c <sbrk_aligned+0x38>
 800101c:	1a21      	subs	r1, r4, r0
 800101e:	4628      	mov	r0, r5
 8001020:	f000 fcc6 	bl	80019b0 <_sbrk_r>
 8001024:	3001      	adds	r0, #1
 8001026:	d101      	bne.n	800102c <sbrk_aligned+0x38>
 8001028:	f04f 34ff 	mov.w	r4, #4294967295
 800102c:	4620      	mov	r0, r4
 800102e:	bd70      	pop	{r4, r5, r6, pc}
 8001030:	200000f4 	.word	0x200000f4

08001034 <_malloc_r>:
 8001034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001038:	1ccd      	adds	r5, r1, #3
 800103a:	f025 0503 	bic.w	r5, r5, #3
 800103e:	3508      	adds	r5, #8
 8001040:	2d0c      	cmp	r5, #12
 8001042:	bf38      	it	cc
 8001044:	250c      	movcc	r5, #12
 8001046:	2d00      	cmp	r5, #0
 8001048:	4607      	mov	r7, r0
 800104a:	db01      	blt.n	8001050 <_malloc_r+0x1c>
 800104c:	42a9      	cmp	r1, r5
 800104e:	d905      	bls.n	800105c <_malloc_r+0x28>
 8001050:	230c      	movs	r3, #12
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	2600      	movs	r6, #0
 8001056:	4630      	mov	r0, r6
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800105c:	4e2e      	ldr	r6, [pc, #184]	; (8001118 <_malloc_r+0xe4>)
 800105e:	f000 ff3f 	bl	8001ee0 <__malloc_lock>
 8001062:	6833      	ldr	r3, [r6, #0]
 8001064:	461c      	mov	r4, r3
 8001066:	bb34      	cbnz	r4, 80010b6 <_malloc_r+0x82>
 8001068:	4629      	mov	r1, r5
 800106a:	4638      	mov	r0, r7
 800106c:	f7ff ffc2 	bl	8000ff4 <sbrk_aligned>
 8001070:	1c43      	adds	r3, r0, #1
 8001072:	4604      	mov	r4, r0
 8001074:	d14d      	bne.n	8001112 <_malloc_r+0xde>
 8001076:	6834      	ldr	r4, [r6, #0]
 8001078:	4626      	mov	r6, r4
 800107a:	2e00      	cmp	r6, #0
 800107c:	d140      	bne.n	8001100 <_malloc_r+0xcc>
 800107e:	6823      	ldr	r3, [r4, #0]
 8001080:	4631      	mov	r1, r6
 8001082:	4638      	mov	r0, r7
 8001084:	eb04 0803 	add.w	r8, r4, r3
 8001088:	f000 fc92 	bl	80019b0 <_sbrk_r>
 800108c:	4580      	cmp	r8, r0
 800108e:	d13a      	bne.n	8001106 <_malloc_r+0xd2>
 8001090:	6821      	ldr	r1, [r4, #0]
 8001092:	3503      	adds	r5, #3
 8001094:	1a6d      	subs	r5, r5, r1
 8001096:	f025 0503 	bic.w	r5, r5, #3
 800109a:	3508      	adds	r5, #8
 800109c:	2d0c      	cmp	r5, #12
 800109e:	bf38      	it	cc
 80010a0:	250c      	movcc	r5, #12
 80010a2:	4629      	mov	r1, r5
 80010a4:	4638      	mov	r0, r7
 80010a6:	f7ff ffa5 	bl	8000ff4 <sbrk_aligned>
 80010aa:	3001      	adds	r0, #1
 80010ac:	d02b      	beq.n	8001106 <_malloc_r+0xd2>
 80010ae:	6823      	ldr	r3, [r4, #0]
 80010b0:	442b      	add	r3, r5
 80010b2:	6023      	str	r3, [r4, #0]
 80010b4:	e00e      	b.n	80010d4 <_malloc_r+0xa0>
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	1b52      	subs	r2, r2, r5
 80010ba:	d41e      	bmi.n	80010fa <_malloc_r+0xc6>
 80010bc:	2a0b      	cmp	r2, #11
 80010be:	d916      	bls.n	80010ee <_malloc_r+0xba>
 80010c0:	1961      	adds	r1, r4, r5
 80010c2:	42a3      	cmp	r3, r4
 80010c4:	6025      	str	r5, [r4, #0]
 80010c6:	bf18      	it	ne
 80010c8:	6059      	strne	r1, [r3, #4]
 80010ca:	6863      	ldr	r3, [r4, #4]
 80010cc:	bf08      	it	eq
 80010ce:	6031      	streq	r1, [r6, #0]
 80010d0:	5162      	str	r2, [r4, r5]
 80010d2:	604b      	str	r3, [r1, #4]
 80010d4:	4638      	mov	r0, r7
 80010d6:	f104 060b 	add.w	r6, r4, #11
 80010da:	f000 ff07 	bl	8001eec <__malloc_unlock>
 80010de:	f026 0607 	bic.w	r6, r6, #7
 80010e2:	1d23      	adds	r3, r4, #4
 80010e4:	1af2      	subs	r2, r6, r3
 80010e6:	d0b6      	beq.n	8001056 <_malloc_r+0x22>
 80010e8:	1b9b      	subs	r3, r3, r6
 80010ea:	50a3      	str	r3, [r4, r2]
 80010ec:	e7b3      	b.n	8001056 <_malloc_r+0x22>
 80010ee:	6862      	ldr	r2, [r4, #4]
 80010f0:	42a3      	cmp	r3, r4
 80010f2:	bf0c      	ite	eq
 80010f4:	6032      	streq	r2, [r6, #0]
 80010f6:	605a      	strne	r2, [r3, #4]
 80010f8:	e7ec      	b.n	80010d4 <_malloc_r+0xa0>
 80010fa:	4623      	mov	r3, r4
 80010fc:	6864      	ldr	r4, [r4, #4]
 80010fe:	e7b2      	b.n	8001066 <_malloc_r+0x32>
 8001100:	4634      	mov	r4, r6
 8001102:	6876      	ldr	r6, [r6, #4]
 8001104:	e7b9      	b.n	800107a <_malloc_r+0x46>
 8001106:	230c      	movs	r3, #12
 8001108:	603b      	str	r3, [r7, #0]
 800110a:	4638      	mov	r0, r7
 800110c:	f000 feee 	bl	8001eec <__malloc_unlock>
 8001110:	e7a1      	b.n	8001056 <_malloc_r+0x22>
 8001112:	6025      	str	r5, [r4, #0]
 8001114:	e7de      	b.n	80010d4 <_malloc_r+0xa0>
 8001116:	bf00      	nop
 8001118:	200000f0 	.word	0x200000f0

0800111c <__ssputs_r>:
 800111c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001120:	688e      	ldr	r6, [r1, #8]
 8001122:	429e      	cmp	r6, r3
 8001124:	4682      	mov	sl, r0
 8001126:	460c      	mov	r4, r1
 8001128:	4690      	mov	r8, r2
 800112a:	461f      	mov	r7, r3
 800112c:	d838      	bhi.n	80011a0 <__ssputs_r+0x84>
 800112e:	898a      	ldrh	r2, [r1, #12]
 8001130:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001134:	d032      	beq.n	800119c <__ssputs_r+0x80>
 8001136:	6825      	ldr	r5, [r4, #0]
 8001138:	6909      	ldr	r1, [r1, #16]
 800113a:	eba5 0901 	sub.w	r9, r5, r1
 800113e:	6965      	ldr	r5, [r4, #20]
 8001140:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001144:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8001148:	3301      	adds	r3, #1
 800114a:	444b      	add	r3, r9
 800114c:	106d      	asrs	r5, r5, #1
 800114e:	429d      	cmp	r5, r3
 8001150:	bf38      	it	cc
 8001152:	461d      	movcc	r5, r3
 8001154:	0553      	lsls	r3, r2, #21
 8001156:	d531      	bpl.n	80011bc <__ssputs_r+0xa0>
 8001158:	4629      	mov	r1, r5
 800115a:	f7ff ff6b 	bl	8001034 <_malloc_r>
 800115e:	4606      	mov	r6, r0
 8001160:	b950      	cbnz	r0, 8001178 <__ssputs_r+0x5c>
 8001162:	230c      	movs	r3, #12
 8001164:	f8ca 3000 	str.w	r3, [sl]
 8001168:	89a3      	ldrh	r3, [r4, #12]
 800116a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800116e:	81a3      	strh	r3, [r4, #12]
 8001170:	f04f 30ff 	mov.w	r0, #4294967295
 8001174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001178:	6921      	ldr	r1, [r4, #16]
 800117a:	464a      	mov	r2, r9
 800117c:	f000 fe88 	bl	8001e90 <memcpy>
 8001180:	89a3      	ldrh	r3, [r4, #12]
 8001182:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001186:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800118a:	81a3      	strh	r3, [r4, #12]
 800118c:	6126      	str	r6, [r4, #16]
 800118e:	6165      	str	r5, [r4, #20]
 8001190:	444e      	add	r6, r9
 8001192:	eba5 0509 	sub.w	r5, r5, r9
 8001196:	6026      	str	r6, [r4, #0]
 8001198:	60a5      	str	r5, [r4, #8]
 800119a:	463e      	mov	r6, r7
 800119c:	42be      	cmp	r6, r7
 800119e:	d900      	bls.n	80011a2 <__ssputs_r+0x86>
 80011a0:	463e      	mov	r6, r7
 80011a2:	6820      	ldr	r0, [r4, #0]
 80011a4:	4632      	mov	r2, r6
 80011a6:	4641      	mov	r1, r8
 80011a8:	f000 fe80 	bl	8001eac <memmove>
 80011ac:	68a3      	ldr	r3, [r4, #8]
 80011ae:	1b9b      	subs	r3, r3, r6
 80011b0:	60a3      	str	r3, [r4, #8]
 80011b2:	6823      	ldr	r3, [r4, #0]
 80011b4:	4433      	add	r3, r6
 80011b6:	6023      	str	r3, [r4, #0]
 80011b8:	2000      	movs	r0, #0
 80011ba:	e7db      	b.n	8001174 <__ssputs_r+0x58>
 80011bc:	462a      	mov	r2, r5
 80011be:	f000 fee7 	bl	8001f90 <_realloc_r>
 80011c2:	4606      	mov	r6, r0
 80011c4:	2800      	cmp	r0, #0
 80011c6:	d1e1      	bne.n	800118c <__ssputs_r+0x70>
 80011c8:	6921      	ldr	r1, [r4, #16]
 80011ca:	4650      	mov	r0, sl
 80011cc:	f000 fe94 	bl	8001ef8 <_free_r>
 80011d0:	e7c7      	b.n	8001162 <__ssputs_r+0x46>
	...

080011d4 <_svfiprintf_r>:
 80011d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011d8:	4698      	mov	r8, r3
 80011da:	898b      	ldrh	r3, [r1, #12]
 80011dc:	061b      	lsls	r3, r3, #24
 80011de:	b09d      	sub	sp, #116	; 0x74
 80011e0:	4607      	mov	r7, r0
 80011e2:	460d      	mov	r5, r1
 80011e4:	4614      	mov	r4, r2
 80011e6:	d50e      	bpl.n	8001206 <_svfiprintf_r+0x32>
 80011e8:	690b      	ldr	r3, [r1, #16]
 80011ea:	b963      	cbnz	r3, 8001206 <_svfiprintf_r+0x32>
 80011ec:	2140      	movs	r1, #64	; 0x40
 80011ee:	f7ff ff21 	bl	8001034 <_malloc_r>
 80011f2:	6028      	str	r0, [r5, #0]
 80011f4:	6128      	str	r0, [r5, #16]
 80011f6:	b920      	cbnz	r0, 8001202 <_svfiprintf_r+0x2e>
 80011f8:	230c      	movs	r3, #12
 80011fa:	603b      	str	r3, [r7, #0]
 80011fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001200:	e0d1      	b.n	80013a6 <_svfiprintf_r+0x1d2>
 8001202:	2340      	movs	r3, #64	; 0x40
 8001204:	616b      	str	r3, [r5, #20]
 8001206:	2300      	movs	r3, #0
 8001208:	9309      	str	r3, [sp, #36]	; 0x24
 800120a:	2320      	movs	r3, #32
 800120c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001210:	f8cd 800c 	str.w	r8, [sp, #12]
 8001214:	2330      	movs	r3, #48	; 0x30
 8001216:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80013c0 <_svfiprintf_r+0x1ec>
 800121a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800121e:	f04f 0901 	mov.w	r9, #1
 8001222:	4623      	mov	r3, r4
 8001224:	469a      	mov	sl, r3
 8001226:	f813 2b01 	ldrb.w	r2, [r3], #1
 800122a:	b10a      	cbz	r2, 8001230 <_svfiprintf_r+0x5c>
 800122c:	2a25      	cmp	r2, #37	; 0x25
 800122e:	d1f9      	bne.n	8001224 <_svfiprintf_r+0x50>
 8001230:	ebba 0b04 	subs.w	fp, sl, r4
 8001234:	d00b      	beq.n	800124e <_svfiprintf_r+0x7a>
 8001236:	465b      	mov	r3, fp
 8001238:	4622      	mov	r2, r4
 800123a:	4629      	mov	r1, r5
 800123c:	4638      	mov	r0, r7
 800123e:	f7ff ff6d 	bl	800111c <__ssputs_r>
 8001242:	3001      	adds	r0, #1
 8001244:	f000 80aa 	beq.w	800139c <_svfiprintf_r+0x1c8>
 8001248:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800124a:	445a      	add	r2, fp
 800124c:	9209      	str	r2, [sp, #36]	; 0x24
 800124e:	f89a 3000 	ldrb.w	r3, [sl]
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80a2 	beq.w	800139c <_svfiprintf_r+0x1c8>
 8001258:	2300      	movs	r3, #0
 800125a:	f04f 32ff 	mov.w	r2, #4294967295
 800125e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001262:	f10a 0a01 	add.w	sl, sl, #1
 8001266:	9304      	str	r3, [sp, #16]
 8001268:	9307      	str	r3, [sp, #28]
 800126a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800126e:	931a      	str	r3, [sp, #104]	; 0x68
 8001270:	4654      	mov	r4, sl
 8001272:	2205      	movs	r2, #5
 8001274:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001278:	4851      	ldr	r0, [pc, #324]	; (80013c0 <_svfiprintf_r+0x1ec>)
 800127a:	f7fe ffc9 	bl	8000210 <memchr>
 800127e:	9a04      	ldr	r2, [sp, #16]
 8001280:	b9d8      	cbnz	r0, 80012ba <_svfiprintf_r+0xe6>
 8001282:	06d0      	lsls	r0, r2, #27
 8001284:	bf44      	itt	mi
 8001286:	2320      	movmi	r3, #32
 8001288:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800128c:	0711      	lsls	r1, r2, #28
 800128e:	bf44      	itt	mi
 8001290:	232b      	movmi	r3, #43	; 0x2b
 8001292:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001296:	f89a 3000 	ldrb.w	r3, [sl]
 800129a:	2b2a      	cmp	r3, #42	; 0x2a
 800129c:	d015      	beq.n	80012ca <_svfiprintf_r+0xf6>
 800129e:	9a07      	ldr	r2, [sp, #28]
 80012a0:	4654      	mov	r4, sl
 80012a2:	2000      	movs	r0, #0
 80012a4:	f04f 0c0a 	mov.w	ip, #10
 80012a8:	4621      	mov	r1, r4
 80012aa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80012ae:	3b30      	subs	r3, #48	; 0x30
 80012b0:	2b09      	cmp	r3, #9
 80012b2:	d94e      	bls.n	8001352 <_svfiprintf_r+0x17e>
 80012b4:	b1b0      	cbz	r0, 80012e4 <_svfiprintf_r+0x110>
 80012b6:	9207      	str	r2, [sp, #28]
 80012b8:	e014      	b.n	80012e4 <_svfiprintf_r+0x110>
 80012ba:	eba0 0308 	sub.w	r3, r0, r8
 80012be:	fa09 f303 	lsl.w	r3, r9, r3
 80012c2:	4313      	orrs	r3, r2
 80012c4:	9304      	str	r3, [sp, #16]
 80012c6:	46a2      	mov	sl, r4
 80012c8:	e7d2      	b.n	8001270 <_svfiprintf_r+0x9c>
 80012ca:	9b03      	ldr	r3, [sp, #12]
 80012cc:	1d19      	adds	r1, r3, #4
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	9103      	str	r1, [sp, #12]
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	bfbb      	ittet	lt
 80012d6:	425b      	neglt	r3, r3
 80012d8:	f042 0202 	orrlt.w	r2, r2, #2
 80012dc:	9307      	strge	r3, [sp, #28]
 80012de:	9307      	strlt	r3, [sp, #28]
 80012e0:	bfb8      	it	lt
 80012e2:	9204      	strlt	r2, [sp, #16]
 80012e4:	7823      	ldrb	r3, [r4, #0]
 80012e6:	2b2e      	cmp	r3, #46	; 0x2e
 80012e8:	d10c      	bne.n	8001304 <_svfiprintf_r+0x130>
 80012ea:	7863      	ldrb	r3, [r4, #1]
 80012ec:	2b2a      	cmp	r3, #42	; 0x2a
 80012ee:	d135      	bne.n	800135c <_svfiprintf_r+0x188>
 80012f0:	9b03      	ldr	r3, [sp, #12]
 80012f2:	1d1a      	adds	r2, r3, #4
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	9203      	str	r2, [sp, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bfb8      	it	lt
 80012fc:	f04f 33ff 	movlt.w	r3, #4294967295
 8001300:	3402      	adds	r4, #2
 8001302:	9305      	str	r3, [sp, #20]
 8001304:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80013d0 <_svfiprintf_r+0x1fc>
 8001308:	7821      	ldrb	r1, [r4, #0]
 800130a:	2203      	movs	r2, #3
 800130c:	4650      	mov	r0, sl
 800130e:	f7fe ff7f 	bl	8000210 <memchr>
 8001312:	b140      	cbz	r0, 8001326 <_svfiprintf_r+0x152>
 8001314:	2340      	movs	r3, #64	; 0x40
 8001316:	eba0 000a 	sub.w	r0, r0, sl
 800131a:	fa03 f000 	lsl.w	r0, r3, r0
 800131e:	9b04      	ldr	r3, [sp, #16]
 8001320:	4303      	orrs	r3, r0
 8001322:	3401      	adds	r4, #1
 8001324:	9304      	str	r3, [sp, #16]
 8001326:	f814 1b01 	ldrb.w	r1, [r4], #1
 800132a:	4826      	ldr	r0, [pc, #152]	; (80013c4 <_svfiprintf_r+0x1f0>)
 800132c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001330:	2206      	movs	r2, #6
 8001332:	f7fe ff6d 	bl	8000210 <memchr>
 8001336:	2800      	cmp	r0, #0
 8001338:	d038      	beq.n	80013ac <_svfiprintf_r+0x1d8>
 800133a:	4b23      	ldr	r3, [pc, #140]	; (80013c8 <_svfiprintf_r+0x1f4>)
 800133c:	bb1b      	cbnz	r3, 8001386 <_svfiprintf_r+0x1b2>
 800133e:	9b03      	ldr	r3, [sp, #12]
 8001340:	3307      	adds	r3, #7
 8001342:	f023 0307 	bic.w	r3, r3, #7
 8001346:	3308      	adds	r3, #8
 8001348:	9303      	str	r3, [sp, #12]
 800134a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800134c:	4433      	add	r3, r6
 800134e:	9309      	str	r3, [sp, #36]	; 0x24
 8001350:	e767      	b.n	8001222 <_svfiprintf_r+0x4e>
 8001352:	fb0c 3202 	mla	r2, ip, r2, r3
 8001356:	460c      	mov	r4, r1
 8001358:	2001      	movs	r0, #1
 800135a:	e7a5      	b.n	80012a8 <_svfiprintf_r+0xd4>
 800135c:	2300      	movs	r3, #0
 800135e:	3401      	adds	r4, #1
 8001360:	9305      	str	r3, [sp, #20]
 8001362:	4619      	mov	r1, r3
 8001364:	f04f 0c0a 	mov.w	ip, #10
 8001368:	4620      	mov	r0, r4
 800136a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800136e:	3a30      	subs	r2, #48	; 0x30
 8001370:	2a09      	cmp	r2, #9
 8001372:	d903      	bls.n	800137c <_svfiprintf_r+0x1a8>
 8001374:	2b00      	cmp	r3, #0
 8001376:	d0c5      	beq.n	8001304 <_svfiprintf_r+0x130>
 8001378:	9105      	str	r1, [sp, #20]
 800137a:	e7c3      	b.n	8001304 <_svfiprintf_r+0x130>
 800137c:	fb0c 2101 	mla	r1, ip, r1, r2
 8001380:	4604      	mov	r4, r0
 8001382:	2301      	movs	r3, #1
 8001384:	e7f0      	b.n	8001368 <_svfiprintf_r+0x194>
 8001386:	ab03      	add	r3, sp, #12
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	462a      	mov	r2, r5
 800138c:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <_svfiprintf_r+0x1f8>)
 800138e:	a904      	add	r1, sp, #16
 8001390:	4638      	mov	r0, r7
 8001392:	f3af 8000 	nop.w
 8001396:	1c42      	adds	r2, r0, #1
 8001398:	4606      	mov	r6, r0
 800139a:	d1d6      	bne.n	800134a <_svfiprintf_r+0x176>
 800139c:	89ab      	ldrh	r3, [r5, #12]
 800139e:	065b      	lsls	r3, r3, #25
 80013a0:	f53f af2c 	bmi.w	80011fc <_svfiprintf_r+0x28>
 80013a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80013a6:	b01d      	add	sp, #116	; 0x74
 80013a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80013ac:	ab03      	add	r3, sp, #12
 80013ae:	9300      	str	r3, [sp, #0]
 80013b0:	462a      	mov	r2, r5
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <_svfiprintf_r+0x1f8>)
 80013b4:	a904      	add	r1, sp, #16
 80013b6:	4638      	mov	r0, r7
 80013b8:	f000 f9d4 	bl	8001764 <_printf_i>
 80013bc:	e7eb      	b.n	8001396 <_svfiprintf_r+0x1c2>
 80013be:	bf00      	nop
 80013c0:	08002120 	.word	0x08002120
 80013c4:	0800212a 	.word	0x0800212a
 80013c8:	00000000 	.word	0x00000000
 80013cc:	0800111d 	.word	0x0800111d
 80013d0:	08002126 	.word	0x08002126

080013d4 <__sfputc_r>:
 80013d4:	6893      	ldr	r3, [r2, #8]
 80013d6:	3b01      	subs	r3, #1
 80013d8:	2b00      	cmp	r3, #0
 80013da:	b410      	push	{r4}
 80013dc:	6093      	str	r3, [r2, #8]
 80013de:	da08      	bge.n	80013f2 <__sfputc_r+0x1e>
 80013e0:	6994      	ldr	r4, [r2, #24]
 80013e2:	42a3      	cmp	r3, r4
 80013e4:	db01      	blt.n	80013ea <__sfputc_r+0x16>
 80013e6:	290a      	cmp	r1, #10
 80013e8:	d103      	bne.n	80013f2 <__sfputc_r+0x1e>
 80013ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 80013ee:	f000 bb33 	b.w	8001a58 <__swbuf_r>
 80013f2:	6813      	ldr	r3, [r2, #0]
 80013f4:	1c58      	adds	r0, r3, #1
 80013f6:	6010      	str	r0, [r2, #0]
 80013f8:	7019      	strb	r1, [r3, #0]
 80013fa:	4608      	mov	r0, r1
 80013fc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001400:	4770      	bx	lr

08001402 <__sfputs_r>:
 8001402:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001404:	4606      	mov	r6, r0
 8001406:	460f      	mov	r7, r1
 8001408:	4614      	mov	r4, r2
 800140a:	18d5      	adds	r5, r2, r3
 800140c:	42ac      	cmp	r4, r5
 800140e:	d101      	bne.n	8001414 <__sfputs_r+0x12>
 8001410:	2000      	movs	r0, #0
 8001412:	e007      	b.n	8001424 <__sfputs_r+0x22>
 8001414:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001418:	463a      	mov	r2, r7
 800141a:	4630      	mov	r0, r6
 800141c:	f7ff ffda 	bl	80013d4 <__sfputc_r>
 8001420:	1c43      	adds	r3, r0, #1
 8001422:	d1f3      	bne.n	800140c <__sfputs_r+0xa>
 8001424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08001428 <_vfiprintf_r>:
 8001428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800142c:	460d      	mov	r5, r1
 800142e:	b09d      	sub	sp, #116	; 0x74
 8001430:	4614      	mov	r4, r2
 8001432:	4698      	mov	r8, r3
 8001434:	4606      	mov	r6, r0
 8001436:	b118      	cbz	r0, 8001440 <_vfiprintf_r+0x18>
 8001438:	6983      	ldr	r3, [r0, #24]
 800143a:	b90b      	cbnz	r3, 8001440 <_vfiprintf_r+0x18>
 800143c:	f7ff fd3a 	bl	8000eb4 <__sinit>
 8001440:	4b89      	ldr	r3, [pc, #548]	; (8001668 <_vfiprintf_r+0x240>)
 8001442:	429d      	cmp	r5, r3
 8001444:	d11b      	bne.n	800147e <_vfiprintf_r+0x56>
 8001446:	6875      	ldr	r5, [r6, #4]
 8001448:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800144a:	07d9      	lsls	r1, r3, #31
 800144c:	d405      	bmi.n	800145a <_vfiprintf_r+0x32>
 800144e:	89ab      	ldrh	r3, [r5, #12]
 8001450:	059a      	lsls	r2, r3, #22
 8001452:	d402      	bmi.n	800145a <_vfiprintf_r+0x32>
 8001454:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001456:	f7ff fdcb 	bl	8000ff0 <__retarget_lock_acquire_recursive>
 800145a:	89ab      	ldrh	r3, [r5, #12]
 800145c:	071b      	lsls	r3, r3, #28
 800145e:	d501      	bpl.n	8001464 <_vfiprintf_r+0x3c>
 8001460:	692b      	ldr	r3, [r5, #16]
 8001462:	b9eb      	cbnz	r3, 80014a0 <_vfiprintf_r+0x78>
 8001464:	4629      	mov	r1, r5
 8001466:	4630      	mov	r0, r6
 8001468:	f000 fb5a 	bl	8001b20 <__swsetup_r>
 800146c:	b1c0      	cbz	r0, 80014a0 <_vfiprintf_r+0x78>
 800146e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001470:	07dc      	lsls	r4, r3, #31
 8001472:	d50e      	bpl.n	8001492 <_vfiprintf_r+0x6a>
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	b01d      	add	sp, #116	; 0x74
 800147a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800147e:	4b7b      	ldr	r3, [pc, #492]	; (800166c <_vfiprintf_r+0x244>)
 8001480:	429d      	cmp	r5, r3
 8001482:	d101      	bne.n	8001488 <_vfiprintf_r+0x60>
 8001484:	68b5      	ldr	r5, [r6, #8]
 8001486:	e7df      	b.n	8001448 <_vfiprintf_r+0x20>
 8001488:	4b79      	ldr	r3, [pc, #484]	; (8001670 <_vfiprintf_r+0x248>)
 800148a:	429d      	cmp	r5, r3
 800148c:	bf08      	it	eq
 800148e:	68f5      	ldreq	r5, [r6, #12]
 8001490:	e7da      	b.n	8001448 <_vfiprintf_r+0x20>
 8001492:	89ab      	ldrh	r3, [r5, #12]
 8001494:	0598      	lsls	r0, r3, #22
 8001496:	d4ed      	bmi.n	8001474 <_vfiprintf_r+0x4c>
 8001498:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800149a:	f7ff fdaa 	bl	8000ff2 <__retarget_lock_release_recursive>
 800149e:	e7e9      	b.n	8001474 <_vfiprintf_r+0x4c>
 80014a0:	2300      	movs	r3, #0
 80014a2:	9309      	str	r3, [sp, #36]	; 0x24
 80014a4:	2320      	movs	r3, #32
 80014a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80014aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80014ae:	2330      	movs	r3, #48	; 0x30
 80014b0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8001674 <_vfiprintf_r+0x24c>
 80014b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80014b8:	f04f 0901 	mov.w	r9, #1
 80014bc:	4623      	mov	r3, r4
 80014be:	469a      	mov	sl, r3
 80014c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80014c4:	b10a      	cbz	r2, 80014ca <_vfiprintf_r+0xa2>
 80014c6:	2a25      	cmp	r2, #37	; 0x25
 80014c8:	d1f9      	bne.n	80014be <_vfiprintf_r+0x96>
 80014ca:	ebba 0b04 	subs.w	fp, sl, r4
 80014ce:	d00b      	beq.n	80014e8 <_vfiprintf_r+0xc0>
 80014d0:	465b      	mov	r3, fp
 80014d2:	4622      	mov	r2, r4
 80014d4:	4629      	mov	r1, r5
 80014d6:	4630      	mov	r0, r6
 80014d8:	f7ff ff93 	bl	8001402 <__sfputs_r>
 80014dc:	3001      	adds	r0, #1
 80014de:	f000 80aa 	beq.w	8001636 <_vfiprintf_r+0x20e>
 80014e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80014e4:	445a      	add	r2, fp
 80014e6:	9209      	str	r2, [sp, #36]	; 0x24
 80014e8:	f89a 3000 	ldrb.w	r3, [sl]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	f000 80a2 	beq.w	8001636 <_vfiprintf_r+0x20e>
 80014f2:	2300      	movs	r3, #0
 80014f4:	f04f 32ff 	mov.w	r2, #4294967295
 80014f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80014fc:	f10a 0a01 	add.w	sl, sl, #1
 8001500:	9304      	str	r3, [sp, #16]
 8001502:	9307      	str	r3, [sp, #28]
 8001504:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001508:	931a      	str	r3, [sp, #104]	; 0x68
 800150a:	4654      	mov	r4, sl
 800150c:	2205      	movs	r2, #5
 800150e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001512:	4858      	ldr	r0, [pc, #352]	; (8001674 <_vfiprintf_r+0x24c>)
 8001514:	f7fe fe7c 	bl	8000210 <memchr>
 8001518:	9a04      	ldr	r2, [sp, #16]
 800151a:	b9d8      	cbnz	r0, 8001554 <_vfiprintf_r+0x12c>
 800151c:	06d1      	lsls	r1, r2, #27
 800151e:	bf44      	itt	mi
 8001520:	2320      	movmi	r3, #32
 8001522:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001526:	0713      	lsls	r3, r2, #28
 8001528:	bf44      	itt	mi
 800152a:	232b      	movmi	r3, #43	; 0x2b
 800152c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8001530:	f89a 3000 	ldrb.w	r3, [sl]
 8001534:	2b2a      	cmp	r3, #42	; 0x2a
 8001536:	d015      	beq.n	8001564 <_vfiprintf_r+0x13c>
 8001538:	9a07      	ldr	r2, [sp, #28]
 800153a:	4654      	mov	r4, sl
 800153c:	2000      	movs	r0, #0
 800153e:	f04f 0c0a 	mov.w	ip, #10
 8001542:	4621      	mov	r1, r4
 8001544:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001548:	3b30      	subs	r3, #48	; 0x30
 800154a:	2b09      	cmp	r3, #9
 800154c:	d94e      	bls.n	80015ec <_vfiprintf_r+0x1c4>
 800154e:	b1b0      	cbz	r0, 800157e <_vfiprintf_r+0x156>
 8001550:	9207      	str	r2, [sp, #28]
 8001552:	e014      	b.n	800157e <_vfiprintf_r+0x156>
 8001554:	eba0 0308 	sub.w	r3, r0, r8
 8001558:	fa09 f303 	lsl.w	r3, r9, r3
 800155c:	4313      	orrs	r3, r2
 800155e:	9304      	str	r3, [sp, #16]
 8001560:	46a2      	mov	sl, r4
 8001562:	e7d2      	b.n	800150a <_vfiprintf_r+0xe2>
 8001564:	9b03      	ldr	r3, [sp, #12]
 8001566:	1d19      	adds	r1, r3, #4
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	9103      	str	r1, [sp, #12]
 800156c:	2b00      	cmp	r3, #0
 800156e:	bfbb      	ittet	lt
 8001570:	425b      	neglt	r3, r3
 8001572:	f042 0202 	orrlt.w	r2, r2, #2
 8001576:	9307      	strge	r3, [sp, #28]
 8001578:	9307      	strlt	r3, [sp, #28]
 800157a:	bfb8      	it	lt
 800157c:	9204      	strlt	r2, [sp, #16]
 800157e:	7823      	ldrb	r3, [r4, #0]
 8001580:	2b2e      	cmp	r3, #46	; 0x2e
 8001582:	d10c      	bne.n	800159e <_vfiprintf_r+0x176>
 8001584:	7863      	ldrb	r3, [r4, #1]
 8001586:	2b2a      	cmp	r3, #42	; 0x2a
 8001588:	d135      	bne.n	80015f6 <_vfiprintf_r+0x1ce>
 800158a:	9b03      	ldr	r3, [sp, #12]
 800158c:	1d1a      	adds	r2, r3, #4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	9203      	str	r2, [sp, #12]
 8001592:	2b00      	cmp	r3, #0
 8001594:	bfb8      	it	lt
 8001596:	f04f 33ff 	movlt.w	r3, #4294967295
 800159a:	3402      	adds	r4, #2
 800159c:	9305      	str	r3, [sp, #20]
 800159e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8001684 <_vfiprintf_r+0x25c>
 80015a2:	7821      	ldrb	r1, [r4, #0]
 80015a4:	2203      	movs	r2, #3
 80015a6:	4650      	mov	r0, sl
 80015a8:	f7fe fe32 	bl	8000210 <memchr>
 80015ac:	b140      	cbz	r0, 80015c0 <_vfiprintf_r+0x198>
 80015ae:	2340      	movs	r3, #64	; 0x40
 80015b0:	eba0 000a 	sub.w	r0, r0, sl
 80015b4:	fa03 f000 	lsl.w	r0, r3, r0
 80015b8:	9b04      	ldr	r3, [sp, #16]
 80015ba:	4303      	orrs	r3, r0
 80015bc:	3401      	adds	r4, #1
 80015be:	9304      	str	r3, [sp, #16]
 80015c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80015c4:	482c      	ldr	r0, [pc, #176]	; (8001678 <_vfiprintf_r+0x250>)
 80015c6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80015ca:	2206      	movs	r2, #6
 80015cc:	f7fe fe20 	bl	8000210 <memchr>
 80015d0:	2800      	cmp	r0, #0
 80015d2:	d03f      	beq.n	8001654 <_vfiprintf_r+0x22c>
 80015d4:	4b29      	ldr	r3, [pc, #164]	; (800167c <_vfiprintf_r+0x254>)
 80015d6:	bb1b      	cbnz	r3, 8001620 <_vfiprintf_r+0x1f8>
 80015d8:	9b03      	ldr	r3, [sp, #12]
 80015da:	3307      	adds	r3, #7
 80015dc:	f023 0307 	bic.w	r3, r3, #7
 80015e0:	3308      	adds	r3, #8
 80015e2:	9303      	str	r3, [sp, #12]
 80015e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80015e6:	443b      	add	r3, r7
 80015e8:	9309      	str	r3, [sp, #36]	; 0x24
 80015ea:	e767      	b.n	80014bc <_vfiprintf_r+0x94>
 80015ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80015f0:	460c      	mov	r4, r1
 80015f2:	2001      	movs	r0, #1
 80015f4:	e7a5      	b.n	8001542 <_vfiprintf_r+0x11a>
 80015f6:	2300      	movs	r3, #0
 80015f8:	3401      	adds	r4, #1
 80015fa:	9305      	str	r3, [sp, #20]
 80015fc:	4619      	mov	r1, r3
 80015fe:	f04f 0c0a 	mov.w	ip, #10
 8001602:	4620      	mov	r0, r4
 8001604:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001608:	3a30      	subs	r2, #48	; 0x30
 800160a:	2a09      	cmp	r2, #9
 800160c:	d903      	bls.n	8001616 <_vfiprintf_r+0x1ee>
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0c5      	beq.n	800159e <_vfiprintf_r+0x176>
 8001612:	9105      	str	r1, [sp, #20]
 8001614:	e7c3      	b.n	800159e <_vfiprintf_r+0x176>
 8001616:	fb0c 2101 	mla	r1, ip, r1, r2
 800161a:	4604      	mov	r4, r0
 800161c:	2301      	movs	r3, #1
 800161e:	e7f0      	b.n	8001602 <_vfiprintf_r+0x1da>
 8001620:	ab03      	add	r3, sp, #12
 8001622:	9300      	str	r3, [sp, #0]
 8001624:	462a      	mov	r2, r5
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <_vfiprintf_r+0x258>)
 8001628:	a904      	add	r1, sp, #16
 800162a:	4630      	mov	r0, r6
 800162c:	f3af 8000 	nop.w
 8001630:	4607      	mov	r7, r0
 8001632:	1c78      	adds	r0, r7, #1
 8001634:	d1d6      	bne.n	80015e4 <_vfiprintf_r+0x1bc>
 8001636:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001638:	07d9      	lsls	r1, r3, #31
 800163a:	d405      	bmi.n	8001648 <_vfiprintf_r+0x220>
 800163c:	89ab      	ldrh	r3, [r5, #12]
 800163e:	059a      	lsls	r2, r3, #22
 8001640:	d402      	bmi.n	8001648 <_vfiprintf_r+0x220>
 8001642:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001644:	f7ff fcd5 	bl	8000ff2 <__retarget_lock_release_recursive>
 8001648:	89ab      	ldrh	r3, [r5, #12]
 800164a:	065b      	lsls	r3, r3, #25
 800164c:	f53f af12 	bmi.w	8001474 <_vfiprintf_r+0x4c>
 8001650:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001652:	e711      	b.n	8001478 <_vfiprintf_r+0x50>
 8001654:	ab03      	add	r3, sp, #12
 8001656:	9300      	str	r3, [sp, #0]
 8001658:	462a      	mov	r2, r5
 800165a:	4b09      	ldr	r3, [pc, #36]	; (8001680 <_vfiprintf_r+0x258>)
 800165c:	a904      	add	r1, sp, #16
 800165e:	4630      	mov	r0, r6
 8001660:	f000 f880 	bl	8001764 <_printf_i>
 8001664:	e7e4      	b.n	8001630 <_vfiprintf_r+0x208>
 8001666:	bf00      	nop
 8001668:	080020e0 	.word	0x080020e0
 800166c:	08002100 	.word	0x08002100
 8001670:	080020c0 	.word	0x080020c0
 8001674:	08002120 	.word	0x08002120
 8001678:	0800212a 	.word	0x0800212a
 800167c:	00000000 	.word	0x00000000
 8001680:	08001403 	.word	0x08001403
 8001684:	08002126 	.word	0x08002126

08001688 <_printf_common>:
 8001688:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800168c:	4616      	mov	r6, r2
 800168e:	4699      	mov	r9, r3
 8001690:	688a      	ldr	r2, [r1, #8]
 8001692:	690b      	ldr	r3, [r1, #16]
 8001694:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001698:	4293      	cmp	r3, r2
 800169a:	bfb8      	it	lt
 800169c:	4613      	movlt	r3, r2
 800169e:	6033      	str	r3, [r6, #0]
 80016a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80016a4:	4607      	mov	r7, r0
 80016a6:	460c      	mov	r4, r1
 80016a8:	b10a      	cbz	r2, 80016ae <_printf_common+0x26>
 80016aa:	3301      	adds	r3, #1
 80016ac:	6033      	str	r3, [r6, #0]
 80016ae:	6823      	ldr	r3, [r4, #0]
 80016b0:	0699      	lsls	r1, r3, #26
 80016b2:	bf42      	ittt	mi
 80016b4:	6833      	ldrmi	r3, [r6, #0]
 80016b6:	3302      	addmi	r3, #2
 80016b8:	6033      	strmi	r3, [r6, #0]
 80016ba:	6825      	ldr	r5, [r4, #0]
 80016bc:	f015 0506 	ands.w	r5, r5, #6
 80016c0:	d106      	bne.n	80016d0 <_printf_common+0x48>
 80016c2:	f104 0a19 	add.w	sl, r4, #25
 80016c6:	68e3      	ldr	r3, [r4, #12]
 80016c8:	6832      	ldr	r2, [r6, #0]
 80016ca:	1a9b      	subs	r3, r3, r2
 80016cc:	42ab      	cmp	r3, r5
 80016ce:	dc26      	bgt.n	800171e <_printf_common+0x96>
 80016d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80016d4:	1e13      	subs	r3, r2, #0
 80016d6:	6822      	ldr	r2, [r4, #0]
 80016d8:	bf18      	it	ne
 80016da:	2301      	movne	r3, #1
 80016dc:	0692      	lsls	r2, r2, #26
 80016de:	d42b      	bmi.n	8001738 <_printf_common+0xb0>
 80016e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80016e4:	4649      	mov	r1, r9
 80016e6:	4638      	mov	r0, r7
 80016e8:	47c0      	blx	r8
 80016ea:	3001      	adds	r0, #1
 80016ec:	d01e      	beq.n	800172c <_printf_common+0xa4>
 80016ee:	6823      	ldr	r3, [r4, #0]
 80016f0:	68e5      	ldr	r5, [r4, #12]
 80016f2:	6832      	ldr	r2, [r6, #0]
 80016f4:	f003 0306 	and.w	r3, r3, #6
 80016f8:	2b04      	cmp	r3, #4
 80016fa:	bf08      	it	eq
 80016fc:	1aad      	subeq	r5, r5, r2
 80016fe:	68a3      	ldr	r3, [r4, #8]
 8001700:	6922      	ldr	r2, [r4, #16]
 8001702:	bf0c      	ite	eq
 8001704:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001708:	2500      	movne	r5, #0
 800170a:	4293      	cmp	r3, r2
 800170c:	bfc4      	itt	gt
 800170e:	1a9b      	subgt	r3, r3, r2
 8001710:	18ed      	addgt	r5, r5, r3
 8001712:	2600      	movs	r6, #0
 8001714:	341a      	adds	r4, #26
 8001716:	42b5      	cmp	r5, r6
 8001718:	d11a      	bne.n	8001750 <_printf_common+0xc8>
 800171a:	2000      	movs	r0, #0
 800171c:	e008      	b.n	8001730 <_printf_common+0xa8>
 800171e:	2301      	movs	r3, #1
 8001720:	4652      	mov	r2, sl
 8001722:	4649      	mov	r1, r9
 8001724:	4638      	mov	r0, r7
 8001726:	47c0      	blx	r8
 8001728:	3001      	adds	r0, #1
 800172a:	d103      	bne.n	8001734 <_printf_common+0xac>
 800172c:	f04f 30ff 	mov.w	r0, #4294967295
 8001730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001734:	3501      	adds	r5, #1
 8001736:	e7c6      	b.n	80016c6 <_printf_common+0x3e>
 8001738:	18e1      	adds	r1, r4, r3
 800173a:	1c5a      	adds	r2, r3, #1
 800173c:	2030      	movs	r0, #48	; 0x30
 800173e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001742:	4422      	add	r2, r4
 8001744:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001748:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800174c:	3302      	adds	r3, #2
 800174e:	e7c7      	b.n	80016e0 <_printf_common+0x58>
 8001750:	2301      	movs	r3, #1
 8001752:	4622      	mov	r2, r4
 8001754:	4649      	mov	r1, r9
 8001756:	4638      	mov	r0, r7
 8001758:	47c0      	blx	r8
 800175a:	3001      	adds	r0, #1
 800175c:	d0e6      	beq.n	800172c <_printf_common+0xa4>
 800175e:	3601      	adds	r6, #1
 8001760:	e7d9      	b.n	8001716 <_printf_common+0x8e>
	...

08001764 <_printf_i>:
 8001764:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001768:	7e0f      	ldrb	r7, [r1, #24]
 800176a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800176c:	2f78      	cmp	r7, #120	; 0x78
 800176e:	4691      	mov	r9, r2
 8001770:	4680      	mov	r8, r0
 8001772:	460c      	mov	r4, r1
 8001774:	469a      	mov	sl, r3
 8001776:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800177a:	d807      	bhi.n	800178c <_printf_i+0x28>
 800177c:	2f62      	cmp	r7, #98	; 0x62
 800177e:	d80a      	bhi.n	8001796 <_printf_i+0x32>
 8001780:	2f00      	cmp	r7, #0
 8001782:	f000 80d8 	beq.w	8001936 <_printf_i+0x1d2>
 8001786:	2f58      	cmp	r7, #88	; 0x58
 8001788:	f000 80a3 	beq.w	80018d2 <_printf_i+0x16e>
 800178c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001790:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001794:	e03a      	b.n	800180c <_printf_i+0xa8>
 8001796:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800179a:	2b15      	cmp	r3, #21
 800179c:	d8f6      	bhi.n	800178c <_printf_i+0x28>
 800179e:	a101      	add	r1, pc, #4	; (adr r1, 80017a4 <_printf_i+0x40>)
 80017a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80017a4:	080017fd 	.word	0x080017fd
 80017a8:	08001811 	.word	0x08001811
 80017ac:	0800178d 	.word	0x0800178d
 80017b0:	0800178d 	.word	0x0800178d
 80017b4:	0800178d 	.word	0x0800178d
 80017b8:	0800178d 	.word	0x0800178d
 80017bc:	08001811 	.word	0x08001811
 80017c0:	0800178d 	.word	0x0800178d
 80017c4:	0800178d 	.word	0x0800178d
 80017c8:	0800178d 	.word	0x0800178d
 80017cc:	0800178d 	.word	0x0800178d
 80017d0:	0800191d 	.word	0x0800191d
 80017d4:	08001841 	.word	0x08001841
 80017d8:	080018ff 	.word	0x080018ff
 80017dc:	0800178d 	.word	0x0800178d
 80017e0:	0800178d 	.word	0x0800178d
 80017e4:	0800193f 	.word	0x0800193f
 80017e8:	0800178d 	.word	0x0800178d
 80017ec:	08001841 	.word	0x08001841
 80017f0:	0800178d 	.word	0x0800178d
 80017f4:	0800178d 	.word	0x0800178d
 80017f8:	08001907 	.word	0x08001907
 80017fc:	682b      	ldr	r3, [r5, #0]
 80017fe:	1d1a      	adds	r2, r3, #4
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	602a      	str	r2, [r5, #0]
 8001804:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001808:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800180c:	2301      	movs	r3, #1
 800180e:	e0a3      	b.n	8001958 <_printf_i+0x1f4>
 8001810:	6820      	ldr	r0, [r4, #0]
 8001812:	6829      	ldr	r1, [r5, #0]
 8001814:	0606      	lsls	r6, r0, #24
 8001816:	f101 0304 	add.w	r3, r1, #4
 800181a:	d50a      	bpl.n	8001832 <_printf_i+0xce>
 800181c:	680e      	ldr	r6, [r1, #0]
 800181e:	602b      	str	r3, [r5, #0]
 8001820:	2e00      	cmp	r6, #0
 8001822:	da03      	bge.n	800182c <_printf_i+0xc8>
 8001824:	232d      	movs	r3, #45	; 0x2d
 8001826:	4276      	negs	r6, r6
 8001828:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800182c:	485e      	ldr	r0, [pc, #376]	; (80019a8 <_printf_i+0x244>)
 800182e:	230a      	movs	r3, #10
 8001830:	e019      	b.n	8001866 <_printf_i+0x102>
 8001832:	680e      	ldr	r6, [r1, #0]
 8001834:	602b      	str	r3, [r5, #0]
 8001836:	f010 0f40 	tst.w	r0, #64	; 0x40
 800183a:	bf18      	it	ne
 800183c:	b236      	sxthne	r6, r6
 800183e:	e7ef      	b.n	8001820 <_printf_i+0xbc>
 8001840:	682b      	ldr	r3, [r5, #0]
 8001842:	6820      	ldr	r0, [r4, #0]
 8001844:	1d19      	adds	r1, r3, #4
 8001846:	6029      	str	r1, [r5, #0]
 8001848:	0601      	lsls	r1, r0, #24
 800184a:	d501      	bpl.n	8001850 <_printf_i+0xec>
 800184c:	681e      	ldr	r6, [r3, #0]
 800184e:	e002      	b.n	8001856 <_printf_i+0xf2>
 8001850:	0646      	lsls	r6, r0, #25
 8001852:	d5fb      	bpl.n	800184c <_printf_i+0xe8>
 8001854:	881e      	ldrh	r6, [r3, #0]
 8001856:	4854      	ldr	r0, [pc, #336]	; (80019a8 <_printf_i+0x244>)
 8001858:	2f6f      	cmp	r7, #111	; 0x6f
 800185a:	bf0c      	ite	eq
 800185c:	2308      	moveq	r3, #8
 800185e:	230a      	movne	r3, #10
 8001860:	2100      	movs	r1, #0
 8001862:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001866:	6865      	ldr	r5, [r4, #4]
 8001868:	60a5      	str	r5, [r4, #8]
 800186a:	2d00      	cmp	r5, #0
 800186c:	bfa2      	ittt	ge
 800186e:	6821      	ldrge	r1, [r4, #0]
 8001870:	f021 0104 	bicge.w	r1, r1, #4
 8001874:	6021      	strge	r1, [r4, #0]
 8001876:	b90e      	cbnz	r6, 800187c <_printf_i+0x118>
 8001878:	2d00      	cmp	r5, #0
 800187a:	d04d      	beq.n	8001918 <_printf_i+0x1b4>
 800187c:	4615      	mov	r5, r2
 800187e:	fbb6 f1f3 	udiv	r1, r6, r3
 8001882:	fb03 6711 	mls	r7, r3, r1, r6
 8001886:	5dc7      	ldrb	r7, [r0, r7]
 8001888:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800188c:	4637      	mov	r7, r6
 800188e:	42bb      	cmp	r3, r7
 8001890:	460e      	mov	r6, r1
 8001892:	d9f4      	bls.n	800187e <_printf_i+0x11a>
 8001894:	2b08      	cmp	r3, #8
 8001896:	d10b      	bne.n	80018b0 <_printf_i+0x14c>
 8001898:	6823      	ldr	r3, [r4, #0]
 800189a:	07de      	lsls	r6, r3, #31
 800189c:	d508      	bpl.n	80018b0 <_printf_i+0x14c>
 800189e:	6923      	ldr	r3, [r4, #16]
 80018a0:	6861      	ldr	r1, [r4, #4]
 80018a2:	4299      	cmp	r1, r3
 80018a4:	bfde      	ittt	le
 80018a6:	2330      	movle	r3, #48	; 0x30
 80018a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80018ac:	f105 35ff 	addle.w	r5, r5, #4294967295
 80018b0:	1b52      	subs	r2, r2, r5
 80018b2:	6122      	str	r2, [r4, #16]
 80018b4:	f8cd a000 	str.w	sl, [sp]
 80018b8:	464b      	mov	r3, r9
 80018ba:	aa03      	add	r2, sp, #12
 80018bc:	4621      	mov	r1, r4
 80018be:	4640      	mov	r0, r8
 80018c0:	f7ff fee2 	bl	8001688 <_printf_common>
 80018c4:	3001      	adds	r0, #1
 80018c6:	d14c      	bne.n	8001962 <_printf_i+0x1fe>
 80018c8:	f04f 30ff 	mov.w	r0, #4294967295
 80018cc:	b004      	add	sp, #16
 80018ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80018d2:	4835      	ldr	r0, [pc, #212]	; (80019a8 <_printf_i+0x244>)
 80018d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80018d8:	6829      	ldr	r1, [r5, #0]
 80018da:	6823      	ldr	r3, [r4, #0]
 80018dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80018e0:	6029      	str	r1, [r5, #0]
 80018e2:	061d      	lsls	r5, r3, #24
 80018e4:	d514      	bpl.n	8001910 <_printf_i+0x1ac>
 80018e6:	07df      	lsls	r7, r3, #31
 80018e8:	bf44      	itt	mi
 80018ea:	f043 0320 	orrmi.w	r3, r3, #32
 80018ee:	6023      	strmi	r3, [r4, #0]
 80018f0:	b91e      	cbnz	r6, 80018fa <_printf_i+0x196>
 80018f2:	6823      	ldr	r3, [r4, #0]
 80018f4:	f023 0320 	bic.w	r3, r3, #32
 80018f8:	6023      	str	r3, [r4, #0]
 80018fa:	2310      	movs	r3, #16
 80018fc:	e7b0      	b.n	8001860 <_printf_i+0xfc>
 80018fe:	6823      	ldr	r3, [r4, #0]
 8001900:	f043 0320 	orr.w	r3, r3, #32
 8001904:	6023      	str	r3, [r4, #0]
 8001906:	2378      	movs	r3, #120	; 0x78
 8001908:	4828      	ldr	r0, [pc, #160]	; (80019ac <_printf_i+0x248>)
 800190a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800190e:	e7e3      	b.n	80018d8 <_printf_i+0x174>
 8001910:	0659      	lsls	r1, r3, #25
 8001912:	bf48      	it	mi
 8001914:	b2b6      	uxthmi	r6, r6
 8001916:	e7e6      	b.n	80018e6 <_printf_i+0x182>
 8001918:	4615      	mov	r5, r2
 800191a:	e7bb      	b.n	8001894 <_printf_i+0x130>
 800191c:	682b      	ldr	r3, [r5, #0]
 800191e:	6826      	ldr	r6, [r4, #0]
 8001920:	6961      	ldr	r1, [r4, #20]
 8001922:	1d18      	adds	r0, r3, #4
 8001924:	6028      	str	r0, [r5, #0]
 8001926:	0635      	lsls	r5, r6, #24
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	d501      	bpl.n	8001930 <_printf_i+0x1cc>
 800192c:	6019      	str	r1, [r3, #0]
 800192e:	e002      	b.n	8001936 <_printf_i+0x1d2>
 8001930:	0670      	lsls	r0, r6, #25
 8001932:	d5fb      	bpl.n	800192c <_printf_i+0x1c8>
 8001934:	8019      	strh	r1, [r3, #0]
 8001936:	2300      	movs	r3, #0
 8001938:	6123      	str	r3, [r4, #16]
 800193a:	4615      	mov	r5, r2
 800193c:	e7ba      	b.n	80018b4 <_printf_i+0x150>
 800193e:	682b      	ldr	r3, [r5, #0]
 8001940:	1d1a      	adds	r2, r3, #4
 8001942:	602a      	str	r2, [r5, #0]
 8001944:	681d      	ldr	r5, [r3, #0]
 8001946:	6862      	ldr	r2, [r4, #4]
 8001948:	2100      	movs	r1, #0
 800194a:	4628      	mov	r0, r5
 800194c:	f7fe fc60 	bl	8000210 <memchr>
 8001950:	b108      	cbz	r0, 8001956 <_printf_i+0x1f2>
 8001952:	1b40      	subs	r0, r0, r5
 8001954:	6060      	str	r0, [r4, #4]
 8001956:	6863      	ldr	r3, [r4, #4]
 8001958:	6123      	str	r3, [r4, #16]
 800195a:	2300      	movs	r3, #0
 800195c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001960:	e7a8      	b.n	80018b4 <_printf_i+0x150>
 8001962:	6923      	ldr	r3, [r4, #16]
 8001964:	462a      	mov	r2, r5
 8001966:	4649      	mov	r1, r9
 8001968:	4640      	mov	r0, r8
 800196a:	47d0      	blx	sl
 800196c:	3001      	adds	r0, #1
 800196e:	d0ab      	beq.n	80018c8 <_printf_i+0x164>
 8001970:	6823      	ldr	r3, [r4, #0]
 8001972:	079b      	lsls	r3, r3, #30
 8001974:	d413      	bmi.n	800199e <_printf_i+0x23a>
 8001976:	68e0      	ldr	r0, [r4, #12]
 8001978:	9b03      	ldr	r3, [sp, #12]
 800197a:	4298      	cmp	r0, r3
 800197c:	bfb8      	it	lt
 800197e:	4618      	movlt	r0, r3
 8001980:	e7a4      	b.n	80018cc <_printf_i+0x168>
 8001982:	2301      	movs	r3, #1
 8001984:	4632      	mov	r2, r6
 8001986:	4649      	mov	r1, r9
 8001988:	4640      	mov	r0, r8
 800198a:	47d0      	blx	sl
 800198c:	3001      	adds	r0, #1
 800198e:	d09b      	beq.n	80018c8 <_printf_i+0x164>
 8001990:	3501      	adds	r5, #1
 8001992:	68e3      	ldr	r3, [r4, #12]
 8001994:	9903      	ldr	r1, [sp, #12]
 8001996:	1a5b      	subs	r3, r3, r1
 8001998:	42ab      	cmp	r3, r5
 800199a:	dcf2      	bgt.n	8001982 <_printf_i+0x21e>
 800199c:	e7eb      	b.n	8001976 <_printf_i+0x212>
 800199e:	2500      	movs	r5, #0
 80019a0:	f104 0619 	add.w	r6, r4, #25
 80019a4:	e7f5      	b.n	8001992 <_printf_i+0x22e>
 80019a6:	bf00      	nop
 80019a8:	08002131 	.word	0x08002131
 80019ac:	08002142 	.word	0x08002142

080019b0 <_sbrk_r>:
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	4d06      	ldr	r5, [pc, #24]	; (80019cc <_sbrk_r+0x1c>)
 80019b4:	2300      	movs	r3, #0
 80019b6:	4604      	mov	r4, r0
 80019b8:	4608      	mov	r0, r1
 80019ba:	602b      	str	r3, [r5, #0]
 80019bc:	f7ff f856 	bl	8000a6c <_sbrk>
 80019c0:	1c43      	adds	r3, r0, #1
 80019c2:	d102      	bne.n	80019ca <_sbrk_r+0x1a>
 80019c4:	682b      	ldr	r3, [r5, #0]
 80019c6:	b103      	cbz	r3, 80019ca <_sbrk_r+0x1a>
 80019c8:	6023      	str	r3, [r4, #0]
 80019ca:	bd38      	pop	{r3, r4, r5, pc}
 80019cc:	200000f8 	.word	0x200000f8

080019d0 <__sread>:
 80019d0:	b510      	push	{r4, lr}
 80019d2:	460c      	mov	r4, r1
 80019d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80019d8:	f000 fb0a 	bl	8001ff0 <_read_r>
 80019dc:	2800      	cmp	r0, #0
 80019de:	bfab      	itete	ge
 80019e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80019e2:	89a3      	ldrhlt	r3, [r4, #12]
 80019e4:	181b      	addge	r3, r3, r0
 80019e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80019ea:	bfac      	ite	ge
 80019ec:	6563      	strge	r3, [r4, #84]	; 0x54
 80019ee:	81a3      	strhlt	r3, [r4, #12]
 80019f0:	bd10      	pop	{r4, pc}

080019f2 <__swrite>:
 80019f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80019f6:	461f      	mov	r7, r3
 80019f8:	898b      	ldrh	r3, [r1, #12]
 80019fa:	05db      	lsls	r3, r3, #23
 80019fc:	4605      	mov	r5, r0
 80019fe:	460c      	mov	r4, r1
 8001a00:	4616      	mov	r6, r2
 8001a02:	d505      	bpl.n	8001a10 <__swrite+0x1e>
 8001a04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a08:	2302      	movs	r3, #2
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	f000 f9c8 	bl	8001da0 <_lseek_r>
 8001a10:	89a3      	ldrh	r3, [r4, #12]
 8001a12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001a16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001a1a:	81a3      	strh	r3, [r4, #12]
 8001a1c:	4632      	mov	r2, r6
 8001a1e:	463b      	mov	r3, r7
 8001a20:	4628      	mov	r0, r5
 8001a22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001a26:	f000 b869 	b.w	8001afc <_write_r>

08001a2a <__sseek>:
 8001a2a:	b510      	push	{r4, lr}
 8001a2c:	460c      	mov	r4, r1
 8001a2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a32:	f000 f9b5 	bl	8001da0 <_lseek_r>
 8001a36:	1c43      	adds	r3, r0, #1
 8001a38:	89a3      	ldrh	r3, [r4, #12]
 8001a3a:	bf15      	itete	ne
 8001a3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8001a3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8001a42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001a46:	81a3      	strheq	r3, [r4, #12]
 8001a48:	bf18      	it	ne
 8001a4a:	81a3      	strhne	r3, [r4, #12]
 8001a4c:	bd10      	pop	{r4, pc}

08001a4e <__sclose>:
 8001a4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a52:	f000 b8d3 	b.w	8001bfc <_close_r>
	...

08001a58 <__swbuf_r>:
 8001a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a5a:	460e      	mov	r6, r1
 8001a5c:	4614      	mov	r4, r2
 8001a5e:	4605      	mov	r5, r0
 8001a60:	b118      	cbz	r0, 8001a6a <__swbuf_r+0x12>
 8001a62:	6983      	ldr	r3, [r0, #24]
 8001a64:	b90b      	cbnz	r3, 8001a6a <__swbuf_r+0x12>
 8001a66:	f7ff fa25 	bl	8000eb4 <__sinit>
 8001a6a:	4b21      	ldr	r3, [pc, #132]	; (8001af0 <__swbuf_r+0x98>)
 8001a6c:	429c      	cmp	r4, r3
 8001a6e:	d12b      	bne.n	8001ac8 <__swbuf_r+0x70>
 8001a70:	686c      	ldr	r4, [r5, #4]
 8001a72:	69a3      	ldr	r3, [r4, #24]
 8001a74:	60a3      	str	r3, [r4, #8]
 8001a76:	89a3      	ldrh	r3, [r4, #12]
 8001a78:	071a      	lsls	r2, r3, #28
 8001a7a:	d52f      	bpl.n	8001adc <__swbuf_r+0x84>
 8001a7c:	6923      	ldr	r3, [r4, #16]
 8001a7e:	b36b      	cbz	r3, 8001adc <__swbuf_r+0x84>
 8001a80:	6923      	ldr	r3, [r4, #16]
 8001a82:	6820      	ldr	r0, [r4, #0]
 8001a84:	1ac0      	subs	r0, r0, r3
 8001a86:	6963      	ldr	r3, [r4, #20]
 8001a88:	b2f6      	uxtb	r6, r6
 8001a8a:	4283      	cmp	r3, r0
 8001a8c:	4637      	mov	r7, r6
 8001a8e:	dc04      	bgt.n	8001a9a <__swbuf_r+0x42>
 8001a90:	4621      	mov	r1, r4
 8001a92:	4628      	mov	r0, r5
 8001a94:	f000 f948 	bl	8001d28 <_fflush_r>
 8001a98:	bb30      	cbnz	r0, 8001ae8 <__swbuf_r+0x90>
 8001a9a:	68a3      	ldr	r3, [r4, #8]
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	60a3      	str	r3, [r4, #8]
 8001aa0:	6823      	ldr	r3, [r4, #0]
 8001aa2:	1c5a      	adds	r2, r3, #1
 8001aa4:	6022      	str	r2, [r4, #0]
 8001aa6:	701e      	strb	r6, [r3, #0]
 8001aa8:	6963      	ldr	r3, [r4, #20]
 8001aaa:	3001      	adds	r0, #1
 8001aac:	4283      	cmp	r3, r0
 8001aae:	d004      	beq.n	8001aba <__swbuf_r+0x62>
 8001ab0:	89a3      	ldrh	r3, [r4, #12]
 8001ab2:	07db      	lsls	r3, r3, #31
 8001ab4:	d506      	bpl.n	8001ac4 <__swbuf_r+0x6c>
 8001ab6:	2e0a      	cmp	r6, #10
 8001ab8:	d104      	bne.n	8001ac4 <__swbuf_r+0x6c>
 8001aba:	4621      	mov	r1, r4
 8001abc:	4628      	mov	r0, r5
 8001abe:	f000 f933 	bl	8001d28 <_fflush_r>
 8001ac2:	b988      	cbnz	r0, 8001ae8 <__swbuf_r+0x90>
 8001ac4:	4638      	mov	r0, r7
 8001ac6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001ac8:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <__swbuf_r+0x9c>)
 8001aca:	429c      	cmp	r4, r3
 8001acc:	d101      	bne.n	8001ad2 <__swbuf_r+0x7a>
 8001ace:	68ac      	ldr	r4, [r5, #8]
 8001ad0:	e7cf      	b.n	8001a72 <__swbuf_r+0x1a>
 8001ad2:	4b09      	ldr	r3, [pc, #36]	; (8001af8 <__swbuf_r+0xa0>)
 8001ad4:	429c      	cmp	r4, r3
 8001ad6:	bf08      	it	eq
 8001ad8:	68ec      	ldreq	r4, [r5, #12]
 8001ada:	e7ca      	b.n	8001a72 <__swbuf_r+0x1a>
 8001adc:	4621      	mov	r1, r4
 8001ade:	4628      	mov	r0, r5
 8001ae0:	f000 f81e 	bl	8001b20 <__swsetup_r>
 8001ae4:	2800      	cmp	r0, #0
 8001ae6:	d0cb      	beq.n	8001a80 <__swbuf_r+0x28>
 8001ae8:	f04f 37ff 	mov.w	r7, #4294967295
 8001aec:	e7ea      	b.n	8001ac4 <__swbuf_r+0x6c>
 8001aee:	bf00      	nop
 8001af0:	080020e0 	.word	0x080020e0
 8001af4:	08002100 	.word	0x08002100
 8001af8:	080020c0 	.word	0x080020c0

08001afc <_write_r>:
 8001afc:	b538      	push	{r3, r4, r5, lr}
 8001afe:	4d07      	ldr	r5, [pc, #28]	; (8001b1c <_write_r+0x20>)
 8001b00:	4604      	mov	r4, r0
 8001b02:	4608      	mov	r0, r1
 8001b04:	4611      	mov	r1, r2
 8001b06:	2200      	movs	r2, #0
 8001b08:	602a      	str	r2, [r5, #0]
 8001b0a:	461a      	mov	r2, r3
 8001b0c:	f7fe ff5d 	bl	80009ca <_write>
 8001b10:	1c43      	adds	r3, r0, #1
 8001b12:	d102      	bne.n	8001b1a <_write_r+0x1e>
 8001b14:	682b      	ldr	r3, [r5, #0]
 8001b16:	b103      	cbz	r3, 8001b1a <_write_r+0x1e>
 8001b18:	6023      	str	r3, [r4, #0]
 8001b1a:	bd38      	pop	{r3, r4, r5, pc}
 8001b1c:	200000f8 	.word	0x200000f8

08001b20 <__swsetup_r>:
 8001b20:	4b32      	ldr	r3, [pc, #200]	; (8001bec <__swsetup_r+0xcc>)
 8001b22:	b570      	push	{r4, r5, r6, lr}
 8001b24:	681d      	ldr	r5, [r3, #0]
 8001b26:	4606      	mov	r6, r0
 8001b28:	460c      	mov	r4, r1
 8001b2a:	b125      	cbz	r5, 8001b36 <__swsetup_r+0x16>
 8001b2c:	69ab      	ldr	r3, [r5, #24]
 8001b2e:	b913      	cbnz	r3, 8001b36 <__swsetup_r+0x16>
 8001b30:	4628      	mov	r0, r5
 8001b32:	f7ff f9bf 	bl	8000eb4 <__sinit>
 8001b36:	4b2e      	ldr	r3, [pc, #184]	; (8001bf0 <__swsetup_r+0xd0>)
 8001b38:	429c      	cmp	r4, r3
 8001b3a:	d10f      	bne.n	8001b5c <__swsetup_r+0x3c>
 8001b3c:	686c      	ldr	r4, [r5, #4]
 8001b3e:	89a3      	ldrh	r3, [r4, #12]
 8001b40:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001b44:	0719      	lsls	r1, r3, #28
 8001b46:	d42c      	bmi.n	8001ba2 <__swsetup_r+0x82>
 8001b48:	06dd      	lsls	r5, r3, #27
 8001b4a:	d411      	bmi.n	8001b70 <__swsetup_r+0x50>
 8001b4c:	2309      	movs	r3, #9
 8001b4e:	6033      	str	r3, [r6, #0]
 8001b50:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001b54:	81a3      	strh	r3, [r4, #12]
 8001b56:	f04f 30ff 	mov.w	r0, #4294967295
 8001b5a:	e03e      	b.n	8001bda <__swsetup_r+0xba>
 8001b5c:	4b25      	ldr	r3, [pc, #148]	; (8001bf4 <__swsetup_r+0xd4>)
 8001b5e:	429c      	cmp	r4, r3
 8001b60:	d101      	bne.n	8001b66 <__swsetup_r+0x46>
 8001b62:	68ac      	ldr	r4, [r5, #8]
 8001b64:	e7eb      	b.n	8001b3e <__swsetup_r+0x1e>
 8001b66:	4b24      	ldr	r3, [pc, #144]	; (8001bf8 <__swsetup_r+0xd8>)
 8001b68:	429c      	cmp	r4, r3
 8001b6a:	bf08      	it	eq
 8001b6c:	68ec      	ldreq	r4, [r5, #12]
 8001b6e:	e7e6      	b.n	8001b3e <__swsetup_r+0x1e>
 8001b70:	0758      	lsls	r0, r3, #29
 8001b72:	d512      	bpl.n	8001b9a <__swsetup_r+0x7a>
 8001b74:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001b76:	b141      	cbz	r1, 8001b8a <__swsetup_r+0x6a>
 8001b78:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001b7c:	4299      	cmp	r1, r3
 8001b7e:	d002      	beq.n	8001b86 <__swsetup_r+0x66>
 8001b80:	4630      	mov	r0, r6
 8001b82:	f000 f9b9 	bl	8001ef8 <_free_r>
 8001b86:	2300      	movs	r3, #0
 8001b88:	6363      	str	r3, [r4, #52]	; 0x34
 8001b8a:	89a3      	ldrh	r3, [r4, #12]
 8001b8c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b90:	81a3      	strh	r3, [r4, #12]
 8001b92:	2300      	movs	r3, #0
 8001b94:	6063      	str	r3, [r4, #4]
 8001b96:	6923      	ldr	r3, [r4, #16]
 8001b98:	6023      	str	r3, [r4, #0]
 8001b9a:	89a3      	ldrh	r3, [r4, #12]
 8001b9c:	f043 0308 	orr.w	r3, r3, #8
 8001ba0:	81a3      	strh	r3, [r4, #12]
 8001ba2:	6923      	ldr	r3, [r4, #16]
 8001ba4:	b94b      	cbnz	r3, 8001bba <__swsetup_r+0x9a>
 8001ba6:	89a3      	ldrh	r3, [r4, #12]
 8001ba8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001bac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001bb0:	d003      	beq.n	8001bba <__swsetup_r+0x9a>
 8001bb2:	4621      	mov	r1, r4
 8001bb4:	4630      	mov	r0, r6
 8001bb6:	f000 f92b 	bl	8001e10 <__smakebuf_r>
 8001bba:	89a0      	ldrh	r0, [r4, #12]
 8001bbc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001bc0:	f010 0301 	ands.w	r3, r0, #1
 8001bc4:	d00a      	beq.n	8001bdc <__swsetup_r+0xbc>
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	60a3      	str	r3, [r4, #8]
 8001bca:	6963      	ldr	r3, [r4, #20]
 8001bcc:	425b      	negs	r3, r3
 8001bce:	61a3      	str	r3, [r4, #24]
 8001bd0:	6923      	ldr	r3, [r4, #16]
 8001bd2:	b943      	cbnz	r3, 8001be6 <__swsetup_r+0xc6>
 8001bd4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001bd8:	d1ba      	bne.n	8001b50 <__swsetup_r+0x30>
 8001bda:	bd70      	pop	{r4, r5, r6, pc}
 8001bdc:	0781      	lsls	r1, r0, #30
 8001bde:	bf58      	it	pl
 8001be0:	6963      	ldrpl	r3, [r4, #20]
 8001be2:	60a3      	str	r3, [r4, #8]
 8001be4:	e7f4      	b.n	8001bd0 <__swsetup_r+0xb0>
 8001be6:	2000      	movs	r0, #0
 8001be8:	e7f7      	b.n	8001bda <__swsetup_r+0xba>
 8001bea:	bf00      	nop
 8001bec:	20000000 	.word	0x20000000
 8001bf0:	080020e0 	.word	0x080020e0
 8001bf4:	08002100 	.word	0x08002100
 8001bf8:	080020c0 	.word	0x080020c0

08001bfc <_close_r>:
 8001bfc:	b538      	push	{r3, r4, r5, lr}
 8001bfe:	4d06      	ldr	r5, [pc, #24]	; (8001c18 <_close_r+0x1c>)
 8001c00:	2300      	movs	r3, #0
 8001c02:	4604      	mov	r4, r0
 8001c04:	4608      	mov	r0, r1
 8001c06:	602b      	str	r3, [r5, #0]
 8001c08:	f7fe fefb 	bl	8000a02 <_close>
 8001c0c:	1c43      	adds	r3, r0, #1
 8001c0e:	d102      	bne.n	8001c16 <_close_r+0x1a>
 8001c10:	682b      	ldr	r3, [r5, #0]
 8001c12:	b103      	cbz	r3, 8001c16 <_close_r+0x1a>
 8001c14:	6023      	str	r3, [r4, #0]
 8001c16:	bd38      	pop	{r3, r4, r5, pc}
 8001c18:	200000f8 	.word	0x200000f8

08001c1c <__sflush_r>:
 8001c1c:	898a      	ldrh	r2, [r1, #12]
 8001c1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c22:	4605      	mov	r5, r0
 8001c24:	0710      	lsls	r0, r2, #28
 8001c26:	460c      	mov	r4, r1
 8001c28:	d458      	bmi.n	8001cdc <__sflush_r+0xc0>
 8001c2a:	684b      	ldr	r3, [r1, #4]
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	dc05      	bgt.n	8001c3c <__sflush_r+0x20>
 8001c30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	dc02      	bgt.n	8001c3c <__sflush_r+0x20>
 8001c36:	2000      	movs	r0, #0
 8001c38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001c3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c3e:	2e00      	cmp	r6, #0
 8001c40:	d0f9      	beq.n	8001c36 <__sflush_r+0x1a>
 8001c42:	2300      	movs	r3, #0
 8001c44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001c48:	682f      	ldr	r7, [r5, #0]
 8001c4a:	602b      	str	r3, [r5, #0]
 8001c4c:	d032      	beq.n	8001cb4 <__sflush_r+0x98>
 8001c4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001c50:	89a3      	ldrh	r3, [r4, #12]
 8001c52:	075a      	lsls	r2, r3, #29
 8001c54:	d505      	bpl.n	8001c62 <__sflush_r+0x46>
 8001c56:	6863      	ldr	r3, [r4, #4]
 8001c58:	1ac0      	subs	r0, r0, r3
 8001c5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001c5c:	b10b      	cbz	r3, 8001c62 <__sflush_r+0x46>
 8001c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001c60:	1ac0      	subs	r0, r0, r3
 8001c62:	2300      	movs	r3, #0
 8001c64:	4602      	mov	r2, r0
 8001c66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001c68:	6a21      	ldr	r1, [r4, #32]
 8001c6a:	4628      	mov	r0, r5
 8001c6c:	47b0      	blx	r6
 8001c6e:	1c43      	adds	r3, r0, #1
 8001c70:	89a3      	ldrh	r3, [r4, #12]
 8001c72:	d106      	bne.n	8001c82 <__sflush_r+0x66>
 8001c74:	6829      	ldr	r1, [r5, #0]
 8001c76:	291d      	cmp	r1, #29
 8001c78:	d82c      	bhi.n	8001cd4 <__sflush_r+0xb8>
 8001c7a:	4a2a      	ldr	r2, [pc, #168]	; (8001d24 <__sflush_r+0x108>)
 8001c7c:	40ca      	lsrs	r2, r1
 8001c7e:	07d6      	lsls	r6, r2, #31
 8001c80:	d528      	bpl.n	8001cd4 <__sflush_r+0xb8>
 8001c82:	2200      	movs	r2, #0
 8001c84:	6062      	str	r2, [r4, #4]
 8001c86:	04d9      	lsls	r1, r3, #19
 8001c88:	6922      	ldr	r2, [r4, #16]
 8001c8a:	6022      	str	r2, [r4, #0]
 8001c8c:	d504      	bpl.n	8001c98 <__sflush_r+0x7c>
 8001c8e:	1c42      	adds	r2, r0, #1
 8001c90:	d101      	bne.n	8001c96 <__sflush_r+0x7a>
 8001c92:	682b      	ldr	r3, [r5, #0]
 8001c94:	b903      	cbnz	r3, 8001c98 <__sflush_r+0x7c>
 8001c96:	6560      	str	r0, [r4, #84]	; 0x54
 8001c98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001c9a:	602f      	str	r7, [r5, #0]
 8001c9c:	2900      	cmp	r1, #0
 8001c9e:	d0ca      	beq.n	8001c36 <__sflush_r+0x1a>
 8001ca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001ca4:	4299      	cmp	r1, r3
 8001ca6:	d002      	beq.n	8001cae <__sflush_r+0x92>
 8001ca8:	4628      	mov	r0, r5
 8001caa:	f000 f925 	bl	8001ef8 <_free_r>
 8001cae:	2000      	movs	r0, #0
 8001cb0:	6360      	str	r0, [r4, #52]	; 0x34
 8001cb2:	e7c1      	b.n	8001c38 <__sflush_r+0x1c>
 8001cb4:	6a21      	ldr	r1, [r4, #32]
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	4628      	mov	r0, r5
 8001cba:	47b0      	blx	r6
 8001cbc:	1c41      	adds	r1, r0, #1
 8001cbe:	d1c7      	bne.n	8001c50 <__sflush_r+0x34>
 8001cc0:	682b      	ldr	r3, [r5, #0]
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0c4      	beq.n	8001c50 <__sflush_r+0x34>
 8001cc6:	2b1d      	cmp	r3, #29
 8001cc8:	d001      	beq.n	8001cce <__sflush_r+0xb2>
 8001cca:	2b16      	cmp	r3, #22
 8001ccc:	d101      	bne.n	8001cd2 <__sflush_r+0xb6>
 8001cce:	602f      	str	r7, [r5, #0]
 8001cd0:	e7b1      	b.n	8001c36 <__sflush_r+0x1a>
 8001cd2:	89a3      	ldrh	r3, [r4, #12]
 8001cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001cd8:	81a3      	strh	r3, [r4, #12]
 8001cda:	e7ad      	b.n	8001c38 <__sflush_r+0x1c>
 8001cdc:	690f      	ldr	r7, [r1, #16]
 8001cde:	2f00      	cmp	r7, #0
 8001ce0:	d0a9      	beq.n	8001c36 <__sflush_r+0x1a>
 8001ce2:	0793      	lsls	r3, r2, #30
 8001ce4:	680e      	ldr	r6, [r1, #0]
 8001ce6:	bf08      	it	eq
 8001ce8:	694b      	ldreq	r3, [r1, #20]
 8001cea:	600f      	str	r7, [r1, #0]
 8001cec:	bf18      	it	ne
 8001cee:	2300      	movne	r3, #0
 8001cf0:	eba6 0807 	sub.w	r8, r6, r7
 8001cf4:	608b      	str	r3, [r1, #8]
 8001cf6:	f1b8 0f00 	cmp.w	r8, #0
 8001cfa:	dd9c      	ble.n	8001c36 <__sflush_r+0x1a>
 8001cfc:	6a21      	ldr	r1, [r4, #32]
 8001cfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001d00:	4643      	mov	r3, r8
 8001d02:	463a      	mov	r2, r7
 8001d04:	4628      	mov	r0, r5
 8001d06:	47b0      	blx	r6
 8001d08:	2800      	cmp	r0, #0
 8001d0a:	dc06      	bgt.n	8001d1a <__sflush_r+0xfe>
 8001d0c:	89a3      	ldrh	r3, [r4, #12]
 8001d0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d12:	81a3      	strh	r3, [r4, #12]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	e78e      	b.n	8001c38 <__sflush_r+0x1c>
 8001d1a:	4407      	add	r7, r0
 8001d1c:	eba8 0800 	sub.w	r8, r8, r0
 8001d20:	e7e9      	b.n	8001cf6 <__sflush_r+0xda>
 8001d22:	bf00      	nop
 8001d24:	20400001 	.word	0x20400001

08001d28 <_fflush_r>:
 8001d28:	b538      	push	{r3, r4, r5, lr}
 8001d2a:	690b      	ldr	r3, [r1, #16]
 8001d2c:	4605      	mov	r5, r0
 8001d2e:	460c      	mov	r4, r1
 8001d30:	b913      	cbnz	r3, 8001d38 <_fflush_r+0x10>
 8001d32:	2500      	movs	r5, #0
 8001d34:	4628      	mov	r0, r5
 8001d36:	bd38      	pop	{r3, r4, r5, pc}
 8001d38:	b118      	cbz	r0, 8001d42 <_fflush_r+0x1a>
 8001d3a:	6983      	ldr	r3, [r0, #24]
 8001d3c:	b90b      	cbnz	r3, 8001d42 <_fflush_r+0x1a>
 8001d3e:	f7ff f8b9 	bl	8000eb4 <__sinit>
 8001d42:	4b14      	ldr	r3, [pc, #80]	; (8001d94 <_fflush_r+0x6c>)
 8001d44:	429c      	cmp	r4, r3
 8001d46:	d11b      	bne.n	8001d80 <_fflush_r+0x58>
 8001d48:	686c      	ldr	r4, [r5, #4]
 8001d4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d0ef      	beq.n	8001d32 <_fflush_r+0xa>
 8001d52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001d54:	07d0      	lsls	r0, r2, #31
 8001d56:	d404      	bmi.n	8001d62 <_fflush_r+0x3a>
 8001d58:	0599      	lsls	r1, r3, #22
 8001d5a:	d402      	bmi.n	8001d62 <_fflush_r+0x3a>
 8001d5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d5e:	f7ff f947 	bl	8000ff0 <__retarget_lock_acquire_recursive>
 8001d62:	4628      	mov	r0, r5
 8001d64:	4621      	mov	r1, r4
 8001d66:	f7ff ff59 	bl	8001c1c <__sflush_r>
 8001d6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001d6c:	07da      	lsls	r2, r3, #31
 8001d6e:	4605      	mov	r5, r0
 8001d70:	d4e0      	bmi.n	8001d34 <_fflush_r+0xc>
 8001d72:	89a3      	ldrh	r3, [r4, #12]
 8001d74:	059b      	lsls	r3, r3, #22
 8001d76:	d4dd      	bmi.n	8001d34 <_fflush_r+0xc>
 8001d78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001d7a:	f7ff f93a 	bl	8000ff2 <__retarget_lock_release_recursive>
 8001d7e:	e7d9      	b.n	8001d34 <_fflush_r+0xc>
 8001d80:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <_fflush_r+0x70>)
 8001d82:	429c      	cmp	r4, r3
 8001d84:	d101      	bne.n	8001d8a <_fflush_r+0x62>
 8001d86:	68ac      	ldr	r4, [r5, #8]
 8001d88:	e7df      	b.n	8001d4a <_fflush_r+0x22>
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <_fflush_r+0x74>)
 8001d8c:	429c      	cmp	r4, r3
 8001d8e:	bf08      	it	eq
 8001d90:	68ec      	ldreq	r4, [r5, #12]
 8001d92:	e7da      	b.n	8001d4a <_fflush_r+0x22>
 8001d94:	080020e0 	.word	0x080020e0
 8001d98:	08002100 	.word	0x08002100
 8001d9c:	080020c0 	.word	0x080020c0

08001da0 <_lseek_r>:
 8001da0:	b538      	push	{r3, r4, r5, lr}
 8001da2:	4d07      	ldr	r5, [pc, #28]	; (8001dc0 <_lseek_r+0x20>)
 8001da4:	4604      	mov	r4, r0
 8001da6:	4608      	mov	r0, r1
 8001da8:	4611      	mov	r1, r2
 8001daa:	2200      	movs	r2, #0
 8001dac:	602a      	str	r2, [r5, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	f7fe fe4e 	bl	8000a50 <_lseek>
 8001db4:	1c43      	adds	r3, r0, #1
 8001db6:	d102      	bne.n	8001dbe <_lseek_r+0x1e>
 8001db8:	682b      	ldr	r3, [r5, #0]
 8001dba:	b103      	cbz	r3, 8001dbe <_lseek_r+0x1e>
 8001dbc:	6023      	str	r3, [r4, #0]
 8001dbe:	bd38      	pop	{r3, r4, r5, pc}
 8001dc0:	200000f8 	.word	0x200000f8

08001dc4 <__swhatbuf_r>:
 8001dc4:	b570      	push	{r4, r5, r6, lr}
 8001dc6:	460e      	mov	r6, r1
 8001dc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001dcc:	2900      	cmp	r1, #0
 8001dce:	b096      	sub	sp, #88	; 0x58
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	461d      	mov	r5, r3
 8001dd4:	da08      	bge.n	8001de8 <__swhatbuf_r+0x24>
 8001dd6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001dda:	2200      	movs	r2, #0
 8001ddc:	602a      	str	r2, [r5, #0]
 8001dde:	061a      	lsls	r2, r3, #24
 8001de0:	d410      	bmi.n	8001e04 <__swhatbuf_r+0x40>
 8001de2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de6:	e00e      	b.n	8001e06 <__swhatbuf_r+0x42>
 8001de8:	466a      	mov	r2, sp
 8001dea:	f000 f913 	bl	8002014 <_fstat_r>
 8001dee:	2800      	cmp	r0, #0
 8001df0:	dbf1      	blt.n	8001dd6 <__swhatbuf_r+0x12>
 8001df2:	9a01      	ldr	r2, [sp, #4]
 8001df4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001df8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001dfc:	425a      	negs	r2, r3
 8001dfe:	415a      	adcs	r2, r3
 8001e00:	602a      	str	r2, [r5, #0]
 8001e02:	e7ee      	b.n	8001de2 <__swhatbuf_r+0x1e>
 8001e04:	2340      	movs	r3, #64	; 0x40
 8001e06:	2000      	movs	r0, #0
 8001e08:	6023      	str	r3, [r4, #0]
 8001e0a:	b016      	add	sp, #88	; 0x58
 8001e0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001e10 <__smakebuf_r>:
 8001e10:	898b      	ldrh	r3, [r1, #12]
 8001e12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001e14:	079d      	lsls	r5, r3, #30
 8001e16:	4606      	mov	r6, r0
 8001e18:	460c      	mov	r4, r1
 8001e1a:	d507      	bpl.n	8001e2c <__smakebuf_r+0x1c>
 8001e1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001e20:	6023      	str	r3, [r4, #0]
 8001e22:	6123      	str	r3, [r4, #16]
 8001e24:	2301      	movs	r3, #1
 8001e26:	6163      	str	r3, [r4, #20]
 8001e28:	b002      	add	sp, #8
 8001e2a:	bd70      	pop	{r4, r5, r6, pc}
 8001e2c:	ab01      	add	r3, sp, #4
 8001e2e:	466a      	mov	r2, sp
 8001e30:	f7ff ffc8 	bl	8001dc4 <__swhatbuf_r>
 8001e34:	9900      	ldr	r1, [sp, #0]
 8001e36:	4605      	mov	r5, r0
 8001e38:	4630      	mov	r0, r6
 8001e3a:	f7ff f8fb 	bl	8001034 <_malloc_r>
 8001e3e:	b948      	cbnz	r0, 8001e54 <__smakebuf_r+0x44>
 8001e40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001e44:	059a      	lsls	r2, r3, #22
 8001e46:	d4ef      	bmi.n	8001e28 <__smakebuf_r+0x18>
 8001e48:	f023 0303 	bic.w	r3, r3, #3
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	81a3      	strh	r3, [r4, #12]
 8001e52:	e7e3      	b.n	8001e1c <__smakebuf_r+0xc>
 8001e54:	4b0d      	ldr	r3, [pc, #52]	; (8001e8c <__smakebuf_r+0x7c>)
 8001e56:	62b3      	str	r3, [r6, #40]	; 0x28
 8001e58:	89a3      	ldrh	r3, [r4, #12]
 8001e5a:	6020      	str	r0, [r4, #0]
 8001e5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001e60:	81a3      	strh	r3, [r4, #12]
 8001e62:	9b00      	ldr	r3, [sp, #0]
 8001e64:	6163      	str	r3, [r4, #20]
 8001e66:	9b01      	ldr	r3, [sp, #4]
 8001e68:	6120      	str	r0, [r4, #16]
 8001e6a:	b15b      	cbz	r3, 8001e84 <__smakebuf_r+0x74>
 8001e6c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001e70:	4630      	mov	r0, r6
 8001e72:	f000 f8e1 	bl	8002038 <_isatty_r>
 8001e76:	b128      	cbz	r0, 8001e84 <__smakebuf_r+0x74>
 8001e78:	89a3      	ldrh	r3, [r4, #12]
 8001e7a:	f023 0303 	bic.w	r3, r3, #3
 8001e7e:	f043 0301 	orr.w	r3, r3, #1
 8001e82:	81a3      	strh	r3, [r4, #12]
 8001e84:	89a0      	ldrh	r0, [r4, #12]
 8001e86:	4305      	orrs	r5, r0
 8001e88:	81a5      	strh	r5, [r4, #12]
 8001e8a:	e7cd      	b.n	8001e28 <__smakebuf_r+0x18>
 8001e8c:	08000e4d 	.word	0x08000e4d

08001e90 <memcpy>:
 8001e90:	440a      	add	r2, r1
 8001e92:	4291      	cmp	r1, r2
 8001e94:	f100 33ff 	add.w	r3, r0, #4294967295
 8001e98:	d100      	bne.n	8001e9c <memcpy+0xc>
 8001e9a:	4770      	bx	lr
 8001e9c:	b510      	push	{r4, lr}
 8001e9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001ea2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001ea6:	4291      	cmp	r1, r2
 8001ea8:	d1f9      	bne.n	8001e9e <memcpy+0xe>
 8001eaa:	bd10      	pop	{r4, pc}

08001eac <memmove>:
 8001eac:	4288      	cmp	r0, r1
 8001eae:	b510      	push	{r4, lr}
 8001eb0:	eb01 0402 	add.w	r4, r1, r2
 8001eb4:	d902      	bls.n	8001ebc <memmove+0x10>
 8001eb6:	4284      	cmp	r4, r0
 8001eb8:	4623      	mov	r3, r4
 8001eba:	d807      	bhi.n	8001ecc <memmove+0x20>
 8001ebc:	1e43      	subs	r3, r0, #1
 8001ebe:	42a1      	cmp	r1, r4
 8001ec0:	d008      	beq.n	8001ed4 <memmove+0x28>
 8001ec2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001ec6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001eca:	e7f8      	b.n	8001ebe <memmove+0x12>
 8001ecc:	4402      	add	r2, r0
 8001ece:	4601      	mov	r1, r0
 8001ed0:	428a      	cmp	r2, r1
 8001ed2:	d100      	bne.n	8001ed6 <memmove+0x2a>
 8001ed4:	bd10      	pop	{r4, pc}
 8001ed6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001eda:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001ede:	e7f7      	b.n	8001ed0 <memmove+0x24>

08001ee0 <__malloc_lock>:
 8001ee0:	4801      	ldr	r0, [pc, #4]	; (8001ee8 <__malloc_lock+0x8>)
 8001ee2:	f7ff b885 	b.w	8000ff0 <__retarget_lock_acquire_recursive>
 8001ee6:	bf00      	nop
 8001ee8:	200000ec 	.word	0x200000ec

08001eec <__malloc_unlock>:
 8001eec:	4801      	ldr	r0, [pc, #4]	; (8001ef4 <__malloc_unlock+0x8>)
 8001eee:	f7ff b880 	b.w	8000ff2 <__retarget_lock_release_recursive>
 8001ef2:	bf00      	nop
 8001ef4:	200000ec 	.word	0x200000ec

08001ef8 <_free_r>:
 8001ef8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001efa:	2900      	cmp	r1, #0
 8001efc:	d044      	beq.n	8001f88 <_free_r+0x90>
 8001efe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f02:	9001      	str	r0, [sp, #4]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	f1a1 0404 	sub.w	r4, r1, #4
 8001f0a:	bfb8      	it	lt
 8001f0c:	18e4      	addlt	r4, r4, r3
 8001f0e:	f7ff ffe7 	bl	8001ee0 <__malloc_lock>
 8001f12:	4a1e      	ldr	r2, [pc, #120]	; (8001f8c <_free_r+0x94>)
 8001f14:	9801      	ldr	r0, [sp, #4]
 8001f16:	6813      	ldr	r3, [r2, #0]
 8001f18:	b933      	cbnz	r3, 8001f28 <_free_r+0x30>
 8001f1a:	6063      	str	r3, [r4, #4]
 8001f1c:	6014      	str	r4, [r2, #0]
 8001f1e:	b003      	add	sp, #12
 8001f20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001f24:	f7ff bfe2 	b.w	8001eec <__malloc_unlock>
 8001f28:	42a3      	cmp	r3, r4
 8001f2a:	d908      	bls.n	8001f3e <_free_r+0x46>
 8001f2c:	6825      	ldr	r5, [r4, #0]
 8001f2e:	1961      	adds	r1, r4, r5
 8001f30:	428b      	cmp	r3, r1
 8001f32:	bf01      	itttt	eq
 8001f34:	6819      	ldreq	r1, [r3, #0]
 8001f36:	685b      	ldreq	r3, [r3, #4]
 8001f38:	1949      	addeq	r1, r1, r5
 8001f3a:	6021      	streq	r1, [r4, #0]
 8001f3c:	e7ed      	b.n	8001f1a <_free_r+0x22>
 8001f3e:	461a      	mov	r2, r3
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	b10b      	cbz	r3, 8001f48 <_free_r+0x50>
 8001f44:	42a3      	cmp	r3, r4
 8001f46:	d9fa      	bls.n	8001f3e <_free_r+0x46>
 8001f48:	6811      	ldr	r1, [r2, #0]
 8001f4a:	1855      	adds	r5, r2, r1
 8001f4c:	42a5      	cmp	r5, r4
 8001f4e:	d10b      	bne.n	8001f68 <_free_r+0x70>
 8001f50:	6824      	ldr	r4, [r4, #0]
 8001f52:	4421      	add	r1, r4
 8001f54:	1854      	adds	r4, r2, r1
 8001f56:	42a3      	cmp	r3, r4
 8001f58:	6011      	str	r1, [r2, #0]
 8001f5a:	d1e0      	bne.n	8001f1e <_free_r+0x26>
 8001f5c:	681c      	ldr	r4, [r3, #0]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	6053      	str	r3, [r2, #4]
 8001f62:	4421      	add	r1, r4
 8001f64:	6011      	str	r1, [r2, #0]
 8001f66:	e7da      	b.n	8001f1e <_free_r+0x26>
 8001f68:	d902      	bls.n	8001f70 <_free_r+0x78>
 8001f6a:	230c      	movs	r3, #12
 8001f6c:	6003      	str	r3, [r0, #0]
 8001f6e:	e7d6      	b.n	8001f1e <_free_r+0x26>
 8001f70:	6825      	ldr	r5, [r4, #0]
 8001f72:	1961      	adds	r1, r4, r5
 8001f74:	428b      	cmp	r3, r1
 8001f76:	bf04      	itt	eq
 8001f78:	6819      	ldreq	r1, [r3, #0]
 8001f7a:	685b      	ldreq	r3, [r3, #4]
 8001f7c:	6063      	str	r3, [r4, #4]
 8001f7e:	bf04      	itt	eq
 8001f80:	1949      	addeq	r1, r1, r5
 8001f82:	6021      	streq	r1, [r4, #0]
 8001f84:	6054      	str	r4, [r2, #4]
 8001f86:	e7ca      	b.n	8001f1e <_free_r+0x26>
 8001f88:	b003      	add	sp, #12
 8001f8a:	bd30      	pop	{r4, r5, pc}
 8001f8c:	200000f0 	.word	0x200000f0

08001f90 <_realloc_r>:
 8001f90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f94:	4680      	mov	r8, r0
 8001f96:	4614      	mov	r4, r2
 8001f98:	460e      	mov	r6, r1
 8001f9a:	b921      	cbnz	r1, 8001fa6 <_realloc_r+0x16>
 8001f9c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001fa0:	4611      	mov	r1, r2
 8001fa2:	f7ff b847 	b.w	8001034 <_malloc_r>
 8001fa6:	b92a      	cbnz	r2, 8001fb4 <_realloc_r+0x24>
 8001fa8:	f7ff ffa6 	bl	8001ef8 <_free_r>
 8001fac:	4625      	mov	r5, r4
 8001fae:	4628      	mov	r0, r5
 8001fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001fb4:	f000 f850 	bl	8002058 <_malloc_usable_size_r>
 8001fb8:	4284      	cmp	r4, r0
 8001fba:	4607      	mov	r7, r0
 8001fbc:	d802      	bhi.n	8001fc4 <_realloc_r+0x34>
 8001fbe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8001fc2:	d812      	bhi.n	8001fea <_realloc_r+0x5a>
 8001fc4:	4621      	mov	r1, r4
 8001fc6:	4640      	mov	r0, r8
 8001fc8:	f7ff f834 	bl	8001034 <_malloc_r>
 8001fcc:	4605      	mov	r5, r0
 8001fce:	2800      	cmp	r0, #0
 8001fd0:	d0ed      	beq.n	8001fae <_realloc_r+0x1e>
 8001fd2:	42bc      	cmp	r4, r7
 8001fd4:	4622      	mov	r2, r4
 8001fd6:	4631      	mov	r1, r6
 8001fd8:	bf28      	it	cs
 8001fda:	463a      	movcs	r2, r7
 8001fdc:	f7ff ff58 	bl	8001e90 <memcpy>
 8001fe0:	4631      	mov	r1, r6
 8001fe2:	4640      	mov	r0, r8
 8001fe4:	f7ff ff88 	bl	8001ef8 <_free_r>
 8001fe8:	e7e1      	b.n	8001fae <_realloc_r+0x1e>
 8001fea:	4635      	mov	r5, r6
 8001fec:	e7df      	b.n	8001fae <_realloc_r+0x1e>
	...

08001ff0 <_read_r>:
 8001ff0:	b538      	push	{r3, r4, r5, lr}
 8001ff2:	4d07      	ldr	r5, [pc, #28]	; (8002010 <_read_r+0x20>)
 8001ff4:	4604      	mov	r4, r0
 8001ff6:	4608      	mov	r0, r1
 8001ff8:	4611      	mov	r1, r2
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	602a      	str	r2, [r5, #0]
 8001ffe:	461a      	mov	r2, r3
 8002000:	f7fe fcc6 	bl	8000990 <_read>
 8002004:	1c43      	adds	r3, r0, #1
 8002006:	d102      	bne.n	800200e <_read_r+0x1e>
 8002008:	682b      	ldr	r3, [r5, #0]
 800200a:	b103      	cbz	r3, 800200e <_read_r+0x1e>
 800200c:	6023      	str	r3, [r4, #0]
 800200e:	bd38      	pop	{r3, r4, r5, pc}
 8002010:	200000f8 	.word	0x200000f8

08002014 <_fstat_r>:
 8002014:	b538      	push	{r3, r4, r5, lr}
 8002016:	4d07      	ldr	r5, [pc, #28]	; (8002034 <_fstat_r+0x20>)
 8002018:	2300      	movs	r3, #0
 800201a:	4604      	mov	r4, r0
 800201c:	4608      	mov	r0, r1
 800201e:	4611      	mov	r1, r2
 8002020:	602b      	str	r3, [r5, #0]
 8002022:	f7fe fcfa 	bl	8000a1a <_fstat>
 8002026:	1c43      	adds	r3, r0, #1
 8002028:	d102      	bne.n	8002030 <_fstat_r+0x1c>
 800202a:	682b      	ldr	r3, [r5, #0]
 800202c:	b103      	cbz	r3, 8002030 <_fstat_r+0x1c>
 800202e:	6023      	str	r3, [r4, #0]
 8002030:	bd38      	pop	{r3, r4, r5, pc}
 8002032:	bf00      	nop
 8002034:	200000f8 	.word	0x200000f8

08002038 <_isatty_r>:
 8002038:	b538      	push	{r3, r4, r5, lr}
 800203a:	4d06      	ldr	r5, [pc, #24]	; (8002054 <_isatty_r+0x1c>)
 800203c:	2300      	movs	r3, #0
 800203e:	4604      	mov	r4, r0
 8002040:	4608      	mov	r0, r1
 8002042:	602b      	str	r3, [r5, #0]
 8002044:	f7fe fcf9 	bl	8000a3a <_isatty>
 8002048:	1c43      	adds	r3, r0, #1
 800204a:	d102      	bne.n	8002052 <_isatty_r+0x1a>
 800204c:	682b      	ldr	r3, [r5, #0]
 800204e:	b103      	cbz	r3, 8002052 <_isatty_r+0x1a>
 8002050:	6023      	str	r3, [r4, #0]
 8002052:	bd38      	pop	{r3, r4, r5, pc}
 8002054:	200000f8 	.word	0x200000f8

08002058 <_malloc_usable_size_r>:
 8002058:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800205c:	1f18      	subs	r0, r3, #4
 800205e:	2b00      	cmp	r3, #0
 8002060:	bfbc      	itt	lt
 8002062:	580b      	ldrlt	r3, [r1, r0]
 8002064:	18c0      	addlt	r0, r0, r3
 8002066:	4770      	bx	lr

08002068 <_init>:
 8002068:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800206a:	bf00      	nop
 800206c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800206e:	bc08      	pop	{r3}
 8002070:	469e      	mov	lr, r3
 8002072:	4770      	bx	lr

08002074 <_fini>:
 8002074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002076:	bf00      	nop
 8002078:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800207a:	bc08      	pop	{r3}
 800207c:	469e      	mov	lr, r3
 800207e:	4770      	bx	lr
