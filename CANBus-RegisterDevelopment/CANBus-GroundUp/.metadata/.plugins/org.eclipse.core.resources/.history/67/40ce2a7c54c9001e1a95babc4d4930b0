
3_f44_can_normal-mode_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001a78  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08001c48  08001c48  00011c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001d04  08001d04  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08001d04  08001d04  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001d04  08001d04  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001d04  08001d04  00011d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001d08  08001d08  00011d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08001d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000084  20000064  08001d70  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000e8  08001d70  000200e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   000022dc  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000099e  00000000  00000000  00022370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000208  00000000  00000000  00022d10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000190  00000000  00000000  00022f18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001e67  00000000  00000000  000230a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002adf  00000000  00000000  00024f0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090b38  00000000  00000000  000279ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b8526  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e0c  00000000  00000000  000b8578  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08001c30 	.word	0x08001c30

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	08001c30 	.word	0x08001c30

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b083      	sub	sp, #12
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	4603      	mov	r3, r0
 80002b8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	db0b      	blt.n	80002da <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80002c2:	79fb      	ldrb	r3, [r7, #7]
 80002c4:	f003 021f 	and.w	r2, r3, #31
 80002c8:	4907      	ldr	r1, [pc, #28]	; (80002e8 <__NVIC_EnableIRQ+0x38>)
 80002ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ce:	095b      	lsrs	r3, r3, #5
 80002d0:	2001      	movs	r0, #1
 80002d2:	fa00 f202 	lsl.w	r2, r0, r2
 80002d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80002da:	bf00      	nop
 80002dc:	370c      	adds	r7, #12
 80002de:	46bd      	mov	sp, r7
 80002e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e4:	4770      	bx	lr
 80002e6:	bf00      	nop
 80002e8:	e000e100 	.word	0xe000e100

080002ec <can_gpio_init>:

#define GPIOBEN		(1U<<1)
#define CAN_AF       0x09

void can_gpio_init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	af00      	add	r7, sp, #0
	/*Enable clock access to gpiob*/
	RCC->AHB1ENR |= GPIOBEN;
 80002f0:	4b17      	ldr	r3, [pc, #92]	; (8000350 <can_gpio_init+0x64>)
 80002f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002f4:	4a16      	ldr	r2, [pc, #88]	; (8000350 <can_gpio_init+0x64>)
 80002f6:	f043 0302 	orr.w	r3, r3, #2
 80002fa:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PB8 and PB9 to alternate function mode*/
	GPIOB->MODER &=~(1U<<16);
 80002fc:	4b15      	ldr	r3, [pc, #84]	; (8000354 <can_gpio_init+0x68>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	4a14      	ldr	r2, [pc, #80]	; (8000354 <can_gpio_init+0x68>)
 8000302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000306:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<17);
 8000308:	4b12      	ldr	r3, [pc, #72]	; (8000354 <can_gpio_init+0x68>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4a11      	ldr	r2, [pc, #68]	; (8000354 <can_gpio_init+0x68>)
 800030e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000312:	6013      	str	r3, [r2, #0]

	GPIOB->MODER &=~(1U<<18);
 8000314:	4b0f      	ldr	r3, [pc, #60]	; (8000354 <can_gpio_init+0x68>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <can_gpio_init+0x68>)
 800031a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800031e:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |=(1U<<19);
 8000320:	4b0c      	ldr	r3, [pc, #48]	; (8000354 <can_gpio_init+0x68>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a0b      	ldr	r2, [pc, #44]	; (8000354 <can_gpio_init+0x68>)
 8000326:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800032a:	6013      	str	r3, [r2, #0]

	/*Set PB8 and PB9 alternate function to CAN1 RX and TX*/
	GPIOB->AFR[1] |=(CAN_AF << 0);
 800032c:	4b09      	ldr	r3, [pc, #36]	; (8000354 <can_gpio_init+0x68>)
 800032e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000330:	4a08      	ldr	r2, [pc, #32]	; (8000354 <can_gpio_init+0x68>)
 8000332:	f043 0309 	orr.w	r3, r3, #9
 8000336:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |=(CAN_AF << 4);
 8000338:	4b06      	ldr	r3, [pc, #24]	; (8000354 <can_gpio_init+0x68>)
 800033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033c:	4a05      	ldr	r2, [pc, #20]	; (8000354 <can_gpio_init+0x68>)
 800033e:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8000342:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable CAN RX0 interrupt for message reception*/
	NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000344:	2014      	movs	r0, #20
 8000346:	f7ff ffb3 	bl	80002b0 <__NVIC_EnableIRQ>
}
 800034a:	bf00      	nop
 800034c:	bd80      	pop	{r7, pc}
 800034e:	bf00      	nop
 8000350:	40023800 	.word	0x40023800
 8000354:	40020400 	.word	0x40020400

08000358 <can_params_init>:

void can_params_init(uint8_t mode){
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	4603      	mov	r3, r0
 8000360:	71fb      	strb	r3, [r7, #7]

	/*Enable clock access to CAN1*/
	RCC->APB1ENR |= RCC_APB1ENR_CAN1EN;
 8000362:	4b1c      	ldr	r3, [pc, #112]	; (80003d4 <can_params_init+0x7c>)
 8000364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000366:	4a1b      	ldr	r2, [pc, #108]	; (80003d4 <can_params_init+0x7c>)
 8000368:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800036c:	6413      	str	r3, [r2, #64]	; 0x40

	/*Enter initialization mode*/
	CAN1->MCR |= CAN_MCR_INRQ;
 800036e:	4b1a      	ldr	r3, [pc, #104]	; (80003d8 <can_params_init+0x80>)
 8000370:	681b      	ldr	r3, [r3, #0]
 8000372:	4a19      	ldr	r2, [pc, #100]	; (80003d8 <can_params_init+0x80>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6013      	str	r3, [r2, #0]

	/*Wait until CAN1 is in initialization mode*/
	while((CAN1->MSR & CAN_MSR_INAK) == 0){}
 800037a:	bf00      	nop
 800037c:	4b16      	ldr	r3, [pc, #88]	; (80003d8 <can_params_init+0x80>)
 800037e:	685b      	ldr	r3, [r3, #4]
 8000380:	f003 0301 	and.w	r3, r3, #1
 8000384:	2b00      	cmp	r3, #0
 8000386:	d0f9      	beq.n	800037c <can_params_init+0x24>

	/*Exit sleep mode*/
	CAN1->MCR &=~CAN_MCR_SLEEP;
 8000388:	4b13      	ldr	r3, [pc, #76]	; (80003d8 <can_params_init+0x80>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a12      	ldr	r2, [pc, #72]	; (80003d8 <can_params_init+0x80>)
 800038e:	f023 0302 	bic.w	r3, r3, #2
 8000392:	6013      	str	r3, [r2, #0]

	/*Wait until CAN1 is out of sleep mode*/
	while((CAN1->MSR & CAN_MSR_SLAK) != 0){}
 8000394:	bf00      	nop
 8000396:	4b10      	ldr	r3, [pc, #64]	; (80003d8 <can_params_init+0x80>)
 8000398:	685b      	ldr	r3, [r3, #4]
 800039a:	f003 0302 	and.w	r3, r3, #2
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d1f9      	bne.n	8000396 <can_params_init+0x3e>

	/*Configure timing parameters including baudrate by configuring time segment 1 and 2
	 * and prescaler*/
	CAN1->BTR = (1<< CAN_BTR_TS1_Pos) | (0 << CAN_BTR_TS1_Pos) | (9 << CAN_BTR_BRP_Pos);
 80003a2:	4b0d      	ldr	r3, [pc, #52]	; (80003d8 <can_params_init+0x80>)
 80003a4:	4a0d      	ldr	r2, [pc, #52]	; (80003dc <can_params_init+0x84>)
 80003a6:	61da      	str	r2, [r3, #28]
	/*Select mode*/
	if(mode)
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d006      	beq.n	80003bc <can_params_init+0x64>
	{
		/*Normal mode*/
		CAN1->BTR &=~(1U<<30);
 80003ae:	4b0a      	ldr	r3, [pc, #40]	; (80003d8 <can_params_init+0x80>)
 80003b0:	69db      	ldr	r3, [r3, #28]
 80003b2:	4a09      	ldr	r2, [pc, #36]	; (80003d8 <can_params_init+0x80>)
 80003b4:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80003b8:	61d3      	str	r3, [r2, #28]
	else
	{
		/*Loopback mode*/
		CAN1->BTR |= (1U<<30);
	}
}
 80003ba:	e005      	b.n	80003c8 <can_params_init+0x70>
		CAN1->BTR |= (1U<<30);
 80003bc:	4b06      	ldr	r3, [pc, #24]	; (80003d8 <can_params_init+0x80>)
 80003be:	69db      	ldr	r3, [r3, #28]
 80003c0:	4a05      	ldr	r2, [pc, #20]	; (80003d8 <can_params_init+0x80>)
 80003c2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80003c6:	61d3      	str	r3, [r2, #28]
}
 80003c8:	bf00      	nop
 80003ca:	370c      	adds	r7, #12
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	40023800 	.word	0x40023800
 80003d8:	40006400 	.word	0x40006400
 80003dc:	00010009 	.word	0x00010009

080003e0 <can_start>:


void can_start(void)
{
 80003e0:	b480      	push	{r7}
 80003e2:	af00      	add	r7, sp, #0
	/*Exit initialization mode*/
	CAN1->MCR &=~ CAN_MCR_INRQ;
 80003e4:	4b0b      	ldr	r3, [pc, #44]	; (8000414 <can_start+0x34>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4a0a      	ldr	r2, [pc, #40]	; (8000414 <can_start+0x34>)
 80003ea:	f023 0301 	bic.w	r3, r3, #1
 80003ee:	6013      	str	r3, [r2, #0]

	/*Wait until CAN1 is out of initialization mode*/
	while((CAN1->MSR & CAN_MSR_INAK) == 1){}
 80003f0:	bf00      	nop
 80003f2:	4b08      	ldr	r3, [pc, #32]	; (8000414 <can_start+0x34>)
 80003f4:	685b      	ldr	r3, [r3, #4]
 80003f6:	f003 0301 	and.w	r3, r3, #1
 80003fa:	2b01      	cmp	r3, #1
 80003fc:	d0f9      	beq.n	80003f2 <can_start+0x12>

	/*Enable interrupt for FIFO0 message pending*/
	CAN1->IER |= (1U<<1);
 80003fe:	4b05      	ldr	r3, [pc, #20]	; (8000414 <can_start+0x34>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a04      	ldr	r2, [pc, #16]	; (8000414 <can_start+0x34>)
 8000404:	f043 0302 	orr.w	r3, r3, #2
 8000408:	6153      	str	r3, [r2, #20]
}
 800040a:	bf00      	nop
 800040c:	46bd      	mov	sp, r7
 800040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000412:	4770      	bx	lr
 8000414:	40006400 	.word	0x40006400

08000418 <can_add_tx_message>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval  status
  */
uint8_t can_add_tx_message(can_tx_header_typedef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 8000418:	b480      	push	{r7}
 800041a:	b087      	sub	sp, #28
 800041c:	af00      	add	r7, sp, #0
 800041e:	60f8      	str	r0, [r7, #12]
 8000420:	60b9      	str	r1, [r7, #8]
 8000422:	607a      	str	r2, [r7, #4]

  uint32_t transmitmailbox;

  // Read the Transmit Status Register

  uint32_t tsr = READ_REG(CAN1->TSR);
 8000424:	4b53      	ldr	r3, [pc, #332]	; (8000574 <can_add_tx_message+0x15c>)
 8000426:	689b      	ldr	r3, [r3, #8]
 8000428:	617b      	str	r3, [r7, #20]

  // Check that at least one Tx mailbox is empty
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000430:	2b00      	cmp	r3, #0
 8000432:	d10a      	bne.n	800044a <can_add_tx_message+0x32>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000434:	697b      	ldr	r3, [r7, #20]
 8000436:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800043a:	2b00      	cmp	r3, #0
 800043c:	d105      	bne.n	800044a <can_add_tx_message+0x32>
        ((tsr & CAN_TSR_TME2) != 0U))
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8000444:	2b00      	cmp	r3, #0
 8000446:	f000 808d 	beq.w	8000564 <can_add_tx_message+0x14c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800044a:	697b      	ldr	r3, [r7, #20]
 800044c:	0e1b      	lsrs	r3, r3, #24
 800044e:	f003 0303 	and.w	r3, r3, #3
 8000452:	613b      	str	r3, [r7, #16]

      /* Check transmitmailbox validity */
      if (transmitmailbox > 2U)
 8000454:	693b      	ldr	r3, [r7, #16]
 8000456:	2b02      	cmp	r3, #2
 8000458:	d901      	bls.n	800045e <can_add_tx_message+0x46>
      {
        return 1; // Invalid mailbox selected
 800045a:	2301      	movs	r3, #1
 800045c:	e083      	b.n	8000566 <can_add_tx_message+0x14e>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800045e:	2201      	movs	r2, #1
 8000460:	693b      	ldr	r3, [r7, #16]
 8000462:	409a      	lsls	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->ide == CAN_ID_STD)
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	689b      	ldr	r3, [r3, #8]
 800046c:	2b00      	cmp	r3, #0
 800046e:	d10c      	bne.n	800048a <can_add_tx_message+0x72>
      {
       CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->std_id << CAN_TI0R_STID_Pos) |
 8000470:	68fb      	ldr	r3, [r7, #12]
 8000472:	681b      	ldr	r3, [r3, #0]
 8000474:	055a      	lsls	r2, r3, #21
                                                           pHeader->rtr);
 8000476:	68fb      	ldr	r3, [r7, #12]
 8000478:	68db      	ldr	r3, [r3, #12]
       CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->std_id << CAN_TI0R_STID_Pos) |
 800047a:	493e      	ldr	r1, [pc, #248]	; (8000574 <can_add_tx_message+0x15c>)
 800047c:	431a      	orrs	r2, r3
 800047e:	693b      	ldr	r3, [r7, #16]
 8000480:	3318      	adds	r3, #24
 8000482:	011b      	lsls	r3, r3, #4
 8000484:	440b      	add	r3, r1
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	e00e      	b.n	80004a8 <can_add_tx_message+0x90>
      }
      else
      {
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 800048a:	68fb      	ldr	r3, [r7, #12]
 800048c:	685b      	ldr	r3, [r3, #4]
 800048e:	00da      	lsls	r2, r3, #3
                                                           pHeader->ide |
 8000490:	68fb      	ldr	r3, [r7, #12]
 8000492:	689b      	ldr	r3, [r3, #8]
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 8000494:	431a      	orrs	r2, r3
                                                           pHeader->rtr);
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	68db      	ldr	r3, [r3, #12]
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 800049a:	4936      	ldr	r1, [pc, #216]	; (8000574 <can_add_tx_message+0x15c>)
                                                           pHeader->ide |
 800049c:	431a      	orrs	r2, r3
        CAN1->sTxMailBox[transmitmailbox].TIR = ((pHeader->ext_id << CAN_TI0R_EXID_Pos) |
 800049e:	693b      	ldr	r3, [r7, #16]
 80004a0:	3318      	adds	r3, #24
 80004a2:	011b      	lsls	r3, r3, #4
 80004a4:	440b      	add	r3, r1
 80004a6:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
     CAN1->sTxMailBox[transmitmailbox].TDTR = (pHeader->dlc);
 80004a8:	4932      	ldr	r1, [pc, #200]	; (8000574 <can_add_tx_message+0x15c>)
 80004aa:	68fb      	ldr	r3, [r7, #12]
 80004ac:	691a      	ldr	r2, [r3, #16]
 80004ae:	693b      	ldr	r3, [r7, #16]
 80004b0:	3318      	adds	r3, #24
 80004b2:	011b      	lsls	r3, r3, #4
 80004b4:	440b      	add	r3, r1
 80004b6:	3304      	adds	r3, #4
 80004b8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->transmit_global_time == 1)
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	7d1b      	ldrb	r3, [r3, #20]
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d10f      	bne.n	80004e2 <can_add_tx_message+0xca>
      {
        SET_BIT(CAN1->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80004c2:	4a2c      	ldr	r2, [pc, #176]	; (8000574 <can_add_tx_message+0x15c>)
 80004c4:	693b      	ldr	r3, [r7, #16]
 80004c6:	3318      	adds	r3, #24
 80004c8:	011b      	lsls	r3, r3, #4
 80004ca:	4413      	add	r3, r2
 80004cc:	3304      	adds	r3, #4
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	4928      	ldr	r1, [pc, #160]	; (8000574 <can_add_tx_message+0x15c>)
 80004d2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80004d6:	693b      	ldr	r3, [r7, #16]
 80004d8:	3318      	adds	r3, #24
 80004da:	011b      	lsls	r3, r3, #4
 80004dc:	440b      	add	r3, r1
 80004de:	3304      	adds	r3, #4
 80004e0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDHR,
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	3307      	adds	r3, #7
 80004e6:	781b      	ldrb	r3, [r3, #0]
 80004e8:	061a      	lsls	r2, r3, #24
 80004ea:	68bb      	ldr	r3, [r7, #8]
 80004ec:	3306      	adds	r3, #6
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	041b      	lsls	r3, r3, #16
 80004f2:	431a      	orrs	r2, r3
 80004f4:	68bb      	ldr	r3, [r7, #8]
 80004f6:	3305      	adds	r3, #5
 80004f8:	781b      	ldrb	r3, [r3, #0]
 80004fa:	021b      	lsls	r3, r3, #8
 80004fc:	4313      	orrs	r3, r2
 80004fe:	68ba      	ldr	r2, [r7, #8]
 8000500:	3204      	adds	r2, #4
 8000502:	7812      	ldrb	r2, [r2, #0]
 8000504:	491b      	ldr	r1, [pc, #108]	; (8000574 <can_add_tx_message+0x15c>)
 8000506:	431a      	orrs	r2, r3
 8000508:	693b      	ldr	r3, [r7, #16]
 800050a:	011b      	lsls	r3, r3, #4
 800050c:	440b      	add	r3, r1
 800050e:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8000512:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));

      WRITE_REG(CAN1->sTxMailBox[transmitmailbox].TDLR,
 8000514:	68bb      	ldr	r3, [r7, #8]
 8000516:	3303      	adds	r3, #3
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	061a      	lsls	r2, r3, #24
 800051c:	68bb      	ldr	r3, [r7, #8]
 800051e:	3302      	adds	r3, #2
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	041b      	lsls	r3, r3, #16
 8000524:	431a      	orrs	r2, r3
 8000526:	68bb      	ldr	r3, [r7, #8]
 8000528:	3301      	adds	r3, #1
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	021b      	lsls	r3, r3, #8
 800052e:	4313      	orrs	r3, r2
 8000530:	68ba      	ldr	r2, [r7, #8]
 8000532:	7812      	ldrb	r2, [r2, #0]
 8000534:	490f      	ldr	r1, [pc, #60]	; (8000574 <can_add_tx_message+0x15c>)
 8000536:	431a      	orrs	r2, r3
 8000538:	693b      	ldr	r3, [r7, #16]
 800053a:	011b      	lsls	r3, r3, #4
 800053c:	440b      	add	r3, r1
 800053e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8000542:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(CAN1->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <can_add_tx_message+0x15c>)
 8000546:	693b      	ldr	r3, [r7, #16]
 8000548:	3318      	adds	r3, #24
 800054a:	011b      	lsls	r3, r3, #4
 800054c:	4413      	add	r3, r2
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4908      	ldr	r1, [pc, #32]	; (8000574 <can_add_tx_message+0x15c>)
 8000552:	f043 0201 	orr.w	r2, r3, #1
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	3318      	adds	r3, #24
 800055a:	011b      	lsls	r3, r3, #4
 800055c:	440b      	add	r3, r1
 800055e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return 0;
 8000560:	2300      	movs	r3, #0
 8000562:	e000      	b.n	8000566 <can_add_tx_message+0x14e>
    }
    return 0;
 8000564:	2300      	movs	r3, #0
}
 8000566:	4618      	mov	r0, r3
 8000568:	371c      	adds	r7, #28
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop
 8000574:	40006400 	.word	0x40006400

08000578 <can_get_rx_message>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval  status
  */
uint8_t can_get_rx_message(uint32_t RxFifo, can_rx_header_typedef *pHeader, uint8_t aData[])
{
 8000578:	b480      	push	{r7}
 800057a:	b085      	sub	sp, #20
 800057c:	af00      	add	r7, sp, #0
 800057e:	60f8      	str	r0, [r7, #12]
 8000580:	60b9      	str	r1, [r7, #8]
 8000582:	607a      	str	r2, [r7, #4]

    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	2b00      	cmp	r3, #0
 8000588:	d107      	bne.n	800059a <can_get_rx_message+0x22>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((CAN1->RF0R & CAN_RF0R_FMP0) == 0U)
 800058a:	4b6a      	ldr	r3, [pc, #424]	; (8000734 <can_get_rx_message+0x1bc>)
 800058c:	68db      	ldr	r3, [r3, #12]
 800058e:	f003 0303 	and.w	r3, r3, #3
 8000592:	2b00      	cmp	r3, #0
 8000594:	d109      	bne.n	80005aa <can_get_rx_message+0x32>
      {
        return 1;
 8000596:	2301      	movs	r3, #1
 8000598:	e0c5      	b.n	8000726 <can_get_rx_message+0x1ae>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((CAN1->RF1R & CAN_RF1R_FMP1) == 0U)
 800059a:	4b66      	ldr	r3, [pc, #408]	; (8000734 <can_get_rx_message+0x1bc>)
 800059c:	691b      	ldr	r3, [r3, #16]
 800059e:	f003 0303 	and.w	r3, r3, #3
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d101      	bne.n	80005aa <can_get_rx_message+0x32>
      {
        return 1;
 80005a6:	2301      	movs	r3, #1
 80005a8:	e0bd      	b.n	8000726 <can_get_rx_message+0x1ae>
    }

    // Read the header information from the FIFO mailbox
     // Extract identifier, DLC, timestamp, etc.

    pHeader->ide = CAN_RI0R_IDE & CAN1->sFIFOMailBox[RxFifo].RIR;
 80005aa:	4a62      	ldr	r2, [pc, #392]	; (8000734 <can_get_rx_message+0x1bc>)
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	331b      	adds	r3, #27
 80005b0:	011b      	lsls	r3, r3, #4
 80005b2:	4413      	add	r3, r2
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	f003 0204 	and.w	r2, r3, #4
 80005ba:	68bb      	ldr	r3, [r7, #8]
 80005bc:	609a      	str	r2, [r3, #8]
    if (pHeader->ide == CAN_ID_STD)
 80005be:	68bb      	ldr	r3, [r7, #8]
 80005c0:	689b      	ldr	r3, [r3, #8]
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d10b      	bne.n	80005de <can_get_rx_message+0x66>
    {
      pHeader->std_id = (CAN_RI0R_STID & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80005c6:	4a5b      	ldr	r2, [pc, #364]	; (8000734 <can_get_rx_message+0x1bc>)
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	331b      	adds	r3, #27
 80005cc:	011b      	lsls	r3, r3, #4
 80005ce:	4413      	add	r3, r2
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	0d5b      	lsrs	r3, r3, #21
 80005d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80005d8:	68bb      	ldr	r3, [r7, #8]
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	e00a      	b.n	80005f4 <can_get_rx_message+0x7c>
    }
    else
    {
      pHeader->ext_id = ((CAN_RI0R_EXID | CAN_RI0R_STID) & CAN1->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80005de:	4a55      	ldr	r2, [pc, #340]	; (8000734 <can_get_rx_message+0x1bc>)
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	331b      	adds	r3, #27
 80005e4:	011b      	lsls	r3, r3, #4
 80005e6:	4413      	add	r3, r2
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	08db      	lsrs	r3, r3, #3
 80005ec:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80005f0:	68bb      	ldr	r3, [r7, #8]
 80005f2:	605a      	str	r2, [r3, #4]
    }
    pHeader->rtr = (CAN_RI0R_RTR & CAN1->sFIFOMailBox[RxFifo].RIR);
 80005f4:	4a4f      	ldr	r2, [pc, #316]	; (8000734 <can_get_rx_message+0x1bc>)
 80005f6:	68fb      	ldr	r3, [r7, #12]
 80005f8:	331b      	adds	r3, #27
 80005fa:	011b      	lsls	r3, r3, #4
 80005fc:	4413      	add	r3, r2
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f003 0202 	and.w	r2, r3, #2
 8000604:	68bb      	ldr	r3, [r7, #8]
 8000606:	60da      	str	r2, [r3, #12]
    pHeader->dlc = (CAN_RDT0R_DLC & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8000608:	4a4a      	ldr	r2, [pc, #296]	; (8000734 <can_get_rx_message+0x1bc>)
 800060a:	68fb      	ldr	r3, [r7, #12]
 800060c:	331b      	adds	r3, #27
 800060e:	011b      	lsls	r3, r3, #4
 8000610:	4413      	add	r3, r2
 8000612:	3304      	adds	r3, #4
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	f003 020f 	and.w	r2, r3, #15
 800061a:	68bb      	ldr	r3, [r7, #8]
 800061c:	611a      	str	r2, [r3, #16]
    pHeader->filter_match_index = (CAN_RDT0R_FMI & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800061e:	4a45      	ldr	r2, [pc, #276]	; (8000734 <can_get_rx_message+0x1bc>)
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	331b      	adds	r3, #27
 8000624:	011b      	lsls	r3, r3, #4
 8000626:	4413      	add	r3, r2
 8000628:	3304      	adds	r3, #4
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	0a1b      	lsrs	r3, r3, #8
 800062e:	b2da      	uxtb	r2, r3
 8000630:	68bb      	ldr	r3, [r7, #8]
 8000632:	619a      	str	r2, [r3, #24]
    pHeader->timestamp = (CAN_RDT0R_TIME & CAN1->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8000634:	4a3f      	ldr	r2, [pc, #252]	; (8000734 <can_get_rx_message+0x1bc>)
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	331b      	adds	r3, #27
 800063a:	011b      	lsls	r3, r3, #4
 800063c:	4413      	add	r3, r2
 800063e:	3304      	adds	r3, #4
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	0c1b      	lsrs	r3, r3, #16
 8000644:	b29a      	uxth	r2, r3
 8000646:	68bb      	ldr	r3, [r7, #8]
 8000648:	615a      	str	r2, [r3, #20]

    // Extract the data from the FIFO mailbox
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800064a:	4a3a      	ldr	r2, [pc, #232]	; (8000734 <can_get_rx_message+0x1bc>)
 800064c:	68fb      	ldr	r3, [r7, #12]
 800064e:	011b      	lsls	r3, r3, #4
 8000650:	4413      	add	r3, r2
 8000652:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800065e:	4a35      	ldr	r2, [pc, #212]	; (8000734 <can_get_rx_message+0x1bc>)
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	011b      	lsls	r3, r3, #4
 8000664:	4413      	add	r3, r2
 8000666:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	0a1a      	lsrs	r2, r3, #8
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	3301      	adds	r3, #1
 8000672:	b2d2      	uxtb	r2, r2
 8000674:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8000676:	4a2f      	ldr	r2, [pc, #188]	; (8000734 <can_get_rx_message+0x1bc>)
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	011b      	lsls	r3, r3, #4
 800067c:	4413      	add	r3, r2
 800067e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	0c1a      	lsrs	r2, r3, #16
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	3302      	adds	r3, #2
 800068a:	b2d2      	uxtb	r2, r2
 800068c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & CAN1->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800068e:	4a29      	ldr	r2, [pc, #164]	; (8000734 <can_get_rx_message+0x1bc>)
 8000690:	68fb      	ldr	r3, [r7, #12]
 8000692:	011b      	lsls	r3, r3, #4
 8000694:	4413      	add	r3, r2
 8000696:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	0e1a      	lsrs	r2, r3, #24
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3303      	adds	r3, #3
 80006a2:	b2d2      	uxtb	r2, r2
 80006a4:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80006a6:	4a23      	ldr	r2, [pc, #140]	; (8000734 <can_get_rx_message+0x1bc>)
 80006a8:	68fb      	ldr	r3, [r7, #12]
 80006aa:	011b      	lsls	r3, r3, #4
 80006ac:	4413      	add	r3, r2
 80006ae:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80006b2:	681a      	ldr	r2, [r3, #0]
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	3304      	adds	r3, #4
 80006b8:	b2d2      	uxtb	r2, r2
 80006ba:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80006bc:	4a1d      	ldr	r2, [pc, #116]	; (8000734 <can_get_rx_message+0x1bc>)
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	011b      	lsls	r3, r3, #4
 80006c2:	4413      	add	r3, r2
 80006c4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	0a1a      	lsrs	r2, r3, #8
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	3305      	adds	r3, #5
 80006d0:	b2d2      	uxtb	r2, r2
 80006d2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80006d4:	4a17      	ldr	r2, [pc, #92]	; (8000734 <can_get_rx_message+0x1bc>)
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	011b      	lsls	r3, r3, #4
 80006da:	4413      	add	r3, r2
 80006dc:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	0c1a      	lsrs	r2, r3, #16
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	3306      	adds	r3, #6
 80006e8:	b2d2      	uxtb	r2, r2
 80006ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & CAN1->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80006ec:	4a11      	ldr	r2, [pc, #68]	; (8000734 <can_get_rx_message+0x1bc>)
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	011b      	lsls	r3, r3, #4
 80006f2:	4413      	add	r3, r2
 80006f4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80006f8:	681b      	ldr	r3, [r3, #0]
 80006fa:	0e1a      	lsrs	r2, r3, #24
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	3307      	adds	r3, #7
 8000700:	b2d2      	uxtb	r2, r2
 8000702:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d106      	bne.n	8000718 <can_get_rx_message+0x1a0>
    {
      /* Release RX FIFO 0 */
      SET_BIT(CAN1->RF0R, CAN_RF0R_RFOM0);
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <can_get_rx_message+0x1bc>)
 800070c:	68db      	ldr	r3, [r3, #12]
 800070e:	4a09      	ldr	r2, [pc, #36]	; (8000734 <can_get_rx_message+0x1bc>)
 8000710:	f043 0320 	orr.w	r3, r3, #32
 8000714:	60d3      	str	r3, [r2, #12]
 8000716:	e005      	b.n	8000724 <can_get_rx_message+0x1ac>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(CAN1->RF1R, CAN_RF1R_RFOM1);
 8000718:	4b06      	ldr	r3, [pc, #24]	; (8000734 <can_get_rx_message+0x1bc>)
 800071a:	691b      	ldr	r3, [r3, #16]
 800071c:	4a05      	ldr	r2, [pc, #20]	; (8000734 <can_get_rx_message+0x1bc>)
 800071e:	f043 0320 	orr.w	r3, r3, #32
 8000722:	6113      	str	r3, [r2, #16]
    }



  return 0;// Message read successfully
 8000724:	2300      	movs	r3, #0

}
 8000726:	4618      	mov	r0, r3
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	40006400 	.word	0x40006400

08000738 <can_filter_config>:


void can_filter_config(uint16_t std_id)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	80fb      	strh	r3, [r7, #6]
	/*Set filter intiailization mode*/
	CAN1->FMR |= CAN_FMR_FINIT;
 8000742:	4b2c      	ldr	r3, [pc, #176]	; (80007f4 <can_filter_config+0xbc>)
 8000744:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000748:	4a2a      	ldr	r2, [pc, #168]	; (80007f4 <can_filter_config+0xbc>)
 800074a:	f043 0301 	orr.w	r3, r3, #1
 800074e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*Set the slave filter to start from 20*/
	CAN1->FMR &=~(CAN_FMR_CAN2SB_Msk);
 8000752:	4b28      	ldr	r3, [pc, #160]	; (80007f4 <can_filter_config+0xbc>)
 8000754:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000758:	4a26      	ldr	r2, [pc, #152]	; (80007f4 <can_filter_config+0xbc>)
 800075a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800075e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	CAN1->FMR |=(20 << CAN_FMR_CAN2SB_Pos);
 8000762:	4b24      	ldr	r3, [pc, #144]	; (80007f4 <can_filter_config+0xbc>)
 8000764:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000768:	4a22      	ldr	r2, [pc, #136]	; (80007f4 <can_filter_config+0xbc>)
 800076a:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 800076e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

	/*****Filter activation sequence****/
	/*Deactive filter 18*/
	CAN1->FA1R &=~(CAN_FA1R_FACT18);
 8000772:	4b20      	ldr	r3, [pc, #128]	; (80007f4 <can_filter_config+0xbc>)
 8000774:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8000778:	4a1e      	ldr	r2, [pc, #120]	; (80007f4 <can_filter_config+0xbc>)
 800077a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800077e:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/*Set 32-bit scale configuration*/
	CAN1->FS1R  |= CAN_FS1R_FSC18;
 8000782:	4b1c      	ldr	r3, [pc, #112]	; (80007f4 <can_filter_config+0xbc>)
 8000784:	f8d3 320c 	ldr.w	r3, [r3, #524]	; 0x20c
 8000788:	4a1a      	ldr	r2, [pc, #104]	; (80007f4 <can_filter_config+0xbc>)
 800078a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800078e:	f8c2 320c 	str.w	r3, [r2, #524]	; 0x20c

	/*Configure filter mode to identifier mask mode*/
	CAN1->FM1R &=~CAN_FM1R_FBM18;
 8000792:	4b18      	ldr	r3, [pc, #96]	; (80007f4 <can_filter_config+0xbc>)
 8000794:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000798:	4a16      	ldr	r2, [pc, #88]	; (80007f4 <can_filter_config+0xbc>)
 800079a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800079e:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204

	/*Set identifier*/
	CAN1->sFilterRegister[18].FR1 = (std_id << 21);
 80007a2:	88fb      	ldrh	r3, [r7, #6]
 80007a4:	055a      	lsls	r2, r3, #21
 80007a6:	4b13      	ldr	r3, [pc, #76]	; (80007f4 <can_filter_config+0xbc>)
 80007a8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

	/*Set identifier mask*/
	CAN1->sFilterRegister[18].FR2 = (std_id << 21);
 80007ac:	88fb      	ldrh	r3, [r7, #6]
 80007ae:	055a      	lsls	r2, r3, #21
 80007b0:	4b10      	ldr	r3, [pc, #64]	; (80007f4 <can_filter_config+0xbc>)
 80007b2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4

	/*Assign filter 18 to FIFO0*/
	CAN1->FFA1R &=~(CAN_FFA1R_FFA18);
 80007b6:	4b0f      	ldr	r3, [pc, #60]	; (80007f4 <can_filter_config+0xbc>)
 80007b8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80007bc:	4a0d      	ldr	r2, [pc, #52]	; (80007f4 <can_filter_config+0xbc>)
 80007be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80007c2:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214

	/*Activate filter 18*/
	CAN1->FA1R |= (CAN_FA1R_FACT18);
 80007c6:	4b0b      	ldr	r3, [pc, #44]	; (80007f4 <can_filter_config+0xbc>)
 80007c8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 80007cc:	4a09      	ldr	r2, [pc, #36]	; (80007f4 <can_filter_config+0xbc>)
 80007ce:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80007d2:	f8c2 321c 	str.w	r3, [r2, #540]	; 0x21c

	/*Clear filter intialization mode*/
	CAN1->FMR &= ~CAN_FMR_FINIT;
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <can_filter_config+0xbc>)
 80007d8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80007dc:	4a05      	ldr	r2, [pc, #20]	; (80007f4 <can_filter_config+0xbc>)
 80007de:	f023 0301 	bic.w	r3, r3, #1
 80007e2:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

}
 80007e6:	bf00      	nop
 80007e8:	370c      	adds	r7, #12
 80007ea:	46bd      	mov	sp, r7
 80007ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop
 80007f4:	40006400 	.word	0x40006400

080007f8 <fpu_enable>:
#include "stm32f4xx.h"



void fpu_enable(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
	/*Enable floating point unit:  Enable CP10 and CP11 full access*/
	SCB->CPACR |=(1<<20);
 80007fc:	4b12      	ldr	r3, [pc, #72]	; (8000848 <fpu_enable+0x50>)
 80007fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000802:	4a11      	ldr	r2, [pc, #68]	; (8000848 <fpu_enable+0x50>)
 8000804:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<21);
 800080c:	4b0e      	ldr	r3, [pc, #56]	; (8000848 <fpu_enable+0x50>)
 800080e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000812:	4a0d      	ldr	r2, [pc, #52]	; (8000848 <fpu_enable+0x50>)
 8000814:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<22);
 800081c:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <fpu_enable+0x50>)
 800081e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000822:	4a09      	ldr	r2, [pc, #36]	; (8000848 <fpu_enable+0x50>)
 8000824:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000828:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
	SCB->CPACR |=(1<<23);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <fpu_enable+0x50>)
 800082e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000832:	4a05      	ldr	r2, [pc, #20]	; (8000848 <fpu_enable+0x50>)
 8000834:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000838:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

}
 800083c:	bf00      	nop
 800083e:	46bd      	mov	sp, r7
 8000840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000844:	4770      	bx	lr
 8000846:	bf00      	nop
 8000848:	e000ed00 	.word	0xe000ed00

0800084c <CAN1_RX0_IRQHandler>:
can_tx_header_typedef tx_header;

uint8_t count = 0;

void CAN1_RX0_IRQHandler(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	af00      	add	r7, sp, #0
	if((CAN1->RF0R & CAN_RF0R_FMP0) != 0U)
 8000850:	4b09      	ldr	r3, [pc, #36]	; (8000878 <CAN1_RX0_IRQHandler+0x2c>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d00a      	beq.n	8000872 <CAN1_RX0_IRQHandler+0x26>
	{
		can_get_rx_message(CAN_RX_FIFO0, &rx_header, rx_data);
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <CAN1_RX0_IRQHandler+0x30>)
 800085e:	4908      	ldr	r1, [pc, #32]	; (8000880 <CAN1_RX0_IRQHandler+0x34>)
 8000860:	2000      	movs	r0, #0
 8000862:	f7ff fe89 	bl	8000578 <can_get_rx_message>
		count++;
 8000866:	4b07      	ldr	r3, [pc, #28]	; (8000884 <CAN1_RX0_IRQHandler+0x38>)
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	3301      	adds	r3, #1
 800086c:	b2da      	uxtb	r2, r3
 800086e:	4b05      	ldr	r3, [pc, #20]	; (8000884 <CAN1_RX0_IRQHandler+0x38>)
 8000870:	701a      	strb	r2, [r3, #0]
	}
}
 8000872:	bf00      	nop
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	40006400 	.word	0x40006400
 800087c:	20000080 	.word	0x20000080
 8000880:	20000094 	.word	0x20000094
 8000884:	200000c8 	.word	0x200000c8

08000888 <main>:
int main()
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b084      	sub	sp, #16
 800088c:	af00      	add	r7, sp, #0
	fpu_enable();
 800088e:	f7ff ffb3 	bl	80007f8 <fpu_enable>
	timebase_init();
 8000892:	f000 f923 	bl	8000adc <timebase_init>
	debug_uart_init();
 8000896:	f000 f957 	bl	8000b48 <debug_uart_init>
	can_gpio_init();
 800089a:	f7ff fd27 	bl	80002ec <can_gpio_init>
	can_params_init(CAN_MODE_NORMAL);
 800089e:	2001      	movs	r0, #1
 80008a0:	f7ff fd5a 	bl	8000358 <can_params_init>
	can_filter_config(0x544);
 80008a4:	f240 5044 	movw	r0, #1348	; 0x544
 80008a8:	f7ff ff46 	bl	8000738 <can_filter_config>
	can_start();
 80008ac:	f7ff fd98 	bl	80003e0 <can_start>


   printf("Transmitter ready....\n\r");
 80008b0:	4813      	ldr	r0, [pc, #76]	; (8000900 <main+0x78>)
 80008b2:	f000 fa2f 	bl	8000d14 <iprintf>


	while(1)
	{

		tx_header.dlc = 10;
 80008b6:	4b13      	ldr	r3, [pc, #76]	; (8000904 <main+0x7c>)
 80008b8:	220a      	movs	r2, #10
 80008ba:	611a      	str	r2, [r3, #16]
		tx_header.ext_id = 0;
 80008bc:	4b11      	ldr	r3, [pc, #68]	; (8000904 <main+0x7c>)
 80008be:	2200      	movs	r2, #0
 80008c0:	605a      	str	r2, [r3, #4]
		tx_header.ide = CAN_ID_STD;
 80008c2:	4b10      	ldr	r3, [pc, #64]	; (8000904 <main+0x7c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	609a      	str	r2, [r3, #8]
		tx_header.rtr =  0;
 80008c8:	4b0e      	ldr	r3, [pc, #56]	; (8000904 <main+0x7c>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	60da      	str	r2, [r3, #12]
		tx_header.std_id =  0x244;
 80008ce:	4b0d      	ldr	r3, [pc, #52]	; (8000904 <main+0x7c>)
 80008d0:	f44f 7211 	mov.w	r2, #580	; 0x244
 80008d4:	601a      	str	r2, [r3, #0]
		tx_header.transmit_global_time = 0;
 80008d6:	4b0b      	ldr	r3, [pc, #44]	; (8000904 <main+0x7c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	751a      	strb	r2, [r3, #20]

		uint8_t tx_msg_pack[10] = "NODE1:Hi";
 80008dc:	4a0a      	ldr	r2, [pc, #40]	; (8000908 <main+0x80>)
 80008de:	1d3b      	adds	r3, r7, #4
 80008e0:	ca07      	ldmia	r2, {r0, r1, r2}
 80008e2:	c303      	stmia	r3!, {r0, r1}
 80008e4:	701a      	strb	r2, [r3, #0]
 80008e6:	2300      	movs	r3, #0
 80008e8:	737b      	strb	r3, [r7, #13]

		can_add_tx_message(&tx_header, &tx_msg_pack[0],tx_mailbox);
 80008ea:	1d3b      	adds	r3, r7, #4
 80008ec:	4a07      	ldr	r2, [pc, #28]	; (800090c <main+0x84>)
 80008ee:	4619      	mov	r1, r3
 80008f0:	4804      	ldr	r0, [pc, #16]	; (8000904 <main+0x7c>)
 80008f2:	f7ff fd91 	bl	8000418 <can_add_tx_message>

		delay(1);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 f8ae 	bl	8000a58 <delay>
	{
 80008fc:	e7db      	b.n	80008b6 <main+0x2e>
 80008fe:	bf00      	nop
 8000900:	08001c48 	.word	0x08001c48
 8000904:	200000b0 	.word	0x200000b0
 8000908:	08001c60 	.word	0x08001c60
 800090c:	20000088 	.word	0x20000088

08000910 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b086      	sub	sp, #24
 8000914:	af00      	add	r7, sp, #0
 8000916:	60f8      	str	r0, [r7, #12]
 8000918:	60b9      	str	r1, [r7, #8]
 800091a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800091c:	2300      	movs	r3, #0
 800091e:	617b      	str	r3, [r7, #20]
 8000920:	e00a      	b.n	8000938 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000922:	f3af 8000 	nop.w
 8000926:	4601      	mov	r1, r0
 8000928:	68bb      	ldr	r3, [r7, #8]
 800092a:	1c5a      	adds	r2, r3, #1
 800092c:	60ba      	str	r2, [r7, #8]
 800092e:	b2ca      	uxtb	r2, r1
 8000930:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	3301      	adds	r3, #1
 8000936:	617b      	str	r3, [r7, #20]
 8000938:	697a      	ldr	r2, [r7, #20]
 800093a:	687b      	ldr	r3, [r7, #4]
 800093c:	429a      	cmp	r2, r3
 800093e:	dbf0      	blt.n	8000922 <_read+0x12>
  }

  return len;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3718      	adds	r7, #24
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b086      	sub	sp, #24
 800094e:	af00      	add	r7, sp, #0
 8000950:	60f8      	str	r0, [r7, #12]
 8000952:	60b9      	str	r1, [r7, #8]
 8000954:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000956:	2300      	movs	r3, #0
 8000958:	617b      	str	r3, [r7, #20]
 800095a:	e009      	b.n	8000970 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800095c:	68bb      	ldr	r3, [r7, #8]
 800095e:	1c5a      	adds	r2, r3, #1
 8000960:	60ba      	str	r2, [r7, #8]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	4618      	mov	r0, r3
 8000966:	f000 f8e3 	bl	8000b30 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	3301      	adds	r3, #1
 800096e:	617b      	str	r3, [r7, #20]
 8000970:	697a      	ldr	r2, [r7, #20]
 8000972:	687b      	ldr	r3, [r7, #4]
 8000974:	429a      	cmp	r2, r3
 8000976:	dbf1      	blt.n	800095c <_write+0x12>
  }
  return len;
 8000978:	687b      	ldr	r3, [r7, #4]
}
 800097a:	4618      	mov	r0, r3
 800097c:	3718      	adds	r7, #24
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}

08000982 <_close>:

int _close(int file)
{
 8000982:	b480      	push	{r7}
 8000984:	b083      	sub	sp, #12
 8000986:	af00      	add	r7, sp, #0
 8000988:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800098a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800098e:	4618      	mov	r0, r3
 8000990:	370c      	adds	r7, #12
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr

0800099a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800099a:	b480      	push	{r7}
 800099c:	b083      	sub	sp, #12
 800099e:	af00      	add	r7, sp, #0
 80009a0:	6078      	str	r0, [r7, #4]
 80009a2:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80009a4:	683b      	ldr	r3, [r7, #0]
 80009a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80009aa:	605a      	str	r2, [r3, #4]
  return 0;
 80009ac:	2300      	movs	r3, #0
}
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr

080009ba <_isatty>:

int _isatty(int file)
{
 80009ba:	b480      	push	{r7}
 80009bc:	b083      	sub	sp, #12
 80009be:	af00      	add	r7, sp, #0
 80009c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009c2:	2301      	movs	r3, #1
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	370c      	adds	r7, #12
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b085      	sub	sp, #20
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	60b9      	str	r1, [r7, #8]
 80009da:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009dc:	2300      	movs	r3, #0
}
 80009de:	4618      	mov	r0, r3
 80009e0:	3714      	adds	r7, #20
 80009e2:	46bd      	mov	sp, r7
 80009e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e8:	4770      	bx	lr
	...

080009ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b086      	sub	sp, #24
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009f4:	4a14      	ldr	r2, [pc, #80]	; (8000a48 <_sbrk+0x5c>)
 80009f6:	4b15      	ldr	r3, [pc, #84]	; (8000a4c <_sbrk+0x60>)
 80009f8:	1ad3      	subs	r3, r2, r3
 80009fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009fc:	697b      	ldr	r3, [r7, #20]
 80009fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000a00:	4b13      	ldr	r3, [pc, #76]	; (8000a50 <_sbrk+0x64>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	2b00      	cmp	r3, #0
 8000a06:	d102      	bne.n	8000a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000a08:	4b11      	ldr	r3, [pc, #68]	; (8000a50 <_sbrk+0x64>)
 8000a0a:	4a12      	ldr	r2, [pc, #72]	; (8000a54 <_sbrk+0x68>)
 8000a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a0e:	4b10      	ldr	r3, [pc, #64]	; (8000a50 <_sbrk+0x64>)
 8000a10:	681a      	ldr	r2, [r3, #0]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4413      	add	r3, r2
 8000a16:	693a      	ldr	r2, [r7, #16]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d207      	bcs.n	8000a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a1c:	f000 f948 	bl	8000cb0 <__errno>
 8000a20:	4603      	mov	r3, r0
 8000a22:	220c      	movs	r2, #12
 8000a24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a26:	f04f 33ff 	mov.w	r3, #4294967295
 8000a2a:	e009      	b.n	8000a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a2c:	4b08      	ldr	r3, [pc, #32]	; (8000a50 <_sbrk+0x64>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a32:	4b07      	ldr	r3, [pc, #28]	; (8000a50 <_sbrk+0x64>)
 8000a34:	681a      	ldr	r2, [r3, #0]
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	4413      	add	r3, r2
 8000a3a:	4a05      	ldr	r2, [pc, #20]	; (8000a50 <_sbrk+0x64>)
 8000a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a3e:	68fb      	ldr	r3, [r7, #12]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	3718      	adds	r7, #24
 8000a44:	46bd      	mov	sp, r7
 8000a46:	bd80      	pop	{r7, pc}
 8000a48:	20020000 	.word	0x20020000
 8000a4c:	00000400 	.word	0x00000400
 8000a50:	200000cc 	.word	0x200000cc
 8000a54:	200000e8 	.word	0x200000e8

08000a58 <delay>:
volatile uint32_t g_curr_tick_p;


/*Delay in seconds*/
void delay(uint32_t delay)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart =  get_tick();
 8000a60:	f000 f818 	bl	8000a94 <get_tick>
 8000a64:	60b8      	str	r0, [r7, #8]
	uint32_t wait =  delay;
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	60fb      	str	r3, [r7, #12]

	if(wait < MAX_DELAY)
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a70:	d002      	beq.n	8000a78 <delay+0x20>
	{
		wait += (uint32_t)TICK_FREQ;
 8000a72:	68fb      	ldr	r3, [r7, #12]
 8000a74:	3301      	adds	r3, #1
 8000a76:	60fb      	str	r3, [r7, #12]
	}

    while((get_tick() - tickstart) < wait){}
 8000a78:	bf00      	nop
 8000a7a:	f000 f80b 	bl	8000a94 <get_tick>
 8000a7e:	4602      	mov	r2, r0
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	1ad3      	subs	r3, r2, r3
 8000a84:	68fa      	ldr	r2, [r7, #12]
 8000a86:	429a      	cmp	r2, r3
 8000a88:	d8f7      	bhi.n	8000a7a <delay+0x22>

}
 8000a8a:	bf00      	nop
 8000a8c:	bf00      	nop
 8000a8e:	3710      	adds	r7, #16
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}

08000a94 <get_tick>:

uint32_t get_tick(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a98:	b672      	cpsid	i
}
 8000a9a:	bf00      	nop
	__disable_irq();
	g_curr_tick_p = g_curr_tick;
 8000a9c:	4b06      	ldr	r3, [pc, #24]	; (8000ab8 <get_tick+0x24>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4a06      	ldr	r2, [pc, #24]	; (8000abc <get_tick+0x28>)
 8000aa2:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000aa4:	b662      	cpsie	i
}
 8000aa6:	bf00      	nop
	__enable_irq();

	return g_curr_tick_p;
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <get_tick+0x28>)
 8000aaa:	681b      	ldr	r3, [r3, #0]

}
 8000aac:	4618      	mov	r0, r3
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	200000d0 	.word	0x200000d0
 8000abc:	200000d4 	.word	0x200000d4

08000ac0 <tick_increment>:
static void tick_increment(void)
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	af00      	add	r7, sp, #0
	g_curr_tick += TICK_FREQ;
 8000ac4:	4b04      	ldr	r3, [pc, #16]	; (8000ad8 <tick_increment+0x18>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	4a03      	ldr	r2, [pc, #12]	; (8000ad8 <tick_increment+0x18>)
 8000acc:	6013      	str	r3, [r2, #0]
}
 8000ace:	bf00      	nop
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad6:	4770      	bx	lr
 8000ad8:	200000d0 	.word	0x200000d0

08000adc <timebase_init>:
void timebase_init(void)
{
 8000adc:	b480      	push	{r7}
 8000ade:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ae0:	b672      	cpsid	i
}
 8000ae2:	bf00      	nop

	/*Disable global interrupts*/
	__disable_irq();

    /*Load the timer with number of clock cycles per second*/
	SysTick->LOAD =  ONE_SEC_LOAD - 1;
 8000ae4:	4b0d      	ldr	r3, [pc, #52]	; (8000b1c <timebase_init+0x40>)
 8000ae6:	4a0e      	ldr	r2, [pc, #56]	; (8000b20 <timebase_init+0x44>)
 8000ae8:	605a      	str	r2, [r3, #4]

    /*Clear systick current value register*/
	SysTick->VAL = 0;
 8000aea:	4b0c      	ldr	r3, [pc, #48]	; (8000b1c <timebase_init+0x40>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	609a      	str	r2, [r3, #8]

    /*Select internal clock source*/
	SysTick->CTRL = CTRL_CLCKSRC;
 8000af0:	4b0a      	ldr	r3, [pc, #40]	; (8000b1c <timebase_init+0x40>)
 8000af2:	2204      	movs	r2, #4
 8000af4:	601a      	str	r2, [r3, #0]

    /*Enable interrupt*/
	SysTick->CTRL |= CTRL_TICKINT;
 8000af6:	4b09      	ldr	r3, [pc, #36]	; (8000b1c <timebase_init+0x40>)
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	4a08      	ldr	r2, [pc, #32]	; (8000b1c <timebase_init+0x40>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6013      	str	r3, [r2, #0]

	/*Enable systick*/
	SysTick->CTRL |=CTRL_ENABLE;
 8000b02:	4b06      	ldr	r3, [pc, #24]	; (8000b1c <timebase_init+0x40>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a05      	ldr	r2, [pc, #20]	; (8000b1c <timebase_init+0x40>)
 8000b08:	f043 0301 	orr.w	r3, r3, #1
 8000b0c:	6013      	str	r3, [r2, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000b0e:	b662      	cpsie	i
}
 8000b10:	bf00      	nop

	/*Enable global interrupts*/
	__enable_irq();
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e010 	.word	0xe000e010
 8000b20:	00f423ff 	.word	0x00f423ff

08000b24 <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	af00      	add	r7, sp, #0
	tick_increment();
 8000b28:	f7ff ffca 	bl	8000ac0 <tick_increment>
}
 8000b2c:	bf00      	nop
 8000b2e:	bd80      	pop	{r7, pc}

08000b30 <__io_putchar>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate);
static void uart_write(int ch);

int __io_putchar(int ch)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	uart_write(ch);
 8000b38:	6878      	ldr	r0, [r7, #4]
 8000b3a:	f000 f84f 	bl	8000bdc <uart_write>
	return ch;
 8000b3e:	687b      	ldr	r3, [r7, #4]
}
 8000b40:	4618      	mov	r0, r3
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}

08000b48 <debug_uart_init>:

void debug_uart_init(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	af00      	add	r7, sp, #0
	/*Enable clock access to GPIOA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <debug_uart_init+0x84>)
 8000b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b50:	4a1e      	ldr	r2, [pc, #120]	; (8000bcc <debug_uart_init+0x84>)
 8000b52:	f043 0301 	orr.w	r3, r3, #1
 8000b56:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set the mode of PA2 to alternate function mode*/
	GPIOA->MODER &=~(1U<<4);
 8000b58:	4b1d      	ldr	r3, [pc, #116]	; (8000bd0 <debug_uart_init+0x88>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a1c      	ldr	r2, [pc, #112]	; (8000bd0 <debug_uart_init+0x88>)
 8000b5e:	f023 0310 	bic.w	r3, r3, #16
 8000b62:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 8000b64:	4b1a      	ldr	r3, [pc, #104]	; (8000bd0 <debug_uart_init+0x88>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a19      	ldr	r2, [pc, #100]	; (8000bd0 <debug_uart_init+0x88>)
 8000b6a:	f043 0320 	orr.w	r3, r3, #32
 8000b6e:	6013      	str	r3, [r2, #0]

	/*Set alternate function type to AF7(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 8000b70:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <debug_uart_init+0x88>)
 8000b72:	6a1b      	ldr	r3, [r3, #32]
 8000b74:	4a16      	ldr	r2, [pc, #88]	; (8000bd0 <debug_uart_init+0x88>)
 8000b76:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b7a:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 8000b7c:	4b14      	ldr	r3, [pc, #80]	; (8000bd0 <debug_uart_init+0x88>)
 8000b7e:	6a1b      	ldr	r3, [r3, #32]
 8000b80:	4a13      	ldr	r2, [pc, #76]	; (8000bd0 <debug_uart_init+0x88>)
 8000b82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b86:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 8000b88:	4b11      	ldr	r3, [pc, #68]	; (8000bd0 <debug_uart_init+0x88>)
 8000b8a:	6a1b      	ldr	r3, [r3, #32]
 8000b8c:	4a10      	ldr	r2, [pc, #64]	; (8000bd0 <debug_uart_init+0x88>)
 8000b8e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b92:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 8000b94:	4b0e      	ldr	r3, [pc, #56]	; (8000bd0 <debug_uart_init+0x88>)
 8000b96:	6a1b      	ldr	r3, [r3, #32]
 8000b98:	4a0d      	ldr	r2, [pc, #52]	; (8000bd0 <debug_uart_init+0x88>)
 8000b9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000b9e:	6213      	str	r3, [r2, #32]

	/*Enable clock access to UART2*/
     RCC->APB1ENR |=	UART2EN;
 8000ba0:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <debug_uart_init+0x84>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a09      	ldr	r2, [pc, #36]	; (8000bcc <debug_uart_init+0x84>)
 8000ba6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40

	/*Configure uart baudrate*/
     uart_set_baudrate(APB1_CLK,DBG_UART_BAUDRATE);
 8000bac:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <debug_uart_init+0x8c>)
 8000bb2:	f000 f83f 	bl	8000c34 <uart_set_baudrate>

	/*Configure transfer direction*/
     USART2->CR1 = CR1_TE;
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <debug_uart_init+0x90>)
 8000bb8:	2208      	movs	r2, #8
 8000bba:	60da      	str	r2, [r3, #12]

	/*Enable UART Module*/
     USART2->CR1 |= CR1_UE;
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <debug_uart_init+0x90>)
 8000bbe:	68db      	ldr	r3, [r3, #12]
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <debug_uart_init+0x90>)
 8000bc2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000bc6:	60d3      	str	r3, [r2, #12]
}
 8000bc8:	bf00      	nop
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	00f42400 	.word	0x00f42400
 8000bd8:	40004400 	.word	0x40004400

08000bdc <uart_write>:



static void uart_write(int ch)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
	/*Make sure transmit data register is empty*/
	while(!(USART2->SR & SR_TXE)){}
 8000be4:	bf00      	nop
 8000be6:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <uart_write+0x2c>)
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d0f9      	beq.n	8000be6 <uart_write+0xa>

	/*Write to transmit data register*/
	USART2->DR =(ch & 0xFF);
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <uart_write+0x2c>)
 8000bf6:	b2db      	uxtb	r3, r3
 8000bf8:	6053      	str	r3, [r2, #4]
}
 8000bfa:	bf00      	nop
 8000bfc:	370c      	adds	r7, #12
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop
 8000c08:	40004400 	.word	0x40004400

08000c0c <compute_uart_bd>:
static uint16_t compute_uart_bd(uint32_t periph_clk,uint32_t baudrate)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
	return((periph_clk + (baudrate/2U))/baudrate);
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	085a      	lsrs	r2, r3, #1
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	441a      	add	r2, r3
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c24:	b29b      	uxth	r3, r3
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	370c      	adds	r7, #12
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
	...

08000c34 <uart_set_baudrate>:

static void uart_set_baudrate(uint32_t periph_clk,uint32_t baudrate)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b082      	sub	sp, #8
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	6039      	str	r1, [r7, #0]
	USART2->BRR = compute_uart_bd(periph_clk,baudrate);
 8000c3e:	6839      	ldr	r1, [r7, #0]
 8000c40:	6878      	ldr	r0, [r7, #4]
 8000c42:	f7ff ffe3 	bl	8000c0c <compute_uart_bd>
 8000c46:	4603      	mov	r3, r0
 8000c48:	461a      	mov	r2, r3
 8000c4a:	4b03      	ldr	r3, [pc, #12]	; (8000c58 <uart_set_baudrate+0x24>)
 8000c4c:	609a      	str	r2, [r3, #8]
}
 8000c4e:	bf00      	nop
 8000c50:	3708      	adds	r7, #8
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40004400 	.word	0x40004400

08000c5c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c5c:	480d      	ldr	r0, [pc, #52]	; (8000c94 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c5e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c60:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c64:	480c      	ldr	r0, [pc, #48]	; (8000c98 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c66:	490d      	ldr	r1, [pc, #52]	; (8000c9c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c68:	4a0d      	ldr	r2, [pc, #52]	; (8000ca0 <LoopForever+0xe>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ca4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c7c:	4c0a      	ldr	r4, [pc, #40]	; (8000ca8 <LoopForever+0x16>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c8a:	f000 f817 	bl	8000cbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c8e:	f7ff fdfb 	bl	8000888 <main>

08000c92 <LoopForever>:

LoopForever:
  b LoopForever
 8000c92:	e7fe      	b.n	8000c92 <LoopForever>
  ldr   r0, =_estack
 8000c94:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c98:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c9c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000ca0:	08001d0c 	.word	0x08001d0c
  ldr r2, =_sbss
 8000ca4:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000ca8:	200000e8 	.word	0x200000e8

08000cac <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000cac:	e7fe      	b.n	8000cac <ADC_IRQHandler>
	...

08000cb0 <__errno>:
 8000cb0:	4b01      	ldr	r3, [pc, #4]	; (8000cb8 <__errno+0x8>)
 8000cb2:	6818      	ldr	r0, [r3, #0]
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop
 8000cb8:	20000000 	.word	0x20000000

08000cbc <__libc_init_array>:
 8000cbc:	b570      	push	{r4, r5, r6, lr}
 8000cbe:	4d0d      	ldr	r5, [pc, #52]	; (8000cf4 <__libc_init_array+0x38>)
 8000cc0:	4c0d      	ldr	r4, [pc, #52]	; (8000cf8 <__libc_init_array+0x3c>)
 8000cc2:	1b64      	subs	r4, r4, r5
 8000cc4:	10a4      	asrs	r4, r4, #2
 8000cc6:	2600      	movs	r6, #0
 8000cc8:	42a6      	cmp	r6, r4
 8000cca:	d109      	bne.n	8000ce0 <__libc_init_array+0x24>
 8000ccc:	4d0b      	ldr	r5, [pc, #44]	; (8000cfc <__libc_init_array+0x40>)
 8000cce:	4c0c      	ldr	r4, [pc, #48]	; (8000d00 <__libc_init_array+0x44>)
 8000cd0:	f000 ffae 	bl	8001c30 <_init>
 8000cd4:	1b64      	subs	r4, r4, r5
 8000cd6:	10a4      	asrs	r4, r4, #2
 8000cd8:	2600      	movs	r6, #0
 8000cda:	42a6      	cmp	r6, r4
 8000cdc:	d105      	bne.n	8000cea <__libc_init_array+0x2e>
 8000cde:	bd70      	pop	{r4, r5, r6, pc}
 8000ce0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ce4:	4798      	blx	r3
 8000ce6:	3601      	adds	r6, #1
 8000ce8:	e7ee      	b.n	8000cc8 <__libc_init_array+0xc>
 8000cea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000cee:	4798      	blx	r3
 8000cf0:	3601      	adds	r6, #1
 8000cf2:	e7f2      	b.n	8000cda <__libc_init_array+0x1e>
 8000cf4:	08001d04 	.word	0x08001d04
 8000cf8:	08001d04 	.word	0x08001d04
 8000cfc:	08001d04 	.word	0x08001d04
 8000d00:	08001d08 	.word	0x08001d08

08000d04 <memset>:
 8000d04:	4402      	add	r2, r0
 8000d06:	4603      	mov	r3, r0
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d100      	bne.n	8000d0e <memset+0xa>
 8000d0c:	4770      	bx	lr
 8000d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8000d12:	e7f9      	b.n	8000d08 <memset+0x4>

08000d14 <iprintf>:
 8000d14:	b40f      	push	{r0, r1, r2, r3}
 8000d16:	4b0a      	ldr	r3, [pc, #40]	; (8000d40 <iprintf+0x2c>)
 8000d18:	b513      	push	{r0, r1, r4, lr}
 8000d1a:	681c      	ldr	r4, [r3, #0]
 8000d1c:	b124      	cbz	r4, 8000d28 <iprintf+0x14>
 8000d1e:	69a3      	ldr	r3, [r4, #24]
 8000d20:	b913      	cbnz	r3, 8000d28 <iprintf+0x14>
 8000d22:	4620      	mov	r0, r4
 8000d24:	f000 f866 	bl	8000df4 <__sinit>
 8000d28:	ab05      	add	r3, sp, #20
 8000d2a:	9a04      	ldr	r2, [sp, #16]
 8000d2c:	68a1      	ldr	r1, [r4, #8]
 8000d2e:	9301      	str	r3, [sp, #4]
 8000d30:	4620      	mov	r0, r4
 8000d32:	f000 f9bd 	bl	80010b0 <_vfiprintf_r>
 8000d36:	b002      	add	sp, #8
 8000d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000d3c:	b004      	add	sp, #16
 8000d3e:	4770      	bx	lr
 8000d40:	20000000 	.word	0x20000000

08000d44 <std>:
 8000d44:	2300      	movs	r3, #0
 8000d46:	b510      	push	{r4, lr}
 8000d48:	4604      	mov	r4, r0
 8000d4a:	e9c0 3300 	strd	r3, r3, [r0]
 8000d4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000d52:	6083      	str	r3, [r0, #8]
 8000d54:	8181      	strh	r1, [r0, #12]
 8000d56:	6643      	str	r3, [r0, #100]	; 0x64
 8000d58:	81c2      	strh	r2, [r0, #14]
 8000d5a:	6183      	str	r3, [r0, #24]
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	2208      	movs	r2, #8
 8000d60:	305c      	adds	r0, #92	; 0x5c
 8000d62:	f7ff ffcf 	bl	8000d04 <memset>
 8000d66:	4b05      	ldr	r3, [pc, #20]	; (8000d7c <std+0x38>)
 8000d68:	6263      	str	r3, [r4, #36]	; 0x24
 8000d6a:	4b05      	ldr	r3, [pc, #20]	; (8000d80 <std+0x3c>)
 8000d6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8000d6e:	4b05      	ldr	r3, [pc, #20]	; (8000d84 <std+0x40>)
 8000d70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000d72:	4b05      	ldr	r3, [pc, #20]	; (8000d88 <std+0x44>)
 8000d74:	6224      	str	r4, [r4, #32]
 8000d76:	6323      	str	r3, [r4, #48]	; 0x30
 8000d78:	bd10      	pop	{r4, pc}
 8000d7a:	bf00      	nop
 8000d7c:	08001659 	.word	0x08001659
 8000d80:	0800167b 	.word	0x0800167b
 8000d84:	080016b3 	.word	0x080016b3
 8000d88:	080016d7 	.word	0x080016d7

08000d8c <_cleanup_r>:
 8000d8c:	4901      	ldr	r1, [pc, #4]	; (8000d94 <_cleanup_r+0x8>)
 8000d8e:	f000 b8af 	b.w	8000ef0 <_fwalk_reent>
 8000d92:	bf00      	nop
 8000d94:	080019b1 	.word	0x080019b1

08000d98 <__sfmoreglue>:
 8000d98:	b570      	push	{r4, r5, r6, lr}
 8000d9a:	2268      	movs	r2, #104	; 0x68
 8000d9c:	1e4d      	subs	r5, r1, #1
 8000d9e:	4355      	muls	r5, r2
 8000da0:	460e      	mov	r6, r1
 8000da2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000da6:	f000 f8e5 	bl	8000f74 <_malloc_r>
 8000daa:	4604      	mov	r4, r0
 8000dac:	b140      	cbz	r0, 8000dc0 <__sfmoreglue+0x28>
 8000dae:	2100      	movs	r1, #0
 8000db0:	e9c0 1600 	strd	r1, r6, [r0]
 8000db4:	300c      	adds	r0, #12
 8000db6:	60a0      	str	r0, [r4, #8]
 8000db8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000dbc:	f7ff ffa2 	bl	8000d04 <memset>
 8000dc0:	4620      	mov	r0, r4
 8000dc2:	bd70      	pop	{r4, r5, r6, pc}

08000dc4 <__sfp_lock_acquire>:
 8000dc4:	4801      	ldr	r0, [pc, #4]	; (8000dcc <__sfp_lock_acquire+0x8>)
 8000dc6:	f000 b8b3 	b.w	8000f30 <__retarget_lock_acquire_recursive>
 8000dca:	bf00      	nop
 8000dcc:	200000d9 	.word	0x200000d9

08000dd0 <__sfp_lock_release>:
 8000dd0:	4801      	ldr	r0, [pc, #4]	; (8000dd8 <__sfp_lock_release+0x8>)
 8000dd2:	f000 b8ae 	b.w	8000f32 <__retarget_lock_release_recursive>
 8000dd6:	bf00      	nop
 8000dd8:	200000d9 	.word	0x200000d9

08000ddc <__sinit_lock_acquire>:
 8000ddc:	4801      	ldr	r0, [pc, #4]	; (8000de4 <__sinit_lock_acquire+0x8>)
 8000dde:	f000 b8a7 	b.w	8000f30 <__retarget_lock_acquire_recursive>
 8000de2:	bf00      	nop
 8000de4:	200000da 	.word	0x200000da

08000de8 <__sinit_lock_release>:
 8000de8:	4801      	ldr	r0, [pc, #4]	; (8000df0 <__sinit_lock_release+0x8>)
 8000dea:	f000 b8a2 	b.w	8000f32 <__retarget_lock_release_recursive>
 8000dee:	bf00      	nop
 8000df0:	200000da 	.word	0x200000da

08000df4 <__sinit>:
 8000df4:	b510      	push	{r4, lr}
 8000df6:	4604      	mov	r4, r0
 8000df8:	f7ff fff0 	bl	8000ddc <__sinit_lock_acquire>
 8000dfc:	69a3      	ldr	r3, [r4, #24]
 8000dfe:	b11b      	cbz	r3, 8000e08 <__sinit+0x14>
 8000e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000e04:	f7ff bff0 	b.w	8000de8 <__sinit_lock_release>
 8000e08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000e0c:	6523      	str	r3, [r4, #80]	; 0x50
 8000e0e:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <__sinit+0x68>)
 8000e10:	4a13      	ldr	r2, [pc, #76]	; (8000e60 <__sinit+0x6c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	62a2      	str	r2, [r4, #40]	; 0x28
 8000e16:	42a3      	cmp	r3, r4
 8000e18:	bf04      	itt	eq
 8000e1a:	2301      	moveq	r3, #1
 8000e1c:	61a3      	streq	r3, [r4, #24]
 8000e1e:	4620      	mov	r0, r4
 8000e20:	f000 f820 	bl	8000e64 <__sfp>
 8000e24:	6060      	str	r0, [r4, #4]
 8000e26:	4620      	mov	r0, r4
 8000e28:	f000 f81c 	bl	8000e64 <__sfp>
 8000e2c:	60a0      	str	r0, [r4, #8]
 8000e2e:	4620      	mov	r0, r4
 8000e30:	f000 f818 	bl	8000e64 <__sfp>
 8000e34:	2200      	movs	r2, #0
 8000e36:	60e0      	str	r0, [r4, #12]
 8000e38:	2104      	movs	r1, #4
 8000e3a:	6860      	ldr	r0, [r4, #4]
 8000e3c:	f7ff ff82 	bl	8000d44 <std>
 8000e40:	68a0      	ldr	r0, [r4, #8]
 8000e42:	2201      	movs	r2, #1
 8000e44:	2109      	movs	r1, #9
 8000e46:	f7ff ff7d 	bl	8000d44 <std>
 8000e4a:	68e0      	ldr	r0, [r4, #12]
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	2112      	movs	r1, #18
 8000e50:	f7ff ff78 	bl	8000d44 <std>
 8000e54:	2301      	movs	r3, #1
 8000e56:	61a3      	str	r3, [r4, #24]
 8000e58:	e7d2      	b.n	8000e00 <__sinit+0xc>
 8000e5a:	bf00      	nop
 8000e5c:	08001c6c 	.word	0x08001c6c
 8000e60:	08000d8d 	.word	0x08000d8d

08000e64 <__sfp>:
 8000e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e66:	4607      	mov	r7, r0
 8000e68:	f7ff ffac 	bl	8000dc4 <__sfp_lock_acquire>
 8000e6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ee8 <__sfp+0x84>)
 8000e6e:	681e      	ldr	r6, [r3, #0]
 8000e70:	69b3      	ldr	r3, [r6, #24]
 8000e72:	b913      	cbnz	r3, 8000e7a <__sfp+0x16>
 8000e74:	4630      	mov	r0, r6
 8000e76:	f7ff ffbd 	bl	8000df4 <__sinit>
 8000e7a:	3648      	adds	r6, #72	; 0x48
 8000e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	d503      	bpl.n	8000e8c <__sfp+0x28>
 8000e84:	6833      	ldr	r3, [r6, #0]
 8000e86:	b30b      	cbz	r3, 8000ecc <__sfp+0x68>
 8000e88:	6836      	ldr	r6, [r6, #0]
 8000e8a:	e7f7      	b.n	8000e7c <__sfp+0x18>
 8000e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000e90:	b9d5      	cbnz	r5, 8000ec8 <__sfp+0x64>
 8000e92:	4b16      	ldr	r3, [pc, #88]	; (8000eec <__sfp+0x88>)
 8000e94:	60e3      	str	r3, [r4, #12]
 8000e96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000e9a:	6665      	str	r5, [r4, #100]	; 0x64
 8000e9c:	f000 f847 	bl	8000f2e <__retarget_lock_init_recursive>
 8000ea0:	f7ff ff96 	bl	8000dd0 <__sfp_lock_release>
 8000ea4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000ea8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000eac:	6025      	str	r5, [r4, #0]
 8000eae:	61a5      	str	r5, [r4, #24]
 8000eb0:	2208      	movs	r2, #8
 8000eb2:	4629      	mov	r1, r5
 8000eb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000eb8:	f7ff ff24 	bl	8000d04 <memset>
 8000ebc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000ec0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000ec4:	4620      	mov	r0, r4
 8000ec6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000ec8:	3468      	adds	r4, #104	; 0x68
 8000eca:	e7d9      	b.n	8000e80 <__sfp+0x1c>
 8000ecc:	2104      	movs	r1, #4
 8000ece:	4638      	mov	r0, r7
 8000ed0:	f7ff ff62 	bl	8000d98 <__sfmoreglue>
 8000ed4:	4604      	mov	r4, r0
 8000ed6:	6030      	str	r0, [r6, #0]
 8000ed8:	2800      	cmp	r0, #0
 8000eda:	d1d5      	bne.n	8000e88 <__sfp+0x24>
 8000edc:	f7ff ff78 	bl	8000dd0 <__sfp_lock_release>
 8000ee0:	230c      	movs	r3, #12
 8000ee2:	603b      	str	r3, [r7, #0]
 8000ee4:	e7ee      	b.n	8000ec4 <__sfp+0x60>
 8000ee6:	bf00      	nop
 8000ee8:	08001c6c 	.word	0x08001c6c
 8000eec:	ffff0001 	.word	0xffff0001

08000ef0 <_fwalk_reent>:
 8000ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ef4:	4606      	mov	r6, r0
 8000ef6:	4688      	mov	r8, r1
 8000ef8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8000efc:	2700      	movs	r7, #0
 8000efe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000f02:	f1b9 0901 	subs.w	r9, r9, #1
 8000f06:	d505      	bpl.n	8000f14 <_fwalk_reent+0x24>
 8000f08:	6824      	ldr	r4, [r4, #0]
 8000f0a:	2c00      	cmp	r4, #0
 8000f0c:	d1f7      	bne.n	8000efe <_fwalk_reent+0xe>
 8000f0e:	4638      	mov	r0, r7
 8000f10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000f14:	89ab      	ldrh	r3, [r5, #12]
 8000f16:	2b01      	cmp	r3, #1
 8000f18:	d907      	bls.n	8000f2a <_fwalk_reent+0x3a>
 8000f1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	d003      	beq.n	8000f2a <_fwalk_reent+0x3a>
 8000f22:	4629      	mov	r1, r5
 8000f24:	4630      	mov	r0, r6
 8000f26:	47c0      	blx	r8
 8000f28:	4307      	orrs	r7, r0
 8000f2a:	3568      	adds	r5, #104	; 0x68
 8000f2c:	e7e9      	b.n	8000f02 <_fwalk_reent+0x12>

08000f2e <__retarget_lock_init_recursive>:
 8000f2e:	4770      	bx	lr

08000f30 <__retarget_lock_acquire_recursive>:
 8000f30:	4770      	bx	lr

08000f32 <__retarget_lock_release_recursive>:
 8000f32:	4770      	bx	lr

08000f34 <sbrk_aligned>:
 8000f34:	b570      	push	{r4, r5, r6, lr}
 8000f36:	4e0e      	ldr	r6, [pc, #56]	; (8000f70 <sbrk_aligned+0x3c>)
 8000f38:	460c      	mov	r4, r1
 8000f3a:	6831      	ldr	r1, [r6, #0]
 8000f3c:	4605      	mov	r5, r0
 8000f3e:	b911      	cbnz	r1, 8000f46 <sbrk_aligned+0x12>
 8000f40:	f000 fb7a 	bl	8001638 <_sbrk_r>
 8000f44:	6030      	str	r0, [r6, #0]
 8000f46:	4621      	mov	r1, r4
 8000f48:	4628      	mov	r0, r5
 8000f4a:	f000 fb75 	bl	8001638 <_sbrk_r>
 8000f4e:	1c43      	adds	r3, r0, #1
 8000f50:	d00a      	beq.n	8000f68 <sbrk_aligned+0x34>
 8000f52:	1cc4      	adds	r4, r0, #3
 8000f54:	f024 0403 	bic.w	r4, r4, #3
 8000f58:	42a0      	cmp	r0, r4
 8000f5a:	d007      	beq.n	8000f6c <sbrk_aligned+0x38>
 8000f5c:	1a21      	subs	r1, r4, r0
 8000f5e:	4628      	mov	r0, r5
 8000f60:	f000 fb6a 	bl	8001638 <_sbrk_r>
 8000f64:	3001      	adds	r0, #1
 8000f66:	d101      	bne.n	8000f6c <sbrk_aligned+0x38>
 8000f68:	f04f 34ff 	mov.w	r4, #4294967295
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	bd70      	pop	{r4, r5, r6, pc}
 8000f70:	200000e0 	.word	0x200000e0

08000f74 <_malloc_r>:
 8000f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f78:	1ccd      	adds	r5, r1, #3
 8000f7a:	f025 0503 	bic.w	r5, r5, #3
 8000f7e:	3508      	adds	r5, #8
 8000f80:	2d0c      	cmp	r5, #12
 8000f82:	bf38      	it	cc
 8000f84:	250c      	movcc	r5, #12
 8000f86:	2d00      	cmp	r5, #0
 8000f88:	4607      	mov	r7, r0
 8000f8a:	db01      	blt.n	8000f90 <_malloc_r+0x1c>
 8000f8c:	42a9      	cmp	r1, r5
 8000f8e:	d905      	bls.n	8000f9c <_malloc_r+0x28>
 8000f90:	230c      	movs	r3, #12
 8000f92:	603b      	str	r3, [r7, #0]
 8000f94:	2600      	movs	r6, #0
 8000f96:	4630      	mov	r0, r6
 8000f98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000f9c:	4e2e      	ldr	r6, [pc, #184]	; (8001058 <_malloc_r+0xe4>)
 8000f9e:	f000 fdbb 	bl	8001b18 <__malloc_lock>
 8000fa2:	6833      	ldr	r3, [r6, #0]
 8000fa4:	461c      	mov	r4, r3
 8000fa6:	bb34      	cbnz	r4, 8000ff6 <_malloc_r+0x82>
 8000fa8:	4629      	mov	r1, r5
 8000faa:	4638      	mov	r0, r7
 8000fac:	f7ff ffc2 	bl	8000f34 <sbrk_aligned>
 8000fb0:	1c43      	adds	r3, r0, #1
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	d14d      	bne.n	8001052 <_malloc_r+0xde>
 8000fb6:	6834      	ldr	r4, [r6, #0]
 8000fb8:	4626      	mov	r6, r4
 8000fba:	2e00      	cmp	r6, #0
 8000fbc:	d140      	bne.n	8001040 <_malloc_r+0xcc>
 8000fbe:	6823      	ldr	r3, [r4, #0]
 8000fc0:	4631      	mov	r1, r6
 8000fc2:	4638      	mov	r0, r7
 8000fc4:	eb04 0803 	add.w	r8, r4, r3
 8000fc8:	f000 fb36 	bl	8001638 <_sbrk_r>
 8000fcc:	4580      	cmp	r8, r0
 8000fce:	d13a      	bne.n	8001046 <_malloc_r+0xd2>
 8000fd0:	6821      	ldr	r1, [r4, #0]
 8000fd2:	3503      	adds	r5, #3
 8000fd4:	1a6d      	subs	r5, r5, r1
 8000fd6:	f025 0503 	bic.w	r5, r5, #3
 8000fda:	3508      	adds	r5, #8
 8000fdc:	2d0c      	cmp	r5, #12
 8000fde:	bf38      	it	cc
 8000fe0:	250c      	movcc	r5, #12
 8000fe2:	4629      	mov	r1, r5
 8000fe4:	4638      	mov	r0, r7
 8000fe6:	f7ff ffa5 	bl	8000f34 <sbrk_aligned>
 8000fea:	3001      	adds	r0, #1
 8000fec:	d02b      	beq.n	8001046 <_malloc_r+0xd2>
 8000fee:	6823      	ldr	r3, [r4, #0]
 8000ff0:	442b      	add	r3, r5
 8000ff2:	6023      	str	r3, [r4, #0]
 8000ff4:	e00e      	b.n	8001014 <_malloc_r+0xa0>
 8000ff6:	6822      	ldr	r2, [r4, #0]
 8000ff8:	1b52      	subs	r2, r2, r5
 8000ffa:	d41e      	bmi.n	800103a <_malloc_r+0xc6>
 8000ffc:	2a0b      	cmp	r2, #11
 8000ffe:	d916      	bls.n	800102e <_malloc_r+0xba>
 8001000:	1961      	adds	r1, r4, r5
 8001002:	42a3      	cmp	r3, r4
 8001004:	6025      	str	r5, [r4, #0]
 8001006:	bf18      	it	ne
 8001008:	6059      	strne	r1, [r3, #4]
 800100a:	6863      	ldr	r3, [r4, #4]
 800100c:	bf08      	it	eq
 800100e:	6031      	streq	r1, [r6, #0]
 8001010:	5162      	str	r2, [r4, r5]
 8001012:	604b      	str	r3, [r1, #4]
 8001014:	4638      	mov	r0, r7
 8001016:	f104 060b 	add.w	r6, r4, #11
 800101a:	f000 fd83 	bl	8001b24 <__malloc_unlock>
 800101e:	f026 0607 	bic.w	r6, r6, #7
 8001022:	1d23      	adds	r3, r4, #4
 8001024:	1af2      	subs	r2, r6, r3
 8001026:	d0b6      	beq.n	8000f96 <_malloc_r+0x22>
 8001028:	1b9b      	subs	r3, r3, r6
 800102a:	50a3      	str	r3, [r4, r2]
 800102c:	e7b3      	b.n	8000f96 <_malloc_r+0x22>
 800102e:	6862      	ldr	r2, [r4, #4]
 8001030:	42a3      	cmp	r3, r4
 8001032:	bf0c      	ite	eq
 8001034:	6032      	streq	r2, [r6, #0]
 8001036:	605a      	strne	r2, [r3, #4]
 8001038:	e7ec      	b.n	8001014 <_malloc_r+0xa0>
 800103a:	4623      	mov	r3, r4
 800103c:	6864      	ldr	r4, [r4, #4]
 800103e:	e7b2      	b.n	8000fa6 <_malloc_r+0x32>
 8001040:	4634      	mov	r4, r6
 8001042:	6876      	ldr	r6, [r6, #4]
 8001044:	e7b9      	b.n	8000fba <_malloc_r+0x46>
 8001046:	230c      	movs	r3, #12
 8001048:	603b      	str	r3, [r7, #0]
 800104a:	4638      	mov	r0, r7
 800104c:	f000 fd6a 	bl	8001b24 <__malloc_unlock>
 8001050:	e7a1      	b.n	8000f96 <_malloc_r+0x22>
 8001052:	6025      	str	r5, [r4, #0]
 8001054:	e7de      	b.n	8001014 <_malloc_r+0xa0>
 8001056:	bf00      	nop
 8001058:	200000dc 	.word	0x200000dc

0800105c <__sfputc_r>:
 800105c:	6893      	ldr	r3, [r2, #8]
 800105e:	3b01      	subs	r3, #1
 8001060:	2b00      	cmp	r3, #0
 8001062:	b410      	push	{r4}
 8001064:	6093      	str	r3, [r2, #8]
 8001066:	da08      	bge.n	800107a <__sfputc_r+0x1e>
 8001068:	6994      	ldr	r4, [r2, #24]
 800106a:	42a3      	cmp	r3, r4
 800106c:	db01      	blt.n	8001072 <__sfputc_r+0x16>
 800106e:	290a      	cmp	r1, #10
 8001070:	d103      	bne.n	800107a <__sfputc_r+0x1e>
 8001072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001076:	f000 bb33 	b.w	80016e0 <__swbuf_r>
 800107a:	6813      	ldr	r3, [r2, #0]
 800107c:	1c58      	adds	r0, r3, #1
 800107e:	6010      	str	r0, [r2, #0]
 8001080:	7019      	strb	r1, [r3, #0]
 8001082:	4608      	mov	r0, r1
 8001084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8001088:	4770      	bx	lr

0800108a <__sfputs_r>:
 800108a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800108c:	4606      	mov	r6, r0
 800108e:	460f      	mov	r7, r1
 8001090:	4614      	mov	r4, r2
 8001092:	18d5      	adds	r5, r2, r3
 8001094:	42ac      	cmp	r4, r5
 8001096:	d101      	bne.n	800109c <__sfputs_r+0x12>
 8001098:	2000      	movs	r0, #0
 800109a:	e007      	b.n	80010ac <__sfputs_r+0x22>
 800109c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010a0:	463a      	mov	r2, r7
 80010a2:	4630      	mov	r0, r6
 80010a4:	f7ff ffda 	bl	800105c <__sfputc_r>
 80010a8:	1c43      	adds	r3, r0, #1
 80010aa:	d1f3      	bne.n	8001094 <__sfputs_r+0xa>
 80010ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080010b0 <_vfiprintf_r>:
 80010b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80010b4:	460d      	mov	r5, r1
 80010b6:	b09d      	sub	sp, #116	; 0x74
 80010b8:	4614      	mov	r4, r2
 80010ba:	4698      	mov	r8, r3
 80010bc:	4606      	mov	r6, r0
 80010be:	b118      	cbz	r0, 80010c8 <_vfiprintf_r+0x18>
 80010c0:	6983      	ldr	r3, [r0, #24]
 80010c2:	b90b      	cbnz	r3, 80010c8 <_vfiprintf_r+0x18>
 80010c4:	f7ff fe96 	bl	8000df4 <__sinit>
 80010c8:	4b89      	ldr	r3, [pc, #548]	; (80012f0 <_vfiprintf_r+0x240>)
 80010ca:	429d      	cmp	r5, r3
 80010cc:	d11b      	bne.n	8001106 <_vfiprintf_r+0x56>
 80010ce:	6875      	ldr	r5, [r6, #4]
 80010d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010d2:	07d9      	lsls	r1, r3, #31
 80010d4:	d405      	bmi.n	80010e2 <_vfiprintf_r+0x32>
 80010d6:	89ab      	ldrh	r3, [r5, #12]
 80010d8:	059a      	lsls	r2, r3, #22
 80010da:	d402      	bmi.n	80010e2 <_vfiprintf_r+0x32>
 80010dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80010de:	f7ff ff27 	bl	8000f30 <__retarget_lock_acquire_recursive>
 80010e2:	89ab      	ldrh	r3, [r5, #12]
 80010e4:	071b      	lsls	r3, r3, #28
 80010e6:	d501      	bpl.n	80010ec <_vfiprintf_r+0x3c>
 80010e8:	692b      	ldr	r3, [r5, #16]
 80010ea:	b9eb      	cbnz	r3, 8001128 <_vfiprintf_r+0x78>
 80010ec:	4629      	mov	r1, r5
 80010ee:	4630      	mov	r0, r6
 80010f0:	f000 fb5a 	bl	80017a8 <__swsetup_r>
 80010f4:	b1c0      	cbz	r0, 8001128 <_vfiprintf_r+0x78>
 80010f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80010f8:	07dc      	lsls	r4, r3, #31
 80010fa:	d50e      	bpl.n	800111a <_vfiprintf_r+0x6a>
 80010fc:	f04f 30ff 	mov.w	r0, #4294967295
 8001100:	b01d      	add	sp, #116	; 0x74
 8001102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001106:	4b7b      	ldr	r3, [pc, #492]	; (80012f4 <_vfiprintf_r+0x244>)
 8001108:	429d      	cmp	r5, r3
 800110a:	d101      	bne.n	8001110 <_vfiprintf_r+0x60>
 800110c:	68b5      	ldr	r5, [r6, #8]
 800110e:	e7df      	b.n	80010d0 <_vfiprintf_r+0x20>
 8001110:	4b79      	ldr	r3, [pc, #484]	; (80012f8 <_vfiprintf_r+0x248>)
 8001112:	429d      	cmp	r5, r3
 8001114:	bf08      	it	eq
 8001116:	68f5      	ldreq	r5, [r6, #12]
 8001118:	e7da      	b.n	80010d0 <_vfiprintf_r+0x20>
 800111a:	89ab      	ldrh	r3, [r5, #12]
 800111c:	0598      	lsls	r0, r3, #22
 800111e:	d4ed      	bmi.n	80010fc <_vfiprintf_r+0x4c>
 8001120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001122:	f7ff ff06 	bl	8000f32 <__retarget_lock_release_recursive>
 8001126:	e7e9      	b.n	80010fc <_vfiprintf_r+0x4c>
 8001128:	2300      	movs	r3, #0
 800112a:	9309      	str	r3, [sp, #36]	; 0x24
 800112c:	2320      	movs	r3, #32
 800112e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001132:	f8cd 800c 	str.w	r8, [sp, #12]
 8001136:	2330      	movs	r3, #48	; 0x30
 8001138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80012fc <_vfiprintf_r+0x24c>
 800113c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001140:	f04f 0901 	mov.w	r9, #1
 8001144:	4623      	mov	r3, r4
 8001146:	469a      	mov	sl, r3
 8001148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800114c:	b10a      	cbz	r2, 8001152 <_vfiprintf_r+0xa2>
 800114e:	2a25      	cmp	r2, #37	; 0x25
 8001150:	d1f9      	bne.n	8001146 <_vfiprintf_r+0x96>
 8001152:	ebba 0b04 	subs.w	fp, sl, r4
 8001156:	d00b      	beq.n	8001170 <_vfiprintf_r+0xc0>
 8001158:	465b      	mov	r3, fp
 800115a:	4622      	mov	r2, r4
 800115c:	4629      	mov	r1, r5
 800115e:	4630      	mov	r0, r6
 8001160:	f7ff ff93 	bl	800108a <__sfputs_r>
 8001164:	3001      	adds	r0, #1
 8001166:	f000 80aa 	beq.w	80012be <_vfiprintf_r+0x20e>
 800116a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800116c:	445a      	add	r2, fp
 800116e:	9209      	str	r2, [sp, #36]	; 0x24
 8001170:	f89a 3000 	ldrb.w	r3, [sl]
 8001174:	2b00      	cmp	r3, #0
 8001176:	f000 80a2 	beq.w	80012be <_vfiprintf_r+0x20e>
 800117a:	2300      	movs	r3, #0
 800117c:	f04f 32ff 	mov.w	r2, #4294967295
 8001180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8001184:	f10a 0a01 	add.w	sl, sl, #1
 8001188:	9304      	str	r3, [sp, #16]
 800118a:	9307      	str	r3, [sp, #28]
 800118c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001190:	931a      	str	r3, [sp, #104]	; 0x68
 8001192:	4654      	mov	r4, sl
 8001194:	2205      	movs	r2, #5
 8001196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800119a:	4858      	ldr	r0, [pc, #352]	; (80012fc <_vfiprintf_r+0x24c>)
 800119c:	f7ff f838 	bl	8000210 <memchr>
 80011a0:	9a04      	ldr	r2, [sp, #16]
 80011a2:	b9d8      	cbnz	r0, 80011dc <_vfiprintf_r+0x12c>
 80011a4:	06d1      	lsls	r1, r2, #27
 80011a6:	bf44      	itt	mi
 80011a8:	2320      	movmi	r3, #32
 80011aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011ae:	0713      	lsls	r3, r2, #28
 80011b0:	bf44      	itt	mi
 80011b2:	232b      	movmi	r3, #43	; 0x2b
 80011b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80011b8:	f89a 3000 	ldrb.w	r3, [sl]
 80011bc:	2b2a      	cmp	r3, #42	; 0x2a
 80011be:	d015      	beq.n	80011ec <_vfiprintf_r+0x13c>
 80011c0:	9a07      	ldr	r2, [sp, #28]
 80011c2:	4654      	mov	r4, sl
 80011c4:	2000      	movs	r0, #0
 80011c6:	f04f 0c0a 	mov.w	ip, #10
 80011ca:	4621      	mov	r1, r4
 80011cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80011d0:	3b30      	subs	r3, #48	; 0x30
 80011d2:	2b09      	cmp	r3, #9
 80011d4:	d94e      	bls.n	8001274 <_vfiprintf_r+0x1c4>
 80011d6:	b1b0      	cbz	r0, 8001206 <_vfiprintf_r+0x156>
 80011d8:	9207      	str	r2, [sp, #28]
 80011da:	e014      	b.n	8001206 <_vfiprintf_r+0x156>
 80011dc:	eba0 0308 	sub.w	r3, r0, r8
 80011e0:	fa09 f303 	lsl.w	r3, r9, r3
 80011e4:	4313      	orrs	r3, r2
 80011e6:	9304      	str	r3, [sp, #16]
 80011e8:	46a2      	mov	sl, r4
 80011ea:	e7d2      	b.n	8001192 <_vfiprintf_r+0xe2>
 80011ec:	9b03      	ldr	r3, [sp, #12]
 80011ee:	1d19      	adds	r1, r3, #4
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	9103      	str	r1, [sp, #12]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	bfbb      	ittet	lt
 80011f8:	425b      	neglt	r3, r3
 80011fa:	f042 0202 	orrlt.w	r2, r2, #2
 80011fe:	9307      	strge	r3, [sp, #28]
 8001200:	9307      	strlt	r3, [sp, #28]
 8001202:	bfb8      	it	lt
 8001204:	9204      	strlt	r2, [sp, #16]
 8001206:	7823      	ldrb	r3, [r4, #0]
 8001208:	2b2e      	cmp	r3, #46	; 0x2e
 800120a:	d10c      	bne.n	8001226 <_vfiprintf_r+0x176>
 800120c:	7863      	ldrb	r3, [r4, #1]
 800120e:	2b2a      	cmp	r3, #42	; 0x2a
 8001210:	d135      	bne.n	800127e <_vfiprintf_r+0x1ce>
 8001212:	9b03      	ldr	r3, [sp, #12]
 8001214:	1d1a      	adds	r2, r3, #4
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	9203      	str	r2, [sp, #12]
 800121a:	2b00      	cmp	r3, #0
 800121c:	bfb8      	it	lt
 800121e:	f04f 33ff 	movlt.w	r3, #4294967295
 8001222:	3402      	adds	r4, #2
 8001224:	9305      	str	r3, [sp, #20]
 8001226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800130c <_vfiprintf_r+0x25c>
 800122a:	7821      	ldrb	r1, [r4, #0]
 800122c:	2203      	movs	r2, #3
 800122e:	4650      	mov	r0, sl
 8001230:	f7fe ffee 	bl	8000210 <memchr>
 8001234:	b140      	cbz	r0, 8001248 <_vfiprintf_r+0x198>
 8001236:	2340      	movs	r3, #64	; 0x40
 8001238:	eba0 000a 	sub.w	r0, r0, sl
 800123c:	fa03 f000 	lsl.w	r0, r3, r0
 8001240:	9b04      	ldr	r3, [sp, #16]
 8001242:	4303      	orrs	r3, r0
 8001244:	3401      	adds	r4, #1
 8001246:	9304      	str	r3, [sp, #16]
 8001248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800124c:	482c      	ldr	r0, [pc, #176]	; (8001300 <_vfiprintf_r+0x250>)
 800124e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001252:	2206      	movs	r2, #6
 8001254:	f7fe ffdc 	bl	8000210 <memchr>
 8001258:	2800      	cmp	r0, #0
 800125a:	d03f      	beq.n	80012dc <_vfiprintf_r+0x22c>
 800125c:	4b29      	ldr	r3, [pc, #164]	; (8001304 <_vfiprintf_r+0x254>)
 800125e:	bb1b      	cbnz	r3, 80012a8 <_vfiprintf_r+0x1f8>
 8001260:	9b03      	ldr	r3, [sp, #12]
 8001262:	3307      	adds	r3, #7
 8001264:	f023 0307 	bic.w	r3, r3, #7
 8001268:	3308      	adds	r3, #8
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800126e:	443b      	add	r3, r7
 8001270:	9309      	str	r3, [sp, #36]	; 0x24
 8001272:	e767      	b.n	8001144 <_vfiprintf_r+0x94>
 8001274:	fb0c 3202 	mla	r2, ip, r2, r3
 8001278:	460c      	mov	r4, r1
 800127a:	2001      	movs	r0, #1
 800127c:	e7a5      	b.n	80011ca <_vfiprintf_r+0x11a>
 800127e:	2300      	movs	r3, #0
 8001280:	3401      	adds	r4, #1
 8001282:	9305      	str	r3, [sp, #20]
 8001284:	4619      	mov	r1, r3
 8001286:	f04f 0c0a 	mov.w	ip, #10
 800128a:	4620      	mov	r0, r4
 800128c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8001290:	3a30      	subs	r2, #48	; 0x30
 8001292:	2a09      	cmp	r2, #9
 8001294:	d903      	bls.n	800129e <_vfiprintf_r+0x1ee>
 8001296:	2b00      	cmp	r3, #0
 8001298:	d0c5      	beq.n	8001226 <_vfiprintf_r+0x176>
 800129a:	9105      	str	r1, [sp, #20]
 800129c:	e7c3      	b.n	8001226 <_vfiprintf_r+0x176>
 800129e:	fb0c 2101 	mla	r1, ip, r1, r2
 80012a2:	4604      	mov	r4, r0
 80012a4:	2301      	movs	r3, #1
 80012a6:	e7f0      	b.n	800128a <_vfiprintf_r+0x1da>
 80012a8:	ab03      	add	r3, sp, #12
 80012aa:	9300      	str	r3, [sp, #0]
 80012ac:	462a      	mov	r2, r5
 80012ae:	4b16      	ldr	r3, [pc, #88]	; (8001308 <_vfiprintf_r+0x258>)
 80012b0:	a904      	add	r1, sp, #16
 80012b2:	4630      	mov	r0, r6
 80012b4:	f3af 8000 	nop.w
 80012b8:	4607      	mov	r7, r0
 80012ba:	1c78      	adds	r0, r7, #1
 80012bc:	d1d6      	bne.n	800126c <_vfiprintf_r+0x1bc>
 80012be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80012c0:	07d9      	lsls	r1, r3, #31
 80012c2:	d405      	bmi.n	80012d0 <_vfiprintf_r+0x220>
 80012c4:	89ab      	ldrh	r3, [r5, #12]
 80012c6:	059a      	lsls	r2, r3, #22
 80012c8:	d402      	bmi.n	80012d0 <_vfiprintf_r+0x220>
 80012ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80012cc:	f7ff fe31 	bl	8000f32 <__retarget_lock_release_recursive>
 80012d0:	89ab      	ldrh	r3, [r5, #12]
 80012d2:	065b      	lsls	r3, r3, #25
 80012d4:	f53f af12 	bmi.w	80010fc <_vfiprintf_r+0x4c>
 80012d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80012da:	e711      	b.n	8001100 <_vfiprintf_r+0x50>
 80012dc:	ab03      	add	r3, sp, #12
 80012de:	9300      	str	r3, [sp, #0]
 80012e0:	462a      	mov	r2, r5
 80012e2:	4b09      	ldr	r3, [pc, #36]	; (8001308 <_vfiprintf_r+0x258>)
 80012e4:	a904      	add	r1, sp, #16
 80012e6:	4630      	mov	r0, r6
 80012e8:	f000 f880 	bl	80013ec <_printf_i>
 80012ec:	e7e4      	b.n	80012b8 <_vfiprintf_r+0x208>
 80012ee:	bf00      	nop
 80012f0:	08001c90 	.word	0x08001c90
 80012f4:	08001cb0 	.word	0x08001cb0
 80012f8:	08001c70 	.word	0x08001c70
 80012fc:	08001cd0 	.word	0x08001cd0
 8001300:	08001cda 	.word	0x08001cda
 8001304:	00000000 	.word	0x00000000
 8001308:	0800108b 	.word	0x0800108b
 800130c:	08001cd6 	.word	0x08001cd6

08001310 <_printf_common>:
 8001310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001314:	4616      	mov	r6, r2
 8001316:	4699      	mov	r9, r3
 8001318:	688a      	ldr	r2, [r1, #8]
 800131a:	690b      	ldr	r3, [r1, #16]
 800131c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001320:	4293      	cmp	r3, r2
 8001322:	bfb8      	it	lt
 8001324:	4613      	movlt	r3, r2
 8001326:	6033      	str	r3, [r6, #0]
 8001328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800132c:	4607      	mov	r7, r0
 800132e:	460c      	mov	r4, r1
 8001330:	b10a      	cbz	r2, 8001336 <_printf_common+0x26>
 8001332:	3301      	adds	r3, #1
 8001334:	6033      	str	r3, [r6, #0]
 8001336:	6823      	ldr	r3, [r4, #0]
 8001338:	0699      	lsls	r1, r3, #26
 800133a:	bf42      	ittt	mi
 800133c:	6833      	ldrmi	r3, [r6, #0]
 800133e:	3302      	addmi	r3, #2
 8001340:	6033      	strmi	r3, [r6, #0]
 8001342:	6825      	ldr	r5, [r4, #0]
 8001344:	f015 0506 	ands.w	r5, r5, #6
 8001348:	d106      	bne.n	8001358 <_printf_common+0x48>
 800134a:	f104 0a19 	add.w	sl, r4, #25
 800134e:	68e3      	ldr	r3, [r4, #12]
 8001350:	6832      	ldr	r2, [r6, #0]
 8001352:	1a9b      	subs	r3, r3, r2
 8001354:	42ab      	cmp	r3, r5
 8001356:	dc26      	bgt.n	80013a6 <_printf_common+0x96>
 8001358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800135c:	1e13      	subs	r3, r2, #0
 800135e:	6822      	ldr	r2, [r4, #0]
 8001360:	bf18      	it	ne
 8001362:	2301      	movne	r3, #1
 8001364:	0692      	lsls	r2, r2, #26
 8001366:	d42b      	bmi.n	80013c0 <_printf_common+0xb0>
 8001368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800136c:	4649      	mov	r1, r9
 800136e:	4638      	mov	r0, r7
 8001370:	47c0      	blx	r8
 8001372:	3001      	adds	r0, #1
 8001374:	d01e      	beq.n	80013b4 <_printf_common+0xa4>
 8001376:	6823      	ldr	r3, [r4, #0]
 8001378:	68e5      	ldr	r5, [r4, #12]
 800137a:	6832      	ldr	r2, [r6, #0]
 800137c:	f003 0306 	and.w	r3, r3, #6
 8001380:	2b04      	cmp	r3, #4
 8001382:	bf08      	it	eq
 8001384:	1aad      	subeq	r5, r5, r2
 8001386:	68a3      	ldr	r3, [r4, #8]
 8001388:	6922      	ldr	r2, [r4, #16]
 800138a:	bf0c      	ite	eq
 800138c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001390:	2500      	movne	r5, #0
 8001392:	4293      	cmp	r3, r2
 8001394:	bfc4      	itt	gt
 8001396:	1a9b      	subgt	r3, r3, r2
 8001398:	18ed      	addgt	r5, r5, r3
 800139a:	2600      	movs	r6, #0
 800139c:	341a      	adds	r4, #26
 800139e:	42b5      	cmp	r5, r6
 80013a0:	d11a      	bne.n	80013d8 <_printf_common+0xc8>
 80013a2:	2000      	movs	r0, #0
 80013a4:	e008      	b.n	80013b8 <_printf_common+0xa8>
 80013a6:	2301      	movs	r3, #1
 80013a8:	4652      	mov	r2, sl
 80013aa:	4649      	mov	r1, r9
 80013ac:	4638      	mov	r0, r7
 80013ae:	47c0      	blx	r8
 80013b0:	3001      	adds	r0, #1
 80013b2:	d103      	bne.n	80013bc <_printf_common+0xac>
 80013b4:	f04f 30ff 	mov.w	r0, #4294967295
 80013b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80013bc:	3501      	adds	r5, #1
 80013be:	e7c6      	b.n	800134e <_printf_common+0x3e>
 80013c0:	18e1      	adds	r1, r4, r3
 80013c2:	1c5a      	adds	r2, r3, #1
 80013c4:	2030      	movs	r0, #48	; 0x30
 80013c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80013ca:	4422      	add	r2, r4
 80013cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80013d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80013d4:	3302      	adds	r3, #2
 80013d6:	e7c7      	b.n	8001368 <_printf_common+0x58>
 80013d8:	2301      	movs	r3, #1
 80013da:	4622      	mov	r2, r4
 80013dc:	4649      	mov	r1, r9
 80013de:	4638      	mov	r0, r7
 80013e0:	47c0      	blx	r8
 80013e2:	3001      	adds	r0, #1
 80013e4:	d0e6      	beq.n	80013b4 <_printf_common+0xa4>
 80013e6:	3601      	adds	r6, #1
 80013e8:	e7d9      	b.n	800139e <_printf_common+0x8e>
	...

080013ec <_printf_i>:
 80013ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80013f0:	7e0f      	ldrb	r7, [r1, #24]
 80013f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80013f4:	2f78      	cmp	r7, #120	; 0x78
 80013f6:	4691      	mov	r9, r2
 80013f8:	4680      	mov	r8, r0
 80013fa:	460c      	mov	r4, r1
 80013fc:	469a      	mov	sl, r3
 80013fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8001402:	d807      	bhi.n	8001414 <_printf_i+0x28>
 8001404:	2f62      	cmp	r7, #98	; 0x62
 8001406:	d80a      	bhi.n	800141e <_printf_i+0x32>
 8001408:	2f00      	cmp	r7, #0
 800140a:	f000 80d8 	beq.w	80015be <_printf_i+0x1d2>
 800140e:	2f58      	cmp	r7, #88	; 0x58
 8001410:	f000 80a3 	beq.w	800155a <_printf_i+0x16e>
 8001414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800141c:	e03a      	b.n	8001494 <_printf_i+0xa8>
 800141e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001422:	2b15      	cmp	r3, #21
 8001424:	d8f6      	bhi.n	8001414 <_printf_i+0x28>
 8001426:	a101      	add	r1, pc, #4	; (adr r1, 800142c <_printf_i+0x40>)
 8001428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800142c:	08001485 	.word	0x08001485
 8001430:	08001499 	.word	0x08001499
 8001434:	08001415 	.word	0x08001415
 8001438:	08001415 	.word	0x08001415
 800143c:	08001415 	.word	0x08001415
 8001440:	08001415 	.word	0x08001415
 8001444:	08001499 	.word	0x08001499
 8001448:	08001415 	.word	0x08001415
 800144c:	08001415 	.word	0x08001415
 8001450:	08001415 	.word	0x08001415
 8001454:	08001415 	.word	0x08001415
 8001458:	080015a5 	.word	0x080015a5
 800145c:	080014c9 	.word	0x080014c9
 8001460:	08001587 	.word	0x08001587
 8001464:	08001415 	.word	0x08001415
 8001468:	08001415 	.word	0x08001415
 800146c:	080015c7 	.word	0x080015c7
 8001470:	08001415 	.word	0x08001415
 8001474:	080014c9 	.word	0x080014c9
 8001478:	08001415 	.word	0x08001415
 800147c:	08001415 	.word	0x08001415
 8001480:	0800158f 	.word	0x0800158f
 8001484:	682b      	ldr	r3, [r5, #0]
 8001486:	1d1a      	adds	r2, r3, #4
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	602a      	str	r2, [r5, #0]
 800148c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001494:	2301      	movs	r3, #1
 8001496:	e0a3      	b.n	80015e0 <_printf_i+0x1f4>
 8001498:	6820      	ldr	r0, [r4, #0]
 800149a:	6829      	ldr	r1, [r5, #0]
 800149c:	0606      	lsls	r6, r0, #24
 800149e:	f101 0304 	add.w	r3, r1, #4
 80014a2:	d50a      	bpl.n	80014ba <_printf_i+0xce>
 80014a4:	680e      	ldr	r6, [r1, #0]
 80014a6:	602b      	str	r3, [r5, #0]
 80014a8:	2e00      	cmp	r6, #0
 80014aa:	da03      	bge.n	80014b4 <_printf_i+0xc8>
 80014ac:	232d      	movs	r3, #45	; 0x2d
 80014ae:	4276      	negs	r6, r6
 80014b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014b4:	485e      	ldr	r0, [pc, #376]	; (8001630 <_printf_i+0x244>)
 80014b6:	230a      	movs	r3, #10
 80014b8:	e019      	b.n	80014ee <_printf_i+0x102>
 80014ba:	680e      	ldr	r6, [r1, #0]
 80014bc:	602b      	str	r3, [r5, #0]
 80014be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80014c2:	bf18      	it	ne
 80014c4:	b236      	sxthne	r6, r6
 80014c6:	e7ef      	b.n	80014a8 <_printf_i+0xbc>
 80014c8:	682b      	ldr	r3, [r5, #0]
 80014ca:	6820      	ldr	r0, [r4, #0]
 80014cc:	1d19      	adds	r1, r3, #4
 80014ce:	6029      	str	r1, [r5, #0]
 80014d0:	0601      	lsls	r1, r0, #24
 80014d2:	d501      	bpl.n	80014d8 <_printf_i+0xec>
 80014d4:	681e      	ldr	r6, [r3, #0]
 80014d6:	e002      	b.n	80014de <_printf_i+0xf2>
 80014d8:	0646      	lsls	r6, r0, #25
 80014da:	d5fb      	bpl.n	80014d4 <_printf_i+0xe8>
 80014dc:	881e      	ldrh	r6, [r3, #0]
 80014de:	4854      	ldr	r0, [pc, #336]	; (8001630 <_printf_i+0x244>)
 80014e0:	2f6f      	cmp	r7, #111	; 0x6f
 80014e2:	bf0c      	ite	eq
 80014e4:	2308      	moveq	r3, #8
 80014e6:	230a      	movne	r3, #10
 80014e8:	2100      	movs	r1, #0
 80014ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80014ee:	6865      	ldr	r5, [r4, #4]
 80014f0:	60a5      	str	r5, [r4, #8]
 80014f2:	2d00      	cmp	r5, #0
 80014f4:	bfa2      	ittt	ge
 80014f6:	6821      	ldrge	r1, [r4, #0]
 80014f8:	f021 0104 	bicge.w	r1, r1, #4
 80014fc:	6021      	strge	r1, [r4, #0]
 80014fe:	b90e      	cbnz	r6, 8001504 <_printf_i+0x118>
 8001500:	2d00      	cmp	r5, #0
 8001502:	d04d      	beq.n	80015a0 <_printf_i+0x1b4>
 8001504:	4615      	mov	r5, r2
 8001506:	fbb6 f1f3 	udiv	r1, r6, r3
 800150a:	fb03 6711 	mls	r7, r3, r1, r6
 800150e:	5dc7      	ldrb	r7, [r0, r7]
 8001510:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001514:	4637      	mov	r7, r6
 8001516:	42bb      	cmp	r3, r7
 8001518:	460e      	mov	r6, r1
 800151a:	d9f4      	bls.n	8001506 <_printf_i+0x11a>
 800151c:	2b08      	cmp	r3, #8
 800151e:	d10b      	bne.n	8001538 <_printf_i+0x14c>
 8001520:	6823      	ldr	r3, [r4, #0]
 8001522:	07de      	lsls	r6, r3, #31
 8001524:	d508      	bpl.n	8001538 <_printf_i+0x14c>
 8001526:	6923      	ldr	r3, [r4, #16]
 8001528:	6861      	ldr	r1, [r4, #4]
 800152a:	4299      	cmp	r1, r3
 800152c:	bfde      	ittt	le
 800152e:	2330      	movle	r3, #48	; 0x30
 8001530:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001534:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001538:	1b52      	subs	r2, r2, r5
 800153a:	6122      	str	r2, [r4, #16]
 800153c:	f8cd a000 	str.w	sl, [sp]
 8001540:	464b      	mov	r3, r9
 8001542:	aa03      	add	r2, sp, #12
 8001544:	4621      	mov	r1, r4
 8001546:	4640      	mov	r0, r8
 8001548:	f7ff fee2 	bl	8001310 <_printf_common>
 800154c:	3001      	adds	r0, #1
 800154e:	d14c      	bne.n	80015ea <_printf_i+0x1fe>
 8001550:	f04f 30ff 	mov.w	r0, #4294967295
 8001554:	b004      	add	sp, #16
 8001556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800155a:	4835      	ldr	r0, [pc, #212]	; (8001630 <_printf_i+0x244>)
 800155c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001560:	6829      	ldr	r1, [r5, #0]
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	f851 6b04 	ldr.w	r6, [r1], #4
 8001568:	6029      	str	r1, [r5, #0]
 800156a:	061d      	lsls	r5, r3, #24
 800156c:	d514      	bpl.n	8001598 <_printf_i+0x1ac>
 800156e:	07df      	lsls	r7, r3, #31
 8001570:	bf44      	itt	mi
 8001572:	f043 0320 	orrmi.w	r3, r3, #32
 8001576:	6023      	strmi	r3, [r4, #0]
 8001578:	b91e      	cbnz	r6, 8001582 <_printf_i+0x196>
 800157a:	6823      	ldr	r3, [r4, #0]
 800157c:	f023 0320 	bic.w	r3, r3, #32
 8001580:	6023      	str	r3, [r4, #0]
 8001582:	2310      	movs	r3, #16
 8001584:	e7b0      	b.n	80014e8 <_printf_i+0xfc>
 8001586:	6823      	ldr	r3, [r4, #0]
 8001588:	f043 0320 	orr.w	r3, r3, #32
 800158c:	6023      	str	r3, [r4, #0]
 800158e:	2378      	movs	r3, #120	; 0x78
 8001590:	4828      	ldr	r0, [pc, #160]	; (8001634 <_printf_i+0x248>)
 8001592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001596:	e7e3      	b.n	8001560 <_printf_i+0x174>
 8001598:	0659      	lsls	r1, r3, #25
 800159a:	bf48      	it	mi
 800159c:	b2b6      	uxthmi	r6, r6
 800159e:	e7e6      	b.n	800156e <_printf_i+0x182>
 80015a0:	4615      	mov	r5, r2
 80015a2:	e7bb      	b.n	800151c <_printf_i+0x130>
 80015a4:	682b      	ldr	r3, [r5, #0]
 80015a6:	6826      	ldr	r6, [r4, #0]
 80015a8:	6961      	ldr	r1, [r4, #20]
 80015aa:	1d18      	adds	r0, r3, #4
 80015ac:	6028      	str	r0, [r5, #0]
 80015ae:	0635      	lsls	r5, r6, #24
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	d501      	bpl.n	80015b8 <_printf_i+0x1cc>
 80015b4:	6019      	str	r1, [r3, #0]
 80015b6:	e002      	b.n	80015be <_printf_i+0x1d2>
 80015b8:	0670      	lsls	r0, r6, #25
 80015ba:	d5fb      	bpl.n	80015b4 <_printf_i+0x1c8>
 80015bc:	8019      	strh	r1, [r3, #0]
 80015be:	2300      	movs	r3, #0
 80015c0:	6123      	str	r3, [r4, #16]
 80015c2:	4615      	mov	r5, r2
 80015c4:	e7ba      	b.n	800153c <_printf_i+0x150>
 80015c6:	682b      	ldr	r3, [r5, #0]
 80015c8:	1d1a      	adds	r2, r3, #4
 80015ca:	602a      	str	r2, [r5, #0]
 80015cc:	681d      	ldr	r5, [r3, #0]
 80015ce:	6862      	ldr	r2, [r4, #4]
 80015d0:	2100      	movs	r1, #0
 80015d2:	4628      	mov	r0, r5
 80015d4:	f7fe fe1c 	bl	8000210 <memchr>
 80015d8:	b108      	cbz	r0, 80015de <_printf_i+0x1f2>
 80015da:	1b40      	subs	r0, r0, r5
 80015dc:	6060      	str	r0, [r4, #4]
 80015de:	6863      	ldr	r3, [r4, #4]
 80015e0:	6123      	str	r3, [r4, #16]
 80015e2:	2300      	movs	r3, #0
 80015e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80015e8:	e7a8      	b.n	800153c <_printf_i+0x150>
 80015ea:	6923      	ldr	r3, [r4, #16]
 80015ec:	462a      	mov	r2, r5
 80015ee:	4649      	mov	r1, r9
 80015f0:	4640      	mov	r0, r8
 80015f2:	47d0      	blx	sl
 80015f4:	3001      	adds	r0, #1
 80015f6:	d0ab      	beq.n	8001550 <_printf_i+0x164>
 80015f8:	6823      	ldr	r3, [r4, #0]
 80015fa:	079b      	lsls	r3, r3, #30
 80015fc:	d413      	bmi.n	8001626 <_printf_i+0x23a>
 80015fe:	68e0      	ldr	r0, [r4, #12]
 8001600:	9b03      	ldr	r3, [sp, #12]
 8001602:	4298      	cmp	r0, r3
 8001604:	bfb8      	it	lt
 8001606:	4618      	movlt	r0, r3
 8001608:	e7a4      	b.n	8001554 <_printf_i+0x168>
 800160a:	2301      	movs	r3, #1
 800160c:	4632      	mov	r2, r6
 800160e:	4649      	mov	r1, r9
 8001610:	4640      	mov	r0, r8
 8001612:	47d0      	blx	sl
 8001614:	3001      	adds	r0, #1
 8001616:	d09b      	beq.n	8001550 <_printf_i+0x164>
 8001618:	3501      	adds	r5, #1
 800161a:	68e3      	ldr	r3, [r4, #12]
 800161c:	9903      	ldr	r1, [sp, #12]
 800161e:	1a5b      	subs	r3, r3, r1
 8001620:	42ab      	cmp	r3, r5
 8001622:	dcf2      	bgt.n	800160a <_printf_i+0x21e>
 8001624:	e7eb      	b.n	80015fe <_printf_i+0x212>
 8001626:	2500      	movs	r5, #0
 8001628:	f104 0619 	add.w	r6, r4, #25
 800162c:	e7f5      	b.n	800161a <_printf_i+0x22e>
 800162e:	bf00      	nop
 8001630:	08001ce1 	.word	0x08001ce1
 8001634:	08001cf2 	.word	0x08001cf2

08001638 <_sbrk_r>:
 8001638:	b538      	push	{r3, r4, r5, lr}
 800163a:	4d06      	ldr	r5, [pc, #24]	; (8001654 <_sbrk_r+0x1c>)
 800163c:	2300      	movs	r3, #0
 800163e:	4604      	mov	r4, r0
 8001640:	4608      	mov	r0, r1
 8001642:	602b      	str	r3, [r5, #0]
 8001644:	f7ff f9d2 	bl	80009ec <_sbrk>
 8001648:	1c43      	adds	r3, r0, #1
 800164a:	d102      	bne.n	8001652 <_sbrk_r+0x1a>
 800164c:	682b      	ldr	r3, [r5, #0]
 800164e:	b103      	cbz	r3, 8001652 <_sbrk_r+0x1a>
 8001650:	6023      	str	r3, [r4, #0]
 8001652:	bd38      	pop	{r3, r4, r5, pc}
 8001654:	200000e4 	.word	0x200000e4

08001658 <__sread>:
 8001658:	b510      	push	{r4, lr}
 800165a:	460c      	mov	r4, r1
 800165c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001660:	f000 fab2 	bl	8001bc8 <_read_r>
 8001664:	2800      	cmp	r0, #0
 8001666:	bfab      	itete	ge
 8001668:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800166a:	89a3      	ldrhlt	r3, [r4, #12]
 800166c:	181b      	addge	r3, r3, r0
 800166e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001672:	bfac      	ite	ge
 8001674:	6563      	strge	r3, [r4, #84]	; 0x54
 8001676:	81a3      	strhlt	r3, [r4, #12]
 8001678:	bd10      	pop	{r4, pc}

0800167a <__swrite>:
 800167a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800167e:	461f      	mov	r7, r3
 8001680:	898b      	ldrh	r3, [r1, #12]
 8001682:	05db      	lsls	r3, r3, #23
 8001684:	4605      	mov	r5, r0
 8001686:	460c      	mov	r4, r1
 8001688:	4616      	mov	r6, r2
 800168a:	d505      	bpl.n	8001698 <__swrite+0x1e>
 800168c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001690:	2302      	movs	r3, #2
 8001692:	2200      	movs	r2, #0
 8001694:	f000 f9c8 	bl	8001a28 <_lseek_r>
 8001698:	89a3      	ldrh	r3, [r4, #12]
 800169a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800169e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80016a2:	81a3      	strh	r3, [r4, #12]
 80016a4:	4632      	mov	r2, r6
 80016a6:	463b      	mov	r3, r7
 80016a8:	4628      	mov	r0, r5
 80016aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80016ae:	f000 b869 	b.w	8001784 <_write_r>

080016b2 <__sseek>:
 80016b2:	b510      	push	{r4, lr}
 80016b4:	460c      	mov	r4, r1
 80016b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016ba:	f000 f9b5 	bl	8001a28 <_lseek_r>
 80016be:	1c43      	adds	r3, r0, #1
 80016c0:	89a3      	ldrh	r3, [r4, #12]
 80016c2:	bf15      	itete	ne
 80016c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80016c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80016ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80016ce:	81a3      	strheq	r3, [r4, #12]
 80016d0:	bf18      	it	ne
 80016d2:	81a3      	strhne	r3, [r4, #12]
 80016d4:	bd10      	pop	{r4, pc}

080016d6 <__sclose>:
 80016d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80016da:	f000 b8d3 	b.w	8001884 <_close_r>
	...

080016e0 <__swbuf_r>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	460e      	mov	r6, r1
 80016e4:	4614      	mov	r4, r2
 80016e6:	4605      	mov	r5, r0
 80016e8:	b118      	cbz	r0, 80016f2 <__swbuf_r+0x12>
 80016ea:	6983      	ldr	r3, [r0, #24]
 80016ec:	b90b      	cbnz	r3, 80016f2 <__swbuf_r+0x12>
 80016ee:	f7ff fb81 	bl	8000df4 <__sinit>
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <__swbuf_r+0x98>)
 80016f4:	429c      	cmp	r4, r3
 80016f6:	d12b      	bne.n	8001750 <__swbuf_r+0x70>
 80016f8:	686c      	ldr	r4, [r5, #4]
 80016fa:	69a3      	ldr	r3, [r4, #24]
 80016fc:	60a3      	str	r3, [r4, #8]
 80016fe:	89a3      	ldrh	r3, [r4, #12]
 8001700:	071a      	lsls	r2, r3, #28
 8001702:	d52f      	bpl.n	8001764 <__swbuf_r+0x84>
 8001704:	6923      	ldr	r3, [r4, #16]
 8001706:	b36b      	cbz	r3, 8001764 <__swbuf_r+0x84>
 8001708:	6923      	ldr	r3, [r4, #16]
 800170a:	6820      	ldr	r0, [r4, #0]
 800170c:	1ac0      	subs	r0, r0, r3
 800170e:	6963      	ldr	r3, [r4, #20]
 8001710:	b2f6      	uxtb	r6, r6
 8001712:	4283      	cmp	r3, r0
 8001714:	4637      	mov	r7, r6
 8001716:	dc04      	bgt.n	8001722 <__swbuf_r+0x42>
 8001718:	4621      	mov	r1, r4
 800171a:	4628      	mov	r0, r5
 800171c:	f000 f948 	bl	80019b0 <_fflush_r>
 8001720:	bb30      	cbnz	r0, 8001770 <__swbuf_r+0x90>
 8001722:	68a3      	ldr	r3, [r4, #8]
 8001724:	3b01      	subs	r3, #1
 8001726:	60a3      	str	r3, [r4, #8]
 8001728:	6823      	ldr	r3, [r4, #0]
 800172a:	1c5a      	adds	r2, r3, #1
 800172c:	6022      	str	r2, [r4, #0]
 800172e:	701e      	strb	r6, [r3, #0]
 8001730:	6963      	ldr	r3, [r4, #20]
 8001732:	3001      	adds	r0, #1
 8001734:	4283      	cmp	r3, r0
 8001736:	d004      	beq.n	8001742 <__swbuf_r+0x62>
 8001738:	89a3      	ldrh	r3, [r4, #12]
 800173a:	07db      	lsls	r3, r3, #31
 800173c:	d506      	bpl.n	800174c <__swbuf_r+0x6c>
 800173e:	2e0a      	cmp	r6, #10
 8001740:	d104      	bne.n	800174c <__swbuf_r+0x6c>
 8001742:	4621      	mov	r1, r4
 8001744:	4628      	mov	r0, r5
 8001746:	f000 f933 	bl	80019b0 <_fflush_r>
 800174a:	b988      	cbnz	r0, 8001770 <__swbuf_r+0x90>
 800174c:	4638      	mov	r0, r7
 800174e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001750:	4b0a      	ldr	r3, [pc, #40]	; (800177c <__swbuf_r+0x9c>)
 8001752:	429c      	cmp	r4, r3
 8001754:	d101      	bne.n	800175a <__swbuf_r+0x7a>
 8001756:	68ac      	ldr	r4, [r5, #8]
 8001758:	e7cf      	b.n	80016fa <__swbuf_r+0x1a>
 800175a:	4b09      	ldr	r3, [pc, #36]	; (8001780 <__swbuf_r+0xa0>)
 800175c:	429c      	cmp	r4, r3
 800175e:	bf08      	it	eq
 8001760:	68ec      	ldreq	r4, [r5, #12]
 8001762:	e7ca      	b.n	80016fa <__swbuf_r+0x1a>
 8001764:	4621      	mov	r1, r4
 8001766:	4628      	mov	r0, r5
 8001768:	f000 f81e 	bl	80017a8 <__swsetup_r>
 800176c:	2800      	cmp	r0, #0
 800176e:	d0cb      	beq.n	8001708 <__swbuf_r+0x28>
 8001770:	f04f 37ff 	mov.w	r7, #4294967295
 8001774:	e7ea      	b.n	800174c <__swbuf_r+0x6c>
 8001776:	bf00      	nop
 8001778:	08001c90 	.word	0x08001c90
 800177c:	08001cb0 	.word	0x08001cb0
 8001780:	08001c70 	.word	0x08001c70

08001784 <_write_r>:
 8001784:	b538      	push	{r3, r4, r5, lr}
 8001786:	4d07      	ldr	r5, [pc, #28]	; (80017a4 <_write_r+0x20>)
 8001788:	4604      	mov	r4, r0
 800178a:	4608      	mov	r0, r1
 800178c:	4611      	mov	r1, r2
 800178e:	2200      	movs	r2, #0
 8001790:	602a      	str	r2, [r5, #0]
 8001792:	461a      	mov	r2, r3
 8001794:	f7ff f8d9 	bl	800094a <_write>
 8001798:	1c43      	adds	r3, r0, #1
 800179a:	d102      	bne.n	80017a2 <_write_r+0x1e>
 800179c:	682b      	ldr	r3, [r5, #0]
 800179e:	b103      	cbz	r3, 80017a2 <_write_r+0x1e>
 80017a0:	6023      	str	r3, [r4, #0]
 80017a2:	bd38      	pop	{r3, r4, r5, pc}
 80017a4:	200000e4 	.word	0x200000e4

080017a8 <__swsetup_r>:
 80017a8:	4b32      	ldr	r3, [pc, #200]	; (8001874 <__swsetup_r+0xcc>)
 80017aa:	b570      	push	{r4, r5, r6, lr}
 80017ac:	681d      	ldr	r5, [r3, #0]
 80017ae:	4606      	mov	r6, r0
 80017b0:	460c      	mov	r4, r1
 80017b2:	b125      	cbz	r5, 80017be <__swsetup_r+0x16>
 80017b4:	69ab      	ldr	r3, [r5, #24]
 80017b6:	b913      	cbnz	r3, 80017be <__swsetup_r+0x16>
 80017b8:	4628      	mov	r0, r5
 80017ba:	f7ff fb1b 	bl	8000df4 <__sinit>
 80017be:	4b2e      	ldr	r3, [pc, #184]	; (8001878 <__swsetup_r+0xd0>)
 80017c0:	429c      	cmp	r4, r3
 80017c2:	d10f      	bne.n	80017e4 <__swsetup_r+0x3c>
 80017c4:	686c      	ldr	r4, [r5, #4]
 80017c6:	89a3      	ldrh	r3, [r4, #12]
 80017c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80017cc:	0719      	lsls	r1, r3, #28
 80017ce:	d42c      	bmi.n	800182a <__swsetup_r+0x82>
 80017d0:	06dd      	lsls	r5, r3, #27
 80017d2:	d411      	bmi.n	80017f8 <__swsetup_r+0x50>
 80017d4:	2309      	movs	r3, #9
 80017d6:	6033      	str	r3, [r6, #0]
 80017d8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80017dc:	81a3      	strh	r3, [r4, #12]
 80017de:	f04f 30ff 	mov.w	r0, #4294967295
 80017e2:	e03e      	b.n	8001862 <__swsetup_r+0xba>
 80017e4:	4b25      	ldr	r3, [pc, #148]	; (800187c <__swsetup_r+0xd4>)
 80017e6:	429c      	cmp	r4, r3
 80017e8:	d101      	bne.n	80017ee <__swsetup_r+0x46>
 80017ea:	68ac      	ldr	r4, [r5, #8]
 80017ec:	e7eb      	b.n	80017c6 <__swsetup_r+0x1e>
 80017ee:	4b24      	ldr	r3, [pc, #144]	; (8001880 <__swsetup_r+0xd8>)
 80017f0:	429c      	cmp	r4, r3
 80017f2:	bf08      	it	eq
 80017f4:	68ec      	ldreq	r4, [r5, #12]
 80017f6:	e7e6      	b.n	80017c6 <__swsetup_r+0x1e>
 80017f8:	0758      	lsls	r0, r3, #29
 80017fa:	d512      	bpl.n	8001822 <__swsetup_r+0x7a>
 80017fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80017fe:	b141      	cbz	r1, 8001812 <__swsetup_r+0x6a>
 8001800:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001804:	4299      	cmp	r1, r3
 8001806:	d002      	beq.n	800180e <__swsetup_r+0x66>
 8001808:	4630      	mov	r0, r6
 800180a:	f000 f991 	bl	8001b30 <_free_r>
 800180e:	2300      	movs	r3, #0
 8001810:	6363      	str	r3, [r4, #52]	; 0x34
 8001812:	89a3      	ldrh	r3, [r4, #12]
 8001814:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001818:	81a3      	strh	r3, [r4, #12]
 800181a:	2300      	movs	r3, #0
 800181c:	6063      	str	r3, [r4, #4]
 800181e:	6923      	ldr	r3, [r4, #16]
 8001820:	6023      	str	r3, [r4, #0]
 8001822:	89a3      	ldrh	r3, [r4, #12]
 8001824:	f043 0308 	orr.w	r3, r3, #8
 8001828:	81a3      	strh	r3, [r4, #12]
 800182a:	6923      	ldr	r3, [r4, #16]
 800182c:	b94b      	cbnz	r3, 8001842 <__swsetup_r+0x9a>
 800182e:	89a3      	ldrh	r3, [r4, #12]
 8001830:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001834:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001838:	d003      	beq.n	8001842 <__swsetup_r+0x9a>
 800183a:	4621      	mov	r1, r4
 800183c:	4630      	mov	r0, r6
 800183e:	f000 f92b 	bl	8001a98 <__smakebuf_r>
 8001842:	89a0      	ldrh	r0, [r4, #12]
 8001844:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001848:	f010 0301 	ands.w	r3, r0, #1
 800184c:	d00a      	beq.n	8001864 <__swsetup_r+0xbc>
 800184e:	2300      	movs	r3, #0
 8001850:	60a3      	str	r3, [r4, #8]
 8001852:	6963      	ldr	r3, [r4, #20]
 8001854:	425b      	negs	r3, r3
 8001856:	61a3      	str	r3, [r4, #24]
 8001858:	6923      	ldr	r3, [r4, #16]
 800185a:	b943      	cbnz	r3, 800186e <__swsetup_r+0xc6>
 800185c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001860:	d1ba      	bne.n	80017d8 <__swsetup_r+0x30>
 8001862:	bd70      	pop	{r4, r5, r6, pc}
 8001864:	0781      	lsls	r1, r0, #30
 8001866:	bf58      	it	pl
 8001868:	6963      	ldrpl	r3, [r4, #20]
 800186a:	60a3      	str	r3, [r4, #8]
 800186c:	e7f4      	b.n	8001858 <__swsetup_r+0xb0>
 800186e:	2000      	movs	r0, #0
 8001870:	e7f7      	b.n	8001862 <__swsetup_r+0xba>
 8001872:	bf00      	nop
 8001874:	20000000 	.word	0x20000000
 8001878:	08001c90 	.word	0x08001c90
 800187c:	08001cb0 	.word	0x08001cb0
 8001880:	08001c70 	.word	0x08001c70

08001884 <_close_r>:
 8001884:	b538      	push	{r3, r4, r5, lr}
 8001886:	4d06      	ldr	r5, [pc, #24]	; (80018a0 <_close_r+0x1c>)
 8001888:	2300      	movs	r3, #0
 800188a:	4604      	mov	r4, r0
 800188c:	4608      	mov	r0, r1
 800188e:	602b      	str	r3, [r5, #0]
 8001890:	f7ff f877 	bl	8000982 <_close>
 8001894:	1c43      	adds	r3, r0, #1
 8001896:	d102      	bne.n	800189e <_close_r+0x1a>
 8001898:	682b      	ldr	r3, [r5, #0]
 800189a:	b103      	cbz	r3, 800189e <_close_r+0x1a>
 800189c:	6023      	str	r3, [r4, #0]
 800189e:	bd38      	pop	{r3, r4, r5, pc}
 80018a0:	200000e4 	.word	0x200000e4

080018a4 <__sflush_r>:
 80018a4:	898a      	ldrh	r2, [r1, #12]
 80018a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80018aa:	4605      	mov	r5, r0
 80018ac:	0710      	lsls	r0, r2, #28
 80018ae:	460c      	mov	r4, r1
 80018b0:	d458      	bmi.n	8001964 <__sflush_r+0xc0>
 80018b2:	684b      	ldr	r3, [r1, #4]
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	dc05      	bgt.n	80018c4 <__sflush_r+0x20>
 80018b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	dc02      	bgt.n	80018c4 <__sflush_r+0x20>
 80018be:	2000      	movs	r0, #0
 80018c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80018c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018c6:	2e00      	cmp	r6, #0
 80018c8:	d0f9      	beq.n	80018be <__sflush_r+0x1a>
 80018ca:	2300      	movs	r3, #0
 80018cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80018d0:	682f      	ldr	r7, [r5, #0]
 80018d2:	602b      	str	r3, [r5, #0]
 80018d4:	d032      	beq.n	800193c <__sflush_r+0x98>
 80018d6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80018d8:	89a3      	ldrh	r3, [r4, #12]
 80018da:	075a      	lsls	r2, r3, #29
 80018dc:	d505      	bpl.n	80018ea <__sflush_r+0x46>
 80018de:	6863      	ldr	r3, [r4, #4]
 80018e0:	1ac0      	subs	r0, r0, r3
 80018e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80018e4:	b10b      	cbz	r3, 80018ea <__sflush_r+0x46>
 80018e6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80018e8:	1ac0      	subs	r0, r0, r3
 80018ea:	2300      	movs	r3, #0
 80018ec:	4602      	mov	r2, r0
 80018ee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80018f0:	6a21      	ldr	r1, [r4, #32]
 80018f2:	4628      	mov	r0, r5
 80018f4:	47b0      	blx	r6
 80018f6:	1c43      	adds	r3, r0, #1
 80018f8:	89a3      	ldrh	r3, [r4, #12]
 80018fa:	d106      	bne.n	800190a <__sflush_r+0x66>
 80018fc:	6829      	ldr	r1, [r5, #0]
 80018fe:	291d      	cmp	r1, #29
 8001900:	d82c      	bhi.n	800195c <__sflush_r+0xb8>
 8001902:	4a2a      	ldr	r2, [pc, #168]	; (80019ac <__sflush_r+0x108>)
 8001904:	40ca      	lsrs	r2, r1
 8001906:	07d6      	lsls	r6, r2, #31
 8001908:	d528      	bpl.n	800195c <__sflush_r+0xb8>
 800190a:	2200      	movs	r2, #0
 800190c:	6062      	str	r2, [r4, #4]
 800190e:	04d9      	lsls	r1, r3, #19
 8001910:	6922      	ldr	r2, [r4, #16]
 8001912:	6022      	str	r2, [r4, #0]
 8001914:	d504      	bpl.n	8001920 <__sflush_r+0x7c>
 8001916:	1c42      	adds	r2, r0, #1
 8001918:	d101      	bne.n	800191e <__sflush_r+0x7a>
 800191a:	682b      	ldr	r3, [r5, #0]
 800191c:	b903      	cbnz	r3, 8001920 <__sflush_r+0x7c>
 800191e:	6560      	str	r0, [r4, #84]	; 0x54
 8001920:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001922:	602f      	str	r7, [r5, #0]
 8001924:	2900      	cmp	r1, #0
 8001926:	d0ca      	beq.n	80018be <__sflush_r+0x1a>
 8001928:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800192c:	4299      	cmp	r1, r3
 800192e:	d002      	beq.n	8001936 <__sflush_r+0x92>
 8001930:	4628      	mov	r0, r5
 8001932:	f000 f8fd 	bl	8001b30 <_free_r>
 8001936:	2000      	movs	r0, #0
 8001938:	6360      	str	r0, [r4, #52]	; 0x34
 800193a:	e7c1      	b.n	80018c0 <__sflush_r+0x1c>
 800193c:	6a21      	ldr	r1, [r4, #32]
 800193e:	2301      	movs	r3, #1
 8001940:	4628      	mov	r0, r5
 8001942:	47b0      	blx	r6
 8001944:	1c41      	adds	r1, r0, #1
 8001946:	d1c7      	bne.n	80018d8 <__sflush_r+0x34>
 8001948:	682b      	ldr	r3, [r5, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	d0c4      	beq.n	80018d8 <__sflush_r+0x34>
 800194e:	2b1d      	cmp	r3, #29
 8001950:	d001      	beq.n	8001956 <__sflush_r+0xb2>
 8001952:	2b16      	cmp	r3, #22
 8001954:	d101      	bne.n	800195a <__sflush_r+0xb6>
 8001956:	602f      	str	r7, [r5, #0]
 8001958:	e7b1      	b.n	80018be <__sflush_r+0x1a>
 800195a:	89a3      	ldrh	r3, [r4, #12]
 800195c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001960:	81a3      	strh	r3, [r4, #12]
 8001962:	e7ad      	b.n	80018c0 <__sflush_r+0x1c>
 8001964:	690f      	ldr	r7, [r1, #16]
 8001966:	2f00      	cmp	r7, #0
 8001968:	d0a9      	beq.n	80018be <__sflush_r+0x1a>
 800196a:	0793      	lsls	r3, r2, #30
 800196c:	680e      	ldr	r6, [r1, #0]
 800196e:	bf08      	it	eq
 8001970:	694b      	ldreq	r3, [r1, #20]
 8001972:	600f      	str	r7, [r1, #0]
 8001974:	bf18      	it	ne
 8001976:	2300      	movne	r3, #0
 8001978:	eba6 0807 	sub.w	r8, r6, r7
 800197c:	608b      	str	r3, [r1, #8]
 800197e:	f1b8 0f00 	cmp.w	r8, #0
 8001982:	dd9c      	ble.n	80018be <__sflush_r+0x1a>
 8001984:	6a21      	ldr	r1, [r4, #32]
 8001986:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001988:	4643      	mov	r3, r8
 800198a:	463a      	mov	r2, r7
 800198c:	4628      	mov	r0, r5
 800198e:	47b0      	blx	r6
 8001990:	2800      	cmp	r0, #0
 8001992:	dc06      	bgt.n	80019a2 <__sflush_r+0xfe>
 8001994:	89a3      	ldrh	r3, [r4, #12]
 8001996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800199a:	81a3      	strh	r3, [r4, #12]
 800199c:	f04f 30ff 	mov.w	r0, #4294967295
 80019a0:	e78e      	b.n	80018c0 <__sflush_r+0x1c>
 80019a2:	4407      	add	r7, r0
 80019a4:	eba8 0800 	sub.w	r8, r8, r0
 80019a8:	e7e9      	b.n	800197e <__sflush_r+0xda>
 80019aa:	bf00      	nop
 80019ac:	20400001 	.word	0x20400001

080019b0 <_fflush_r>:
 80019b0:	b538      	push	{r3, r4, r5, lr}
 80019b2:	690b      	ldr	r3, [r1, #16]
 80019b4:	4605      	mov	r5, r0
 80019b6:	460c      	mov	r4, r1
 80019b8:	b913      	cbnz	r3, 80019c0 <_fflush_r+0x10>
 80019ba:	2500      	movs	r5, #0
 80019bc:	4628      	mov	r0, r5
 80019be:	bd38      	pop	{r3, r4, r5, pc}
 80019c0:	b118      	cbz	r0, 80019ca <_fflush_r+0x1a>
 80019c2:	6983      	ldr	r3, [r0, #24]
 80019c4:	b90b      	cbnz	r3, 80019ca <_fflush_r+0x1a>
 80019c6:	f7ff fa15 	bl	8000df4 <__sinit>
 80019ca:	4b14      	ldr	r3, [pc, #80]	; (8001a1c <_fflush_r+0x6c>)
 80019cc:	429c      	cmp	r4, r3
 80019ce:	d11b      	bne.n	8001a08 <_fflush_r+0x58>
 80019d0:	686c      	ldr	r4, [r5, #4]
 80019d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ef      	beq.n	80019ba <_fflush_r+0xa>
 80019da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80019dc:	07d0      	lsls	r0, r2, #31
 80019de:	d404      	bmi.n	80019ea <_fflush_r+0x3a>
 80019e0:	0599      	lsls	r1, r3, #22
 80019e2:	d402      	bmi.n	80019ea <_fflush_r+0x3a>
 80019e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80019e6:	f7ff faa3 	bl	8000f30 <__retarget_lock_acquire_recursive>
 80019ea:	4628      	mov	r0, r5
 80019ec:	4621      	mov	r1, r4
 80019ee:	f7ff ff59 	bl	80018a4 <__sflush_r>
 80019f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80019f4:	07da      	lsls	r2, r3, #31
 80019f6:	4605      	mov	r5, r0
 80019f8:	d4e0      	bmi.n	80019bc <_fflush_r+0xc>
 80019fa:	89a3      	ldrh	r3, [r4, #12]
 80019fc:	059b      	lsls	r3, r3, #22
 80019fe:	d4dd      	bmi.n	80019bc <_fflush_r+0xc>
 8001a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8001a02:	f7ff fa96 	bl	8000f32 <__retarget_lock_release_recursive>
 8001a06:	e7d9      	b.n	80019bc <_fflush_r+0xc>
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <_fflush_r+0x70>)
 8001a0a:	429c      	cmp	r4, r3
 8001a0c:	d101      	bne.n	8001a12 <_fflush_r+0x62>
 8001a0e:	68ac      	ldr	r4, [r5, #8]
 8001a10:	e7df      	b.n	80019d2 <_fflush_r+0x22>
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <_fflush_r+0x74>)
 8001a14:	429c      	cmp	r4, r3
 8001a16:	bf08      	it	eq
 8001a18:	68ec      	ldreq	r4, [r5, #12]
 8001a1a:	e7da      	b.n	80019d2 <_fflush_r+0x22>
 8001a1c:	08001c90 	.word	0x08001c90
 8001a20:	08001cb0 	.word	0x08001cb0
 8001a24:	08001c70 	.word	0x08001c70

08001a28 <_lseek_r>:
 8001a28:	b538      	push	{r3, r4, r5, lr}
 8001a2a:	4d07      	ldr	r5, [pc, #28]	; (8001a48 <_lseek_r+0x20>)
 8001a2c:	4604      	mov	r4, r0
 8001a2e:	4608      	mov	r0, r1
 8001a30:	4611      	mov	r1, r2
 8001a32:	2200      	movs	r2, #0
 8001a34:	602a      	str	r2, [r5, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	f7fe ffca 	bl	80009d0 <_lseek>
 8001a3c:	1c43      	adds	r3, r0, #1
 8001a3e:	d102      	bne.n	8001a46 <_lseek_r+0x1e>
 8001a40:	682b      	ldr	r3, [r5, #0]
 8001a42:	b103      	cbz	r3, 8001a46 <_lseek_r+0x1e>
 8001a44:	6023      	str	r3, [r4, #0]
 8001a46:	bd38      	pop	{r3, r4, r5, pc}
 8001a48:	200000e4 	.word	0x200000e4

08001a4c <__swhatbuf_r>:
 8001a4c:	b570      	push	{r4, r5, r6, lr}
 8001a4e:	460e      	mov	r6, r1
 8001a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001a54:	2900      	cmp	r1, #0
 8001a56:	b096      	sub	sp, #88	; 0x58
 8001a58:	4614      	mov	r4, r2
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	da08      	bge.n	8001a70 <__swhatbuf_r+0x24>
 8001a5e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001a62:	2200      	movs	r2, #0
 8001a64:	602a      	str	r2, [r5, #0]
 8001a66:	061a      	lsls	r2, r3, #24
 8001a68:	d410      	bmi.n	8001a8c <__swhatbuf_r+0x40>
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	e00e      	b.n	8001a8e <__swhatbuf_r+0x42>
 8001a70:	466a      	mov	r2, sp
 8001a72:	f000 f8bb 	bl	8001bec <_fstat_r>
 8001a76:	2800      	cmp	r0, #0
 8001a78:	dbf1      	blt.n	8001a5e <__swhatbuf_r+0x12>
 8001a7a:	9a01      	ldr	r2, [sp, #4]
 8001a7c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001a80:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001a84:	425a      	negs	r2, r3
 8001a86:	415a      	adcs	r2, r3
 8001a88:	602a      	str	r2, [r5, #0]
 8001a8a:	e7ee      	b.n	8001a6a <__swhatbuf_r+0x1e>
 8001a8c:	2340      	movs	r3, #64	; 0x40
 8001a8e:	2000      	movs	r0, #0
 8001a90:	6023      	str	r3, [r4, #0]
 8001a92:	b016      	add	sp, #88	; 0x58
 8001a94:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a98 <__smakebuf_r>:
 8001a98:	898b      	ldrh	r3, [r1, #12]
 8001a9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001a9c:	079d      	lsls	r5, r3, #30
 8001a9e:	4606      	mov	r6, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	d507      	bpl.n	8001ab4 <__smakebuf_r+0x1c>
 8001aa4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001aa8:	6023      	str	r3, [r4, #0]
 8001aaa:	6123      	str	r3, [r4, #16]
 8001aac:	2301      	movs	r3, #1
 8001aae:	6163      	str	r3, [r4, #20]
 8001ab0:	b002      	add	sp, #8
 8001ab2:	bd70      	pop	{r4, r5, r6, pc}
 8001ab4:	ab01      	add	r3, sp, #4
 8001ab6:	466a      	mov	r2, sp
 8001ab8:	f7ff ffc8 	bl	8001a4c <__swhatbuf_r>
 8001abc:	9900      	ldr	r1, [sp, #0]
 8001abe:	4605      	mov	r5, r0
 8001ac0:	4630      	mov	r0, r6
 8001ac2:	f7ff fa57 	bl	8000f74 <_malloc_r>
 8001ac6:	b948      	cbnz	r0, 8001adc <__smakebuf_r+0x44>
 8001ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001acc:	059a      	lsls	r2, r3, #22
 8001ace:	d4ef      	bmi.n	8001ab0 <__smakebuf_r+0x18>
 8001ad0:	f023 0303 	bic.w	r3, r3, #3
 8001ad4:	f043 0302 	orr.w	r3, r3, #2
 8001ad8:	81a3      	strh	r3, [r4, #12]
 8001ada:	e7e3      	b.n	8001aa4 <__smakebuf_r+0xc>
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <__smakebuf_r+0x7c>)
 8001ade:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ae0:	89a3      	ldrh	r3, [r4, #12]
 8001ae2:	6020      	str	r0, [r4, #0]
 8001ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ae8:	81a3      	strh	r3, [r4, #12]
 8001aea:	9b00      	ldr	r3, [sp, #0]
 8001aec:	6163      	str	r3, [r4, #20]
 8001aee:	9b01      	ldr	r3, [sp, #4]
 8001af0:	6120      	str	r0, [r4, #16]
 8001af2:	b15b      	cbz	r3, 8001b0c <__smakebuf_r+0x74>
 8001af4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001af8:	4630      	mov	r0, r6
 8001afa:	f000 f889 	bl	8001c10 <_isatty_r>
 8001afe:	b128      	cbz	r0, 8001b0c <__smakebuf_r+0x74>
 8001b00:	89a3      	ldrh	r3, [r4, #12]
 8001b02:	f023 0303 	bic.w	r3, r3, #3
 8001b06:	f043 0301 	orr.w	r3, r3, #1
 8001b0a:	81a3      	strh	r3, [r4, #12]
 8001b0c:	89a0      	ldrh	r0, [r4, #12]
 8001b0e:	4305      	orrs	r5, r0
 8001b10:	81a5      	strh	r5, [r4, #12]
 8001b12:	e7cd      	b.n	8001ab0 <__smakebuf_r+0x18>
 8001b14:	08000d8d 	.word	0x08000d8d

08001b18 <__malloc_lock>:
 8001b18:	4801      	ldr	r0, [pc, #4]	; (8001b20 <__malloc_lock+0x8>)
 8001b1a:	f7ff ba09 	b.w	8000f30 <__retarget_lock_acquire_recursive>
 8001b1e:	bf00      	nop
 8001b20:	200000d8 	.word	0x200000d8

08001b24 <__malloc_unlock>:
 8001b24:	4801      	ldr	r0, [pc, #4]	; (8001b2c <__malloc_unlock+0x8>)
 8001b26:	f7ff ba04 	b.w	8000f32 <__retarget_lock_release_recursive>
 8001b2a:	bf00      	nop
 8001b2c:	200000d8 	.word	0x200000d8

08001b30 <_free_r>:
 8001b30:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8001b32:	2900      	cmp	r1, #0
 8001b34:	d044      	beq.n	8001bc0 <_free_r+0x90>
 8001b36:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001b3a:	9001      	str	r0, [sp, #4]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	f1a1 0404 	sub.w	r4, r1, #4
 8001b42:	bfb8      	it	lt
 8001b44:	18e4      	addlt	r4, r4, r3
 8001b46:	f7ff ffe7 	bl	8001b18 <__malloc_lock>
 8001b4a:	4a1e      	ldr	r2, [pc, #120]	; (8001bc4 <_free_r+0x94>)
 8001b4c:	9801      	ldr	r0, [sp, #4]
 8001b4e:	6813      	ldr	r3, [r2, #0]
 8001b50:	b933      	cbnz	r3, 8001b60 <_free_r+0x30>
 8001b52:	6063      	str	r3, [r4, #4]
 8001b54:	6014      	str	r4, [r2, #0]
 8001b56:	b003      	add	sp, #12
 8001b58:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001b5c:	f7ff bfe2 	b.w	8001b24 <__malloc_unlock>
 8001b60:	42a3      	cmp	r3, r4
 8001b62:	d908      	bls.n	8001b76 <_free_r+0x46>
 8001b64:	6825      	ldr	r5, [r4, #0]
 8001b66:	1961      	adds	r1, r4, r5
 8001b68:	428b      	cmp	r3, r1
 8001b6a:	bf01      	itttt	eq
 8001b6c:	6819      	ldreq	r1, [r3, #0]
 8001b6e:	685b      	ldreq	r3, [r3, #4]
 8001b70:	1949      	addeq	r1, r1, r5
 8001b72:	6021      	streq	r1, [r4, #0]
 8001b74:	e7ed      	b.n	8001b52 <_free_r+0x22>
 8001b76:	461a      	mov	r2, r3
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	b10b      	cbz	r3, 8001b80 <_free_r+0x50>
 8001b7c:	42a3      	cmp	r3, r4
 8001b7e:	d9fa      	bls.n	8001b76 <_free_r+0x46>
 8001b80:	6811      	ldr	r1, [r2, #0]
 8001b82:	1855      	adds	r5, r2, r1
 8001b84:	42a5      	cmp	r5, r4
 8001b86:	d10b      	bne.n	8001ba0 <_free_r+0x70>
 8001b88:	6824      	ldr	r4, [r4, #0]
 8001b8a:	4421      	add	r1, r4
 8001b8c:	1854      	adds	r4, r2, r1
 8001b8e:	42a3      	cmp	r3, r4
 8001b90:	6011      	str	r1, [r2, #0]
 8001b92:	d1e0      	bne.n	8001b56 <_free_r+0x26>
 8001b94:	681c      	ldr	r4, [r3, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	6053      	str	r3, [r2, #4]
 8001b9a:	4421      	add	r1, r4
 8001b9c:	6011      	str	r1, [r2, #0]
 8001b9e:	e7da      	b.n	8001b56 <_free_r+0x26>
 8001ba0:	d902      	bls.n	8001ba8 <_free_r+0x78>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	6003      	str	r3, [r0, #0]
 8001ba6:	e7d6      	b.n	8001b56 <_free_r+0x26>
 8001ba8:	6825      	ldr	r5, [r4, #0]
 8001baa:	1961      	adds	r1, r4, r5
 8001bac:	428b      	cmp	r3, r1
 8001bae:	bf04      	itt	eq
 8001bb0:	6819      	ldreq	r1, [r3, #0]
 8001bb2:	685b      	ldreq	r3, [r3, #4]
 8001bb4:	6063      	str	r3, [r4, #4]
 8001bb6:	bf04      	itt	eq
 8001bb8:	1949      	addeq	r1, r1, r5
 8001bba:	6021      	streq	r1, [r4, #0]
 8001bbc:	6054      	str	r4, [r2, #4]
 8001bbe:	e7ca      	b.n	8001b56 <_free_r+0x26>
 8001bc0:	b003      	add	sp, #12
 8001bc2:	bd30      	pop	{r4, r5, pc}
 8001bc4:	200000dc 	.word	0x200000dc

08001bc8 <_read_r>:
 8001bc8:	b538      	push	{r3, r4, r5, lr}
 8001bca:	4d07      	ldr	r5, [pc, #28]	; (8001be8 <_read_r+0x20>)
 8001bcc:	4604      	mov	r4, r0
 8001bce:	4608      	mov	r0, r1
 8001bd0:	4611      	mov	r1, r2
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	602a      	str	r2, [r5, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	f7fe fe9a 	bl	8000910 <_read>
 8001bdc:	1c43      	adds	r3, r0, #1
 8001bde:	d102      	bne.n	8001be6 <_read_r+0x1e>
 8001be0:	682b      	ldr	r3, [r5, #0]
 8001be2:	b103      	cbz	r3, 8001be6 <_read_r+0x1e>
 8001be4:	6023      	str	r3, [r4, #0]
 8001be6:	bd38      	pop	{r3, r4, r5, pc}
 8001be8:	200000e4 	.word	0x200000e4

08001bec <_fstat_r>:
 8001bec:	b538      	push	{r3, r4, r5, lr}
 8001bee:	4d07      	ldr	r5, [pc, #28]	; (8001c0c <_fstat_r+0x20>)
 8001bf0:	2300      	movs	r3, #0
 8001bf2:	4604      	mov	r4, r0
 8001bf4:	4608      	mov	r0, r1
 8001bf6:	4611      	mov	r1, r2
 8001bf8:	602b      	str	r3, [r5, #0]
 8001bfa:	f7fe fece 	bl	800099a <_fstat>
 8001bfe:	1c43      	adds	r3, r0, #1
 8001c00:	d102      	bne.n	8001c08 <_fstat_r+0x1c>
 8001c02:	682b      	ldr	r3, [r5, #0]
 8001c04:	b103      	cbz	r3, 8001c08 <_fstat_r+0x1c>
 8001c06:	6023      	str	r3, [r4, #0]
 8001c08:	bd38      	pop	{r3, r4, r5, pc}
 8001c0a:	bf00      	nop
 8001c0c:	200000e4 	.word	0x200000e4

08001c10 <_isatty_r>:
 8001c10:	b538      	push	{r3, r4, r5, lr}
 8001c12:	4d06      	ldr	r5, [pc, #24]	; (8001c2c <_isatty_r+0x1c>)
 8001c14:	2300      	movs	r3, #0
 8001c16:	4604      	mov	r4, r0
 8001c18:	4608      	mov	r0, r1
 8001c1a:	602b      	str	r3, [r5, #0]
 8001c1c:	f7fe fecd 	bl	80009ba <_isatty>
 8001c20:	1c43      	adds	r3, r0, #1
 8001c22:	d102      	bne.n	8001c2a <_isatty_r+0x1a>
 8001c24:	682b      	ldr	r3, [r5, #0]
 8001c26:	b103      	cbz	r3, 8001c2a <_isatty_r+0x1a>
 8001c28:	6023      	str	r3, [r4, #0]
 8001c2a:	bd38      	pop	{r3, r4, r5, pc}
 8001c2c:	200000e4 	.word	0x200000e4

08001c30 <_init>:
 8001c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c32:	bf00      	nop
 8001c34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c36:	bc08      	pop	{r3}
 8001c38:	469e      	mov	lr, r3
 8001c3a:	4770      	bx	lr

08001c3c <_fini>:
 8001c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c3e:	bf00      	nop
 8001c40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c42:	bc08      	pop	{r3}
 8001c44:	469e      	mov	lr, r3
 8001c46:	4770      	bx	lr
